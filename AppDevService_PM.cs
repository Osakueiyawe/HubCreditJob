//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.6.1055.0.
// 

namespace PM_TechAppDev
{

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "AppDevServiceSoap", Namespace = "http://tempuri.org/")]
    public partial class AppDevService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback getApprovedSignatoryOperationCompleted;

        private System.Threading.SendOrPostCallback InsertGTCollectionformOperationCompleted;

        private System.Threading.SendOrPostCallback InsertGTformfieldOperationCompleted;

        private System.Threading.SendOrPostCallback InsertGTChargeOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateformOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateMAXIBANKOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateFXPMProcessOperationCompleted;

        private System.Threading.SendOrPostCallback GetfacilitybalOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateUsrnameOperationCompleted;

        private System.Threading.SendOrPostCallback GetTeamEmailOperationCompleted;

        private System.Threading.SendOrPostCallback GetTransactionAlertStatusOperationCompleted;

        private System.Threading.SendOrPostCallback TransferFunds_TranSeqCommitOperationCompleted;

        private System.Threading.SendOrPostCallback TransferFunds_TranSeqCommitCapexOpexOperationCompleted;

        private System.Threading.SendOrPostCallback TransferFunds_TranSeqFXFutureDateOperationCompleted;

        private System.Threading.SendOrPostCallback ExistCustSearchOperationCompleted;

        private System.Threading.SendOrPostCallback GetGTWEBAPItokenOperationCompleted;

        private System.Threading.SendOrPostCallback InsertAccountDeferralDoc_DetailsOperationCompleted;

        private System.Threading.SendOrPostCallback BookLoan_BASISOperationCompleted;

        private System.Threading.SendOrPostCallback RescheduleLoan_BASISOperationCompleted;

        private System.Threading.SendOrPostCallback LiquidateLoan_BASISOperationCompleted;

        private System.Threading.SendOrPostCallback CreateLedgerOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateTransferLimitOperationCompleted;

        private System.Threading.SendOrPostCallback GetLedgerDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback GetUserIDOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateFXTransferLog_PMOperationCompleted;

        private System.Threading.SendOrPostCallback InsertChequeBookRequestsOperationCompleted;

        private System.Threading.SendOrPostCallback GetCustomerDOBHistoryOperationCompleted;

        private System.Threading.SendOrPostCallback GetDeferredDocOperationCompleted;

        private System.Threading.SendOrPostCallback GetAccountLinkedEmailOperationCompleted;

        private System.Threading.SendOrPostCallback GetAccountNatureOperationCompleted;

        private System.Threading.SendOrPostCallback SearchOFACListOperationCompleted;

        private System.Threading.SendOrPostCallback GetCustBVNOperationCompleted;

        private System.Threading.SendOrPostCallback GetLinkedAcct2BVNOperationCompleted;

        private System.Threading.SendOrPostCallback AddInReferenceOperationCompleted;

        private System.Threading.SendOrPostCallback AddoutReferenceOperationCompleted;

        private System.Threading.SendOrPostCallback AddUnsuitableReferenceOperationCompleted;

        private System.Threading.SendOrPostCallback InsertBallimOperationCompleted;

        private System.Threading.SendOrPostCallback InsertCardAccountOperationCompleted;

        private System.Threading.SendOrPostCallback GetAccountDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback ProcessSalaryAdvanceOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateGOHAttestationInfoOperationCompleted;

        private System.Threading.SendOrPostCallback getOutstandingBranchesOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateRelStatusOperationCompleted;

        private System.Threading.SendOrPostCallback PostToBASIS_With_ChargesOperationCompleted;

        private System.Threading.SendOrPostCallback Temporary_requestOperationCompleted;

        private System.Threading.SendOrPostCallback GetReliefExistOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateReliefDutyOperationCompleted;

        private System.Threading.SendOrPostCallback KillMyIDOperationCompleted;

        private System.Threading.SendOrPostCallback CreateNewMgrOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveledrestOperationCompleted;

        private System.Threading.SendOrPostCallback OpenextertransOperationCompleted;

        private System.Threading.SendOrPostCallback InsertLedgAmendRecordOperationCompleted;

        private System.Threading.SendOrPostCallback InsertInto_EBillspayMerchantOperationCompleted;

        private System.Threading.SendOrPostCallback InsertAppVersionOperationCompleted;

        private System.Threading.SendOrPostCallback CreateNewTeamOperationCompleted;

        private System.Threading.SendOrPostCallback CustomerUpdateOperationCompleted;

        private System.Threading.SendOrPostCallback ChangeAcctChaOperationCompleted;

        private System.Threading.SendOrPostCallback AddEoneRoleOperationCompleted;

        private System.Threading.SendOrPostCallback AddBasisRoleOperationCompleted;

        private System.Threading.SendOrPostCallback AddNewTellerOperationCompleted;

        private System.Threading.SendOrPostCallback CustBlacklistSearchOperationCompleted;

        private System.Threading.SendOrPostCallback GetCOTDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback SearchBASISUserOperationCompleted;

        private System.Threading.SendOrPostCallback AnalyzeFxOperationCompleted;

        private System.Threading.SendOrPostCallback submitFXRequestToBASISOperationCompleted;

        private System.Threading.SendOrPostCallback deleteFXRequestOperationCompleted;

        private System.Threading.SendOrPostCallback getFXRequestStatusOperationCompleted;

        private System.Threading.SendOrPostCallback ValidatePEPOperationCompleted;

        private System.Threading.SendOrPostCallback ValidateTokenSerialOperationCompleted;

        private System.Threading.SendOrPostCallback ValidateTokenSerialForStaffOperationCompleted;

        private System.Threading.SendOrPostCallback GetAccountStatusnewOperationCompleted;

        private System.Threading.SendOrPostCallback ImageToByteArrayOperationCompleted;

        private System.Threading.SendOrPostCallback GetAccountStatusOperationCompleted;

        private System.Threading.SendOrPostCallback DisplayAdd_CPCOperationCompleted;

        private System.Threading.SendOrPostCallback GetStaffIDLevelOperationCompleted;

        private System.Threading.SendOrPostCallback GetStaffEmpDateOperationCompleted;

        private System.Threading.SendOrPostCallback GetStaffRecordsOperationCompleted;

        private System.Threading.SendOrPostCallback CheckTransactionExistOperationCompleted;

        private System.Threading.SendOrPostCallback GetStaffConfDateOperationCompleted;

        private System.Threading.SendOrPostCallback GetBasisSignatureAndSequence2OperationCompleted;

        private System.Threading.SendOrPostCallback ValidateLoanMasCustomerOperationCompleted;

        private System.Threading.SendOrPostCallback CheckLoanExistOperationCompleted;

        private System.Threading.SendOrPostCallback GetBasisDetailsForFTROperationCompleted;

        private System.Threading.SendOrPostCallback GetBasisDetailsForFastBVNOperationCompleted;

        private System.Threading.SendOrPostCallback GetBasisDetailsForBVNOperationCompleted;

        private System.Threading.SendOrPostCallback GetSeqAccountListOperationCompleted;

        private System.Threading.SendOrPostCallback ValidateTemporaryCodeOperationCompleted;

        private System.Threading.SendOrPostCallback ValidateGTInstantCodeOperationCompleted;

        private System.Threading.SendOrPostCallback validatemobileCPCOperationCompleted;

        private System.Threading.SendOrPostCallback InsertBankCardUniqueCodeOperationCompleted;

        private System.Threading.SendOrPostCallback CreateGapsCustomerOperationCompleted;

        private System.Threading.SendOrPostCallback CreateGapsCustomer2OperationCompleted;

        private System.Threading.SendOrPostCallback CreateGapsAccountOperationCompleted;

        private System.Threading.SendOrPostCallback InsertBiometricPMOperationCompleted;

        private System.Threading.SendOrPostCallback InsertMailTempOperationCompleted;

        private System.Threading.SendOrPostCallback CreateGapsUserOperationCompleted;

        private System.Threading.SendOrPostCallback ProfileNewUserEoneOperationCompleted;

        private System.Threading.SendOrPostCallback ApproveGapsUserOperationCompleted;

        private System.Threading.SendOrPostCallback SelectGapsTokenDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback InsertGapsTokenDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback GetStaffAcctNumOperationCompleted;

        private System.Threading.SendOrPostCallback SelectGapsTokenDetailsPmOperationCompleted;

        private System.Threading.SendOrPostCallback GetStaffSubordinatesOperationCompleted;

        private System.Threading.SendOrPostCallback GetTeamMembersOperationCompleted;

        private System.Threading.SendOrPostCallback GetStaffAppraisalsOperationCompleted;

        private System.Threading.SendOrPostCallback PMRedeployUserOperationCompleted;

        private System.Threading.SendOrPostCallback UpdatePMUserActiveOperationCompleted;

        private System.Threading.SendOrPostCallback GetUserDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback UpdatePMUserInactiveOperationCompleted;

        private System.Threading.SendOrPostCallback UpdatePMUserVacationOperationCompleted;

        private System.Threading.SendOrPostCallback GetInactiveUserOperationCompleted;

        private System.Threading.SendOrPostCallback GetTeamNameOperationCompleted;

        private System.Threading.SendOrPostCallback GetTeamDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback GetEquvalentAmountOperationCompleted;

        private System.Threading.SendOrPostCallback CancelFX_PMOperationCompleted;

        private System.Threading.SendOrPostCallback CancelFX_PM1OperationCompleted;

        private System.Threading.SendOrPostCallback SearchMobileOperationCompleted;

        private System.Threading.SendOrPostCallback GetCheckBookOperationCompleted;

        private System.Threading.SendOrPostCallback getDirectorsOperationCompleted;

        private System.Threading.SendOrPostCallback CheckGTInstantAccOperationCompleted;

        private System.Threading.SendOrPostCallback SelectFormOperationCompleted;

        private System.Threading.SendOrPostCallback SelectChargeOperationCompleted;

        private System.Threading.SendOrPostCallback getIntAccruedLastPeriodOperationCompleted;

        private System.Threading.SendOrPostCallback GetPOSUsersDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback CheckGTCollectionCustomerOperationCompleted;

        private System.Threading.SendOrPostCallback CheckGAPSCustomerOperationCompleted;

        private System.Threading.SendOrPostCallback ValidateCodesOperationCompleted;

        private System.Threading.SendOrPostCallback ExtensionUserOperationCompleted;

        private System.Threading.SendOrPostCallback InsertGTCollectionCusOperationCompleted;

        private System.Threading.SendOrPostCallback AddNewAdminUserOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateAdminUserOperationCompleted;

        private System.Threading.SendOrPostCallback GetAdminUserDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback SearchAdminUserOperationCompleted;

        private System.Threading.SendOrPostCallback GetAllRolesOperationCompleted;

        private System.Threading.SendOrPostCallback GetAllAdminUsersOperationCompleted;

        private System.Threading.SendOrPostCallback GetBasisCustomerMandateOperationCompleted;

        private System.Threading.SendOrPostCallback GetAllBranchesOperationCompleted;

        private System.Threading.SendOrPostCallback ActivateAdminUserOperationCompleted;

        private System.Threading.SendOrPostCallback DeactivateAdminUserOperationCompleted;

        private System.Threading.SendOrPostCallback GetTellerTillAcctOperationCompleted;

        private System.Threading.SendOrPostCallback GetZoneAcctOperationCompleted;

        private System.Threading.SendOrPostCallback GetBranchAcctOperationCompleted;

        private System.Threading.SendOrPostCallback GetCustomerTurnoverOperationCompleted;

        private System.Threading.SendOrPostCallback GetAllBasisRolesOperationCompleted;

        private System.Threading.SendOrPostCallback GetBasisCustomerDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback GetBasisCustomerDetailsForAchivalOperationCompleted;

        private System.Threading.SendOrPostCallback GetNubanAcctKeyOperationCompleted;

        private System.Threading.SendOrPostCallback GetBasisSignatureAndSequenceOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateBVNOperationCompleted;

        private System.Threading.SendOrPostCallback GetBasisSignatureAndSequence1OperationCompleted;

        private System.Threading.SendOrPostCallback InitiateIReferOperationCompleted;

        private System.Threading.SendOrPostCallback getAllRestrictionsOperationCompleted;

        private System.Threading.SendOrPostCallback getTransactFromBasisOperationCompleted;

        private System.Threading.SendOrPostCallback getbalLimitOperationCompleted;

        private System.Threading.SendOrPostCallback getRestrictions1314OperationCompleted;

        private System.Threading.SendOrPostCallback getAllRestrictionsForBVNOperationCompleted;

        private System.Threading.SendOrPostCallback AddRestrictionbvnOperationCompleted;

        private System.Threading.SendOrPostCallback AddRestrictionOperationCompleted;

        private System.Threading.SendOrPostCallback AddRelationshipOperationCompleted;

        private System.Threading.SendOrPostCallback TbillsDealOperationCompleted;

        private System.Threading.SendOrPostCallback AddDirectorInfoOperationCompleted;

        private System.Threading.SendOrPostCallback CarVehicleOperationCompleted;

        private System.Threading.SendOrPostCallback CarReturnOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveRestrictionbvnOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveRestrictionOperationCompleted;

        private System.Threading.SendOrPostCallback GetBasisCustomerSignatureOperationCompleted;

        private System.Threading.SendOrPostCallback GetBasisSignaturesOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateVersionDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback SoftTokenSerialNoOperationCompleted;

        private System.Threading.SendOrPostCallback GetBasisTellerTillAcctOperationCompleted;

        private System.Threading.SendOrPostCallback getTellerLimitOperationCompleted;

        private System.Threading.SendOrPostCallback getTellerLimitPinPadOperationCompleted;

        private System.Threading.SendOrPostCallback GetTellerIDOperationCompleted;

        private System.Threading.SendOrPostCallback GetTellerdetailsOperationCompleted;

        private System.Threading.SendOrPostCallback GetGAPSPMOperationCompleted;

        private System.Threading.SendOrPostCallback getPinPadValuesOperationCompleted;

        private System.Threading.SendOrPostCallback getTransactionHistoryOperationCompleted;

        private System.Threading.SendOrPostCallback getTranSeqOperationCompleted;

        private System.Threading.SendOrPostCallback getcusDepositDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback CallOverOperationCompleted;

        private System.Threading.SendOrPostCallback CallOver2OperationCompleted;

        private System.Threading.SendOrPostCallback CallOverSummaryOperationCompleted;

        private System.Threading.SendOrPostCallback getcusDepositDetailsOldAccountOperationCompleted;

        private System.Threading.SendOrPostCallback BlockFunds_PMOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveBlockFunds_PMOperationCompleted;

        private System.Threading.SendOrPostCallback ValidateBVNOperationCompleted;

        private System.Threading.SendOrPostCallback SelectBVNOperationCompleted;

        private System.Threading.SendOrPostCallback SelectBVNMltOperationCompleted;

        private System.Threading.SendOrPostCallback SelectBlkamtOperationCompleted;

        private System.Threading.SendOrPostCallback SelectRepaSchOperationCompleted;

        private System.Threading.SendOrPostCallback ConvertToNubanOperationCompleted;

        private System.Threading.SendOrPostCallback ConvertToOldAccountNumberOperationCompleted;

        private System.Threading.SendOrPostCallback GetAllBasisUsersOperationCompleted;

        private System.Threading.SendOrPostCallback ConfirmSignatureOperationCompleted;

        private System.Threading.SendOrPostCallback GetTimeDepDetailsForProcessMakerOperationCompleted;

        private System.Threading.SendOrPostCallback GetRateForProcessMakerOperationCompleted;

        private System.Threading.SendOrPostCallback GetBasisDetailsForProcessMakerOperationCompleted;

        private System.Threading.SendOrPostCallback GetBasisDetailsForProcessMaker4OperationCompleted;

        private System.Threading.SendOrPostCallback DeleteSignatureOperationCompleted;

        private System.Threading.SendOrPostCallback GetBasisDetailsForProcessMaker3OperationCompleted;

        private System.Threading.SendOrPostCallback SearchBlackCustOperationCompleted;

        private System.Threading.SendOrPostCallback ConvertToWordsOperationCompleted;

        private System.Threading.SendOrPostCallback ConvertDigitOperationCompleted;

        private System.Threading.SendOrPostCallback ProcessMakerSlipNoOperationCompleted;

        private System.Threading.SendOrPostCallback getCurrRateOperationCompleted;

        private System.Threading.SendOrPostCallback BlockUnblockFundsOperationCompleted;

        private System.Threading.SendOrPostCallback MoveAcctMgrOperationCompleted;

        private System.Threading.SendOrPostCallback PMAccountReactivationOperationCompleted;

        private System.Threading.SendOrPostCallback CreateNewBasisAccount2OperationCompleted;

        private System.Threading.SendOrPostCallback CreateNewBasisAccount3OperationCompleted;

        private System.Threading.SendOrPostCallback CreateNewBasisAccount2KioskOperationCompleted;

        private System.Threading.SendOrPostCallback CloseAccountOperationCompleted;

        private System.Threading.SendOrPostCallback AvailRevolvingCreditOperationCompleted;

        private System.Threading.SendOrPostCallback InsertMT103OperationCompleted;

        private System.Threading.SendOrPostCallback ValidateUserTokenOperationCompleted;

        private System.Threading.SendOrPostCallback UpsertCalypsoMonitorOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteBVNOperationCompleted;

        private System.Threading.SendOrPostCallback ApproveBASISChequeBookOperationCompleted;

        private System.Threading.SendOrPostCallback RequestBASISChequeBookOperationCompleted;

        private System.Threading.SendOrPostCallback PMUpdateBankCardOperationCompleted;

        private System.Threading.SendOrPostCallback PM_FundingNewAccountsOperationCompleted;

        private System.Threading.SendOrPostCallback CheckActiveUsanceOperationCompleted;

        private System.Threading.SendOrPostCallback ValidateBeneficiaryAccountOperationCompleted;

        private System.Threading.SendOrPostCallback TransferFundsPMFXOperationCompleted;

        private System.Threading.SendOrPostCallback PostToBASISDocOperationCompleted;

        private System.Threading.SendOrPostCallback GetFTRAccountListCISOperationCompleted;

        private System.Threading.SendOrPostCallback GetFTRAccountListOperationCompleted;

        private System.Threading.SendOrPostCallback GetAllBasisAccFTROperationCompleted;

        private System.Threading.SendOrPostCallback GetFTRAccountListCIS_CardOperationCompleted;

        private System.Threading.SendOrPostCallback GetFTRAccountListNairaOperationCompleted;

        private System.Threading.SendOrPostCallback GetDomAccListOperationCompleted;

        private System.Threading.SendOrPostCallback FXConcessionOperationCompleted;

        private System.Threading.SendOrPostCallback checkrestrictionOperationCompleted;

        private System.Threading.SendOrPostCallback ValidateAdminUserOperationCompleted;

        private System.Threading.SendOrPostCallback ValidateEncryptedAdminUserWithIPOperationCompleted;

        private System.Threading.SendOrPostCallback ValidateEncryptedAdminUserOperationCompleted;

        private System.Threading.SendOrPostCallback ValidateAdminUserOffSiteOperationCompleted;

        private System.Threading.SendOrPostCallback ValidateUserOperationCompleted;

        private System.Threading.SendOrPostCallback GetAccountBalanceOperationCompleted;

        private System.Threading.SendOrPostCallback GetAccountBalanceSumOperationCompleted;

        private System.Threading.SendOrPostCallback GetAccountBalanceTrandateOperationCompleted;

        private System.Threading.SendOrPostCallback GetCustomerNameOperationCompleted;

        private System.Threading.SendOrPostCallback GetLedgerNameOperationCompleted;

        private System.Threading.SendOrPostCallback getRelationshipForSIOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateTemporaryCardCodeOperationCompleted;

        private System.Threading.SendOrPostCallback GetLastTransactionDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback GetLastAccountStatementOperationCompleted;

        private System.Threading.SendOrPostCallback GetAccountRestrictionOperationCompleted;

        private System.Threading.SendOrPostCallback TransferFundPMOperationCompleted;

        private System.Threading.SendOrPostCallback TransferFundPM57OperationCompleted;

        private System.Threading.SendOrPostCallback MaxAdvanceEligibityDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback APRandRepaymentAmountForMaxAdvanceOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateAddOperationCompleted;

        private System.Threading.SendOrPostCallback CreateNewTfsFeatureOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateBasisAccount2OperationCompleted;

        private System.Threading.SendOrPostCallback UpdateBasisAccount1OperationCompleted;

        private System.Threading.SendOrPostCallback UpdateBasisAccountOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateSpecAccOperationCompleted;

        private System.Threading.SendOrPostCallback CreateStandingInsOperationCompleted;

        private System.Threading.SendOrPostCallback CreateStandingInsTypeOperationCompleted;

        private System.Threading.SendOrPostCallback CancelStandinInsOperationCompleted;

        private System.Threading.SendOrPostCallback GetStandingInstructionPMOperationCompleted;

        private System.Threading.SendOrPostCallback GetStandingInstructionOperationCompleted;

        private System.Threading.SendOrPostCallback CreateAdditionalACcountOperationCompleted;

        private System.Threading.SendOrPostCallback CreateAdditionalACcount1OperationCompleted;

        private System.Threading.SendOrPostCallback UpdateCardProfilerOperationCompleted;

        private System.Threading.SendOrPostCallback StopChequeOperationCompleted;

        private System.Threading.SendOrPostCallback TransferFundOperationCompleted;

        private System.Threading.SendOrPostCallback TransferFundProcessMakerOperationCompleted;

        private System.Threading.SendOrPostCallback TransferFundProcessMakerNewOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateSalaryAdvanceStatusOperationCompleted;

        private System.Threading.SendOrPostCallback GetAccountManagerOperationCompleted;

        private System.Threading.SendOrPostCallback FXBlotterPositionOperationCompleted;

        private System.Threading.SendOrPostCallback checkGtaoweOperationCompleted;

        private System.Threading.SendOrPostCallback RetrievePmakerTraSeqOperationCompleted;

        private System.Threading.SendOrPostCallback RetrievePmakerTraSeq2OperationCompleted;

        private System.Threading.SendOrPostCallback GetBasisLoanDetailsWithReferenceKeyOperationCompleted;

        private System.Threading.SendOrPostCallback GetLastSalaryOperationCompleted;

        private System.Threading.SendOrPostCallback GetBasisLoanDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback TransferTraSeqOperationCompleted;

        private System.Threading.SendOrPostCallback TransferChargesOperationCompleted;

        private System.Threading.SendOrPostCallback TransferFund_CrossOperationCompleted;

        private System.Threading.SendOrPostCallback TransferChequesOperationCompleted;

        private System.Threading.SendOrPostCallback ResetUserPasscodeOperationCompleted;

        private System.Threading.SendOrPostCallback ChangeUserPasscodeOperationCompleted;

        private System.Threading.SendOrPostCallback ChangeAdminUserPasscodeOperationCompleted;

        private System.Threading.SendOrPostCallback GetApplicationRoleUsersOperationCompleted;

        private System.Threading.SendOrPostCallback GetAdminUserNameOperationCompleted;

        private System.Threading.SendOrPostCallback GetCustomerDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback ValidateAccountOperationCompleted;

        private System.Threading.SendOrPostCallback CheckUserFlagOperationCompleted;

        private System.Threading.SendOrPostCallback ResetUserFlagOperationCompleted;

        private System.Threading.SendOrPostCallback EncryptDataOperationCompleted;

        private System.Threading.SendOrPostCallback ProfileNewCardUserOperationCompleted;

        private System.Threading.SendOrPostCallback DecryptDataOperationCompleted;

        private System.Threading.SendOrPostCallback TransferCTIOperationCompleted;

        private System.Threading.SendOrPostCallback StartCTIOperationCompleted;

        private System.Threading.SendOrPostCallback LogAdminUserActionOperationCompleted;

        /// <remarks/>
        public AppDevService()
        {
            this.Url = "http://localhost/ChungLee/GTBTECHAPPDEV_PM/AppDevService.asmx";
        }

        /// <remarks/>
        public event getApprovedSignatoryCompletedEventHandler getApprovedSignatoryCompleted;

        /// <remarks/>
        public event InsertGTCollectionformCompletedEventHandler InsertGTCollectionformCompleted;

        /// <remarks/>
        public event InsertGTformfieldCompletedEventHandler InsertGTformfieldCompleted;

        /// <remarks/>
        public event InsertGTChargeCompletedEventHandler InsertGTChargeCompleted;

        /// <remarks/>
        public event UpdateformCompletedEventHandler UpdateformCompleted;

        /// <remarks/>
        public event UpdateMAXIBANKCompletedEventHandler UpdateMAXIBANKCompleted;

        /// <remarks/>
        public event UpdateFXPMProcessCompletedEventHandler UpdateFXPMProcessCompleted;

        /// <remarks/>
        public event GetfacilitybalCompletedEventHandler GetfacilitybalCompleted;

        /// <remarks/>
        public event UpdateUsrnameCompletedEventHandler UpdateUsrnameCompleted;

        /// <remarks/>
        public event GetTeamEmailCompletedEventHandler GetTeamEmailCompleted;

        /// <remarks/>
        public event GetTransactionAlertStatusCompletedEventHandler GetTransactionAlertStatusCompleted;

        /// <remarks/>
        public event TransferFunds_TranSeqCommitCompletedEventHandler TransferFunds_TranSeqCommitCompleted;

        /// <remarks/>
        public event TransferFunds_TranSeqCommitCapexOpexCompletedEventHandler TransferFunds_TranSeqCommitCapexOpexCompleted;

        /// <remarks/>
        public event TransferFunds_TranSeqFXFutureDateCompletedEventHandler TransferFunds_TranSeqFXFutureDateCompleted;

        /// <remarks/>
        public event ExistCustSearchCompletedEventHandler ExistCustSearchCompleted;

        /// <remarks/>
        public event GetGTWEBAPItokenCompletedEventHandler GetGTWEBAPItokenCompleted;

        /// <remarks/>
        public event InsertAccountDeferralDoc_DetailsCompletedEventHandler InsertAccountDeferralDoc_DetailsCompleted;

        /// <remarks/>
        public event BookLoan_BASISCompletedEventHandler BookLoan_BASISCompleted;

        /// <remarks/>
        public event RescheduleLoan_BASISCompletedEventHandler RescheduleLoan_BASISCompleted;

        /// <remarks/>
        public event LiquidateLoan_BASISCompletedEventHandler LiquidateLoan_BASISCompleted;

        /// <remarks/>
        public event CreateLedgerCompletedEventHandler CreateLedgerCompleted;

        /// <remarks/>
        public event UpdateTransferLimitCompletedEventHandler UpdateTransferLimitCompleted;

        /// <remarks/>
        public event GetLedgerDetailsCompletedEventHandler GetLedgerDetailsCompleted;

        /// <remarks/>
        public event GetUserIDCompletedEventHandler GetUserIDCompleted;

        /// <remarks/>
        public event UpdateFXTransferLog_PMCompletedEventHandler UpdateFXTransferLog_PMCompleted;

        /// <remarks/>
        public event InsertChequeBookRequestsCompletedEventHandler InsertChequeBookRequestsCompleted;

        /// <remarks/>
        public event GetCustomerDOBHistoryCompletedEventHandler GetCustomerDOBHistoryCompleted;

        /// <remarks/>
        public event GetDeferredDocCompletedEventHandler GetDeferredDocCompleted;

        /// <remarks/>
        public event GetAccountLinkedEmailCompletedEventHandler GetAccountLinkedEmailCompleted;

        /// <remarks/>
        public event GetAccountNatureCompletedEventHandler GetAccountNatureCompleted;

        /// <remarks/>
        public event SearchOFACListCompletedEventHandler SearchOFACListCompleted;

        /// <remarks/>
        public event GetCustBVNCompletedEventHandler GetCustBVNCompleted;

        /// <remarks/>
        public event GetLinkedAcct2BVNCompletedEventHandler GetLinkedAcct2BVNCompleted;

        /// <remarks/>
        public event AddInReferenceCompletedEventHandler AddInReferenceCompleted;

        /// <remarks/>
        public event AddoutReferenceCompletedEventHandler AddoutReferenceCompleted;

        /// <remarks/>
        public event AddUnsuitableReferenceCompletedEventHandler AddUnsuitableReferenceCompleted;

        /// <remarks/>
        public event InsertBallimCompletedEventHandler InsertBallimCompleted;

        /// <remarks/>
        public event InsertCardAccountCompletedEventHandler InsertCardAccountCompleted;

        /// <remarks/>
        public event GetAccountDetailsCompletedEventHandler GetAccountDetailsCompleted;

        /// <remarks/>
        public event ProcessSalaryAdvanceCompletedEventHandler ProcessSalaryAdvanceCompleted;

        /// <remarks/>
        public event UpdateGOHAttestationInfoCompletedEventHandler UpdateGOHAttestationInfoCompleted;

        /// <remarks/>
        public event getOutstandingBranchesCompletedEventHandler getOutstandingBranchesCompleted;

        /// <remarks/>
        public event UpdateRelStatusCompletedEventHandler UpdateRelStatusCompleted;

        /// <remarks/>
        public event PostToBASIS_With_ChargesCompletedEventHandler PostToBASIS_With_ChargesCompleted;

        /// <remarks/>
        public event Temporary_requestCompletedEventHandler Temporary_requestCompleted;

        /// <remarks/>
        public event GetReliefExistCompletedEventHandler GetReliefExistCompleted;

        /// <remarks/>
        public event UpdateReliefDutyCompletedEventHandler UpdateReliefDutyCompleted;

        /// <remarks/>
        public event KillMyIDCompletedEventHandler KillMyIDCompleted;

        /// <remarks/>
        public event CreateNewMgrCompletedEventHandler CreateNewMgrCompleted;

        /// <remarks/>
        public event RemoveledrestCompletedEventHandler RemoveledrestCompleted;

        /// <remarks/>
        public event OpenextertransCompletedEventHandler OpenextertransCompleted;

        /// <remarks/>
        public event InsertLedgAmendRecordCompletedEventHandler InsertLedgAmendRecordCompleted;

        /// <remarks/>
        public event InsertInto_EBillspayMerchantCompletedEventHandler InsertInto_EBillspayMerchantCompleted;

        /// <remarks/>
        public event InsertAppVersionCompletedEventHandler InsertAppVersionCompleted;

        /// <remarks/>
        public event CreateNewTeamCompletedEventHandler CreateNewTeamCompleted;

        /// <remarks/>
        public event CustomerUpdateCompletedEventHandler CustomerUpdateCompleted;

        /// <remarks/>
        public event ChangeAcctChaCompletedEventHandler ChangeAcctChaCompleted;

        /// <remarks/>
        public event AddEoneRoleCompletedEventHandler AddEoneRoleCompleted;

        /// <remarks/>
        public event AddBasisRoleCompletedEventHandler AddBasisRoleCompleted;

        /// <remarks/>
        public event AddNewTellerCompletedEventHandler AddNewTellerCompleted;

        /// <remarks/>
        public event CustBlacklistSearchCompletedEventHandler CustBlacklistSearchCompleted;

        /// <remarks/>
        public event GetCOTDetailsCompletedEventHandler GetCOTDetailsCompleted;

        /// <remarks/>
        public event SearchBASISUserCompletedEventHandler SearchBASISUserCompleted;

        /// <remarks/>
        public event AnalyzeFxCompletedEventHandler AnalyzeFxCompleted;

        /// <remarks/>
        public event submitFXRequestToBASISCompletedEventHandler submitFXRequestToBASISCompleted;

        /// <remarks/>
        public event deleteFXRequestCompletedEventHandler deleteFXRequestCompleted;

        /// <remarks/>
        public event getFXRequestStatusCompletedEventHandler getFXRequestStatusCompleted;

        /// <remarks/>
        public event ValidatePEPCompletedEventHandler ValidatePEPCompleted;

        /// <remarks/>
        public event ValidateTokenSerialCompletedEventHandler ValidateTokenSerialCompleted;

        /// <remarks/>
        public event ValidateTokenSerialForStaffCompletedEventHandler ValidateTokenSerialForStaffCompleted;

        /// <remarks/>
        public event GetAccountStatusnewCompletedEventHandler GetAccountStatusnewCompleted;

        /// <remarks/>
        public event ImageToByteArrayCompletedEventHandler ImageToByteArrayCompleted;

        /// <remarks/>
        public event GetAccountStatusCompletedEventHandler GetAccountStatusCompleted;

        /// <remarks/>
        public event DisplayAdd_CPCCompletedEventHandler DisplayAdd_CPCCompleted;

        /// <remarks/>
        public event GetStaffIDLevelCompletedEventHandler GetStaffIDLevelCompleted;

        /// <remarks/>
        public event GetStaffEmpDateCompletedEventHandler GetStaffEmpDateCompleted;

        /// <remarks/>
        public event GetStaffRecordsCompletedEventHandler GetStaffRecordsCompleted;

        /// <remarks/>
        public event CheckTransactionExistCompletedEventHandler CheckTransactionExistCompleted;

        /// <remarks/>
        public event GetStaffConfDateCompletedEventHandler GetStaffConfDateCompleted;

        /// <remarks/>
        public event GetBasisSignatureAndSequence2CompletedEventHandler GetBasisSignatureAndSequence2Completed;

        /// <remarks/>
        public event ValidateLoanMasCustomerCompletedEventHandler ValidateLoanMasCustomerCompleted;

        /// <remarks/>
        public event CheckLoanExistCompletedEventHandler CheckLoanExistCompleted;

        /// <remarks/>
        public event GetBasisDetailsForFTRCompletedEventHandler GetBasisDetailsForFTRCompleted;

        /// <remarks/>
        public event GetBasisDetailsForFastBVNCompletedEventHandler GetBasisDetailsForFastBVNCompleted;

        /// <remarks/>
        public event GetBasisDetailsForBVNCompletedEventHandler GetBasisDetailsForBVNCompleted;

        /// <remarks/>
        public event GetSeqAccountListCompletedEventHandler GetSeqAccountListCompleted;

        /// <remarks/>
        public event ValidateTemporaryCodeCompletedEventHandler ValidateTemporaryCodeCompleted;

        /// <remarks/>
        public event ValidateGTInstantCodeCompletedEventHandler ValidateGTInstantCodeCompleted;

        /// <remarks/>
        public event validatemobileCPCCompletedEventHandler validatemobileCPCCompleted;

        /// <remarks/>
        public event InsertBankCardUniqueCodeCompletedEventHandler InsertBankCardUniqueCodeCompleted;

        /// <remarks/>
        public event CreateGapsCustomerCompletedEventHandler CreateGapsCustomerCompleted;

        /// <remarks/>
        public event CreateGapsCustomer2CompletedEventHandler CreateGapsCustomer2Completed;

        /// <remarks/>
        public event CreateGapsAccountCompletedEventHandler CreateGapsAccountCompleted;

        /// <remarks/>
        public event InsertBiometricPMCompletedEventHandler InsertBiometricPMCompleted;

        /// <remarks/>
        public event InsertMailTempCompletedEventHandler InsertMailTempCompleted;

        /// <remarks/>
        public event CreateGapsUserCompletedEventHandler CreateGapsUserCompleted;

        /// <remarks/>
        public event ProfileNewUserEoneCompletedEventHandler ProfileNewUserEoneCompleted;

        /// <remarks/>
        public event ApproveGapsUserCompletedEventHandler ApproveGapsUserCompleted;

        /// <remarks/>
        public event SelectGapsTokenDetailsCompletedEventHandler SelectGapsTokenDetailsCompleted;

        /// <remarks/>
        public event InsertGapsTokenDetailsCompletedEventHandler InsertGapsTokenDetailsCompleted;

        /// <remarks/>
        public event GetStaffAcctNumCompletedEventHandler GetStaffAcctNumCompleted;

        /// <remarks/>
        public event SelectGapsTokenDetailsPmCompletedEventHandler SelectGapsTokenDetailsPmCompleted;

        /// <remarks/>
        public event GetStaffSubordinatesCompletedEventHandler GetStaffSubordinatesCompleted;

        /// <remarks/>
        public event GetTeamMembersCompletedEventHandler GetTeamMembersCompleted;

        /// <remarks/>
        public event GetStaffAppraisalsCompletedEventHandler GetStaffAppraisalsCompleted;

        /// <remarks/>
        public event PMRedeployUserCompletedEventHandler PMRedeployUserCompleted;

        /// <remarks/>
        public event UpdatePMUserActiveCompletedEventHandler UpdatePMUserActiveCompleted;

        /// <remarks/>
        public event GetUserDetailsCompletedEventHandler GetUserDetailsCompleted;

        /// <remarks/>
        public event UpdatePMUserInactiveCompletedEventHandler UpdatePMUserInactiveCompleted;

        /// <remarks/>
        public event UpdatePMUserVacationCompletedEventHandler UpdatePMUserVacationCompleted;

        /// <remarks/>
        public event GetInactiveUserCompletedEventHandler GetInactiveUserCompleted;

        /// <remarks/>
        public event GetTeamNameCompletedEventHandler GetTeamNameCompleted;

        /// <remarks/>
        public event GetTeamDetailsCompletedEventHandler GetTeamDetailsCompleted;

        /// <remarks/>
        public event GetEquvalentAmountCompletedEventHandler GetEquvalentAmountCompleted;

        /// <remarks/>
        public event CancelFX_PMCompletedEventHandler CancelFX_PMCompleted;

        /// <remarks/>
        public event CancelFX_PM1CompletedEventHandler CancelFX_PM1Completed;

        /// <remarks/>
        public event SearchMobileCompletedEventHandler SearchMobileCompleted;

        /// <remarks/>
        public event GetCheckBookCompletedEventHandler GetCheckBookCompleted;

        /// <remarks/>
        public event getDirectorsCompletedEventHandler getDirectorsCompleted;

        /// <remarks/>
        public event CheckGTInstantAccCompletedEventHandler CheckGTInstantAccCompleted;

        /// <remarks/>
        public event SelectFormCompletedEventHandler SelectFormCompleted;

        /// <remarks/>
        public event SelectChargeCompletedEventHandler SelectChargeCompleted;

        /// <remarks/>
        public event getIntAccruedLastPeriodCompletedEventHandler getIntAccruedLastPeriodCompleted;

        /// <remarks/>
        public event GetPOSUsersDetailsCompletedEventHandler GetPOSUsersDetailsCompleted;

        /// <remarks/>
        public event CheckGTCollectionCustomerCompletedEventHandler CheckGTCollectionCustomerCompleted;

        /// <remarks/>
        public event CheckGAPSCustomerCompletedEventHandler CheckGAPSCustomerCompleted;

        /// <remarks/>
        public event ValidateCodesCompletedEventHandler ValidateCodesCompleted;

        /// <remarks/>
        public event ExtensionUserCompletedEventHandler ExtensionUserCompleted;

        /// <remarks/>
        public event InsertGTCollectionCusCompletedEventHandler InsertGTCollectionCusCompleted;

        /// <remarks/>
        public event AddNewAdminUserCompletedEventHandler AddNewAdminUserCompleted;

        /// <remarks/>
        public event UpdateAdminUserCompletedEventHandler UpdateAdminUserCompleted;

        /// <remarks/>
        public event GetAdminUserDetailsCompletedEventHandler GetAdminUserDetailsCompleted;

        /// <remarks/>
        public event SearchAdminUserCompletedEventHandler SearchAdminUserCompleted;

        /// <remarks/>
        public event GetAllRolesCompletedEventHandler GetAllRolesCompleted;

        /// <remarks/>
        public event GetAllAdminUsersCompletedEventHandler GetAllAdminUsersCompleted;

        /// <remarks/>
        public event GetBasisCustomerMandateCompletedEventHandler GetBasisCustomerMandateCompleted;

        /// <remarks/>
        public event GetAllBranchesCompletedEventHandler GetAllBranchesCompleted;

        /// <remarks/>
        public event ActivateAdminUserCompletedEventHandler ActivateAdminUserCompleted;

        /// <remarks/>
        public event DeactivateAdminUserCompletedEventHandler DeactivateAdminUserCompleted;

        /// <remarks/>
        public event GetTellerTillAcctCompletedEventHandler GetTellerTillAcctCompleted;

        /// <remarks/>
        public event GetZoneAcctCompletedEventHandler GetZoneAcctCompleted;

        /// <remarks/>
        public event GetBranchAcctCompletedEventHandler GetBranchAcctCompleted;

        /// <remarks/>
        public event GetCustomerTurnoverCompletedEventHandler GetCustomerTurnoverCompleted;

        /// <remarks/>
        public event GetAllBasisRolesCompletedEventHandler GetAllBasisRolesCompleted;

        /// <remarks/>
        public event GetBasisCustomerDetailsCompletedEventHandler GetBasisCustomerDetailsCompleted;

        /// <remarks/>
        public event GetBasisCustomerDetailsForAchivalCompletedEventHandler GetBasisCustomerDetailsForAchivalCompleted;

        /// <remarks/>
        public event GetNubanAcctKeyCompletedEventHandler GetNubanAcctKeyCompleted;

        /// <remarks/>
        public event GetBasisSignatureAndSequenceCompletedEventHandler GetBasisSignatureAndSequenceCompleted;

        /// <remarks/>
        public event UpdateBVNCompletedEventHandler UpdateBVNCompleted;

        /// <remarks/>
        public event GetBasisSignatureAndSequence1CompletedEventHandler GetBasisSignatureAndSequence1Completed;

        /// <remarks/>
        public event InitiateIReferCompletedEventHandler InitiateIReferCompleted;

        /// <remarks/>
        public event getAllRestrictionsCompletedEventHandler getAllRestrictionsCompleted;

        /// <remarks/>
        public event getTransactFromBasisCompletedEventHandler getTransactFromBasisCompleted;

        /// <remarks/>
        public event getbalLimitCompletedEventHandler getbalLimitCompleted;

        /// <remarks/>
        public event getRestrictions1314CompletedEventHandler getRestrictions1314Completed;

        /// <remarks/>
        public event getAllRestrictionsForBVNCompletedEventHandler getAllRestrictionsForBVNCompleted;

        /// <remarks/>
        public event AddRestrictionbvnCompletedEventHandler AddRestrictionbvnCompleted;

        /// <remarks/>
        public event AddRestrictionCompletedEventHandler AddRestrictionCompleted;

        /// <remarks/>
        public event AddRelationshipCompletedEventHandler AddRelationshipCompleted;

        /// <remarks/>
        public event TbillsDealCompletedEventHandler TbillsDealCompleted;

        /// <remarks/>
        public event AddDirectorInfoCompletedEventHandler AddDirectorInfoCompleted;

        /// <remarks/>
        public event CarVehicleCompletedEventHandler CarVehicleCompleted;

        /// <remarks/>
        public event CarReturnCompletedEventHandler CarReturnCompleted;

        /// <remarks/>
        public event RemoveRestrictionbvnCompletedEventHandler RemoveRestrictionbvnCompleted;

        /// <remarks/>
        public event RemoveRestrictionCompletedEventHandler RemoveRestrictionCompleted;

        /// <remarks/>
        public event GetBasisCustomerSignatureCompletedEventHandler GetBasisCustomerSignatureCompleted;

        /// <remarks/>
        public event GetBasisSignaturesCompletedEventHandler GetBasisSignaturesCompleted;

        /// <remarks/>
        public event UpdateVersionDetailsCompletedEventHandler UpdateVersionDetailsCompleted;

        /// <remarks/>
        public event SoftTokenSerialNoCompletedEventHandler SoftTokenSerialNoCompleted;

        /// <remarks/>
        public event GetBasisTellerTillAcctCompletedEventHandler GetBasisTellerTillAcctCompleted;

        /// <remarks/>
        public event getTellerLimitCompletedEventHandler getTellerLimitCompleted;

        /// <remarks/>
        public event getTellerLimitPinPadCompletedEventHandler getTellerLimitPinPadCompleted;

        /// <remarks/>
        public event GetTellerIDCompletedEventHandler GetTellerIDCompleted;

        /// <remarks/>
        public event GetTellerdetailsCompletedEventHandler GetTellerdetailsCompleted;

        /// <remarks/>
        public event GetGAPSPMCompletedEventHandler GetGAPSPMCompleted;

        /// <remarks/>
        public event getPinPadValuesCompletedEventHandler getPinPadValuesCompleted;

        /// <remarks/>
        public event getTransactionHistoryCompletedEventHandler getTransactionHistoryCompleted;

        /// <remarks/>
        public event getTranSeqCompletedEventHandler getTranSeqCompleted;

        /// <remarks/>
        public event getcusDepositDetailsCompletedEventHandler getcusDepositDetailsCompleted;

        /// <remarks/>
        public event CallOverCompletedEventHandler CallOverCompleted;

        /// <remarks/>
        public event CallOver2CompletedEventHandler CallOver2Completed;

        /// <remarks/>
        public event CallOverSummaryCompletedEventHandler CallOverSummaryCompleted;

        /// <remarks/>
        public event getcusDepositDetailsOldAccountCompletedEventHandler getcusDepositDetailsOldAccountCompleted;

        /// <remarks/>
        public event BlockFunds_PMCompletedEventHandler BlockFunds_PMCompleted;

        /// <remarks/>
        public event RemoveBlockFunds_PMCompletedEventHandler RemoveBlockFunds_PMCompleted;

        /// <remarks/>
        public event ValidateBVNCompletedEventHandler ValidateBVNCompleted;

        /// <remarks/>
        public event SelectBVNCompletedEventHandler SelectBVNCompleted;

        /// <remarks/>
        public event SelectBVNMltCompletedEventHandler SelectBVNMltCompleted;

        /// <remarks/>
        public event SelectBlkamtCompletedEventHandler SelectBlkamtCompleted;

        /// <remarks/>
        public event SelectRepaSchCompletedEventHandler SelectRepaSchCompleted;

        /// <remarks/>
        public event ConvertToNubanCompletedEventHandler ConvertToNubanCompleted;

        /// <remarks/>
        public event ConvertToOldAccountNumberCompletedEventHandler ConvertToOldAccountNumberCompleted;

        /// <remarks/>
        public event GetAllBasisUsersCompletedEventHandler GetAllBasisUsersCompleted;

        /// <remarks/>
        public event ConfirmSignatureCompletedEventHandler ConfirmSignatureCompleted;

        /// <remarks/>
        public event GetTimeDepDetailsForProcessMakerCompletedEventHandler GetTimeDepDetailsForProcessMakerCompleted;

        /// <remarks/>
        public event GetRateForProcessMakerCompletedEventHandler GetRateForProcessMakerCompleted;

        /// <remarks/>
        public event GetBasisDetailsForProcessMakerCompletedEventHandler GetBasisDetailsForProcessMakerCompleted;

        /// <remarks/>
        public event GetBasisDetailsForProcessMaker4CompletedEventHandler GetBasisDetailsForProcessMaker4Completed;

        /// <remarks/>
        public event DeleteSignatureCompletedEventHandler DeleteSignatureCompleted;

        /// <remarks/>
        public event GetBasisDetailsForProcessMaker3CompletedEventHandler GetBasisDetailsForProcessMaker3Completed;

        /// <remarks/>
        public event SearchBlackCustCompletedEventHandler SearchBlackCustCompleted;

        /// <remarks/>
        public event ConvertToWordsCompletedEventHandler ConvertToWordsCompleted;

        /// <remarks/>
        public event ConvertDigitCompletedEventHandler ConvertDigitCompleted;

        /// <remarks/>
        public event ProcessMakerSlipNoCompletedEventHandler ProcessMakerSlipNoCompleted;

        /// <remarks/>
        public event getCurrRateCompletedEventHandler getCurrRateCompleted;

        /// <remarks/>
        public event BlockUnblockFundsCompletedEventHandler BlockUnblockFundsCompleted;

        /// <remarks/>
        public event MoveAcctMgrCompletedEventHandler MoveAcctMgrCompleted;

        /// <remarks/>
        public event PMAccountReactivationCompletedEventHandler PMAccountReactivationCompleted;

        /// <remarks/>
        public event CreateNewBasisAccount2CompletedEventHandler CreateNewBasisAccount2Completed;

        /// <remarks/>
        public event CreateNewBasisAccount3CompletedEventHandler CreateNewBasisAccount3Completed;

        /// <remarks/>
        public event CreateNewBasisAccount2KioskCompletedEventHandler CreateNewBasisAccount2KioskCompleted;

        /// <remarks/>
        public event CloseAccountCompletedEventHandler CloseAccountCompleted;

        /// <remarks/>
        public event AvailRevolvingCreditCompletedEventHandler AvailRevolvingCreditCompleted;

        /// <remarks/>
        public event InsertMT103CompletedEventHandler InsertMT103Completed;

        /// <remarks/>
        public event ValidateUserTokenCompletedEventHandler ValidateUserTokenCompleted;

        /// <remarks/>
        public event UpsertCalypsoMonitorCompletedEventHandler UpsertCalypsoMonitorCompleted;

        /// <remarks/>
        public event DeleteBVNCompletedEventHandler DeleteBVNCompleted;

        /// <remarks/>
        public event ApproveBASISChequeBookCompletedEventHandler ApproveBASISChequeBookCompleted;

        /// <remarks/>
        public event RequestBASISChequeBookCompletedEventHandler RequestBASISChequeBookCompleted;

        /// <remarks/>
        public event PMUpdateBankCardCompletedEventHandler PMUpdateBankCardCompleted;

        /// <remarks/>
        public event PM_FundingNewAccountsCompletedEventHandler PM_FundingNewAccountsCompleted;

        /// <remarks/>
        public event CheckActiveUsanceCompletedEventHandler CheckActiveUsanceCompleted;

        /// <remarks/>
        public event ValidateBeneficiaryAccountCompletedEventHandler ValidateBeneficiaryAccountCompleted;

        /// <remarks/>
        public event TransferFundsPMFXCompletedEventHandler TransferFundsPMFXCompleted;

        /// <remarks/>
        public event PostToBASISDocCompletedEventHandler PostToBASISDocCompleted;

        /// <remarks/>
        public event GetFTRAccountListCISCompletedEventHandler GetFTRAccountListCISCompleted;

        /// <remarks/>
        public event GetFTRAccountListCompletedEventHandler GetFTRAccountListCompleted;

        /// <remarks/>
        public event GetAllBasisAccFTRCompletedEventHandler GetAllBasisAccFTRCompleted;

        /// <remarks/>
        public event GetFTRAccountListCIS_CardCompletedEventHandler GetFTRAccountListCIS_CardCompleted;

        /// <remarks/>
        public event GetFTRAccountListNairaCompletedEventHandler GetFTRAccountListNairaCompleted;

        /// <remarks/>
        public event GetDomAccListCompletedEventHandler GetDomAccListCompleted;

        /// <remarks/>
        public event FXConcessionCompletedEventHandler FXConcessionCompleted;

        /// <remarks/>
        public event checkrestrictionCompletedEventHandler checkrestrictionCompleted;

        /// <remarks/>
        public event ValidateAdminUserCompletedEventHandler ValidateAdminUserCompleted;

        /// <remarks/>
        public event ValidateEncryptedAdminUserWithIPCompletedEventHandler ValidateEncryptedAdminUserWithIPCompleted;

        /// <remarks/>
        public event ValidateEncryptedAdminUserCompletedEventHandler ValidateEncryptedAdminUserCompleted;

        /// <remarks/>
        public event ValidateAdminUserOffSiteCompletedEventHandler ValidateAdminUserOffSiteCompleted;

        /// <remarks/>
        public event ValidateUserCompletedEventHandler ValidateUserCompleted;

        /// <remarks/>
        public event GetAccountBalanceCompletedEventHandler GetAccountBalanceCompleted;

        /// <remarks/>
        public event GetAccountBalanceSumCompletedEventHandler GetAccountBalanceSumCompleted;

        /// <remarks/>
        public event GetAccountBalanceTrandateCompletedEventHandler GetAccountBalanceTrandateCompleted;

        /// <remarks/>
        public event GetCustomerNameCompletedEventHandler GetCustomerNameCompleted;

        /// <remarks/>
        public event GetLedgerNameCompletedEventHandler GetLedgerNameCompleted;

        /// <remarks/>
        public event getRelationshipForSICompletedEventHandler getRelationshipForSICompleted;

        /// <remarks/>
        public event UpdateTemporaryCardCodeCompletedEventHandler UpdateTemporaryCardCodeCompleted;

        /// <remarks/>
        public event GetLastTransactionDetailsCompletedEventHandler GetLastTransactionDetailsCompleted;

        /// <remarks/>
        public event GetLastAccountStatementCompletedEventHandler GetLastAccountStatementCompleted;

        /// <remarks/>
        public event GetAccountRestrictionCompletedEventHandler GetAccountRestrictionCompleted;

        /// <remarks/>
        public event TransferFundPMCompletedEventHandler TransferFundPMCompleted;

        /// <remarks/>
        public event TransferFundPM57CompletedEventHandler TransferFundPM57Completed;

        /// <remarks/>
        public event MaxAdvanceEligibityDetailsCompletedEventHandler MaxAdvanceEligibityDetailsCompleted;

        /// <remarks/>
        public event APRandRepaymentAmountForMaxAdvanceCompletedEventHandler APRandRepaymentAmountForMaxAdvanceCompleted;

        /// <remarks/>
        public event UpdateAddCompletedEventHandler UpdateAddCompleted;

        /// <remarks/>
        public event CreateNewTfsFeatureCompletedEventHandler CreateNewTfsFeatureCompleted;

        /// <remarks/>
        public event UpdateBasisAccount2CompletedEventHandler UpdateBasisAccount2Completed;

        /// <remarks/>
        public event UpdateBasisAccount1CompletedEventHandler UpdateBasisAccount1Completed;

        /// <remarks/>
        public event UpdateBasisAccountCompletedEventHandler UpdateBasisAccountCompleted;

        /// <remarks/>
        public event UpdateSpecAccCompletedEventHandler UpdateSpecAccCompleted;

        /// <remarks/>
        public event CreateStandingInsCompletedEventHandler CreateStandingInsCompleted;

        /// <remarks/>
        public event CreateStandingInsTypeCompletedEventHandler CreateStandingInsTypeCompleted;

        /// <remarks/>
        public event CancelStandinInsCompletedEventHandler CancelStandinInsCompleted;

        /// <remarks/>
        public event GetStandingInstructionPMCompletedEventHandler GetStandingInstructionPMCompleted;

        /// <remarks/>
        public event GetStandingInstructionCompletedEventHandler GetStandingInstructionCompleted;

        /// <remarks/>
        public event CreateAdditionalACcountCompletedEventHandler CreateAdditionalACcountCompleted;

        /// <remarks/>
        public event CreateAdditionalACcount1CompletedEventHandler CreateAdditionalACcount1Completed;

        /// <remarks/>
        public event UpdateCardProfilerCompletedEventHandler UpdateCardProfilerCompleted;

        /// <remarks/>
        public event StopChequeCompletedEventHandler StopChequeCompleted;

        /// <remarks/>
        public event TransferFundCompletedEventHandler TransferFundCompleted;

        /// <remarks/>
        public event TransferFundProcessMakerCompletedEventHandler TransferFundProcessMakerCompleted;

        /// <remarks/>
        public event TransferFundProcessMakerNewCompletedEventHandler TransferFundProcessMakerNewCompleted;

        /// <remarks/>
        public event UpdateSalaryAdvanceStatusCompletedEventHandler UpdateSalaryAdvanceStatusCompleted;

        /// <remarks/>
        public event GetAccountManagerCompletedEventHandler GetAccountManagerCompleted;

        /// <remarks/>
        public event FXBlotterPositionCompletedEventHandler FXBlotterPositionCompleted;

        /// <remarks/>
        public event checkGtaoweCompletedEventHandler checkGtaoweCompleted;

        /// <remarks/>
        public event RetrievePmakerTraSeqCompletedEventHandler RetrievePmakerTraSeqCompleted;

        /// <remarks/>
        public event RetrievePmakerTraSeq2CompletedEventHandler RetrievePmakerTraSeq2Completed;

        /// <remarks/>
        public event GetBasisLoanDetailsWithReferenceKeyCompletedEventHandler GetBasisLoanDetailsWithReferenceKeyCompleted;

        /// <remarks/>
        public event GetLastSalaryCompletedEventHandler GetLastSalaryCompleted;

        /// <remarks/>
        public event GetBasisLoanDetailsCompletedEventHandler GetBasisLoanDetailsCompleted;

        /// <remarks/>
        public event TransferTraSeqCompletedEventHandler TransferTraSeqCompleted;

        /// <remarks/>
        public event TransferChargesCompletedEventHandler TransferChargesCompleted;

        /// <remarks/>
        public event TransferFund_CrossCompletedEventHandler TransferFund_CrossCompleted;

        /// <remarks/>
        public event TransferChequesCompletedEventHandler TransferChequesCompleted;

        /// <remarks/>
        public event ResetUserPasscodeCompletedEventHandler ResetUserPasscodeCompleted;

        /// <remarks/>
        public event ChangeUserPasscodeCompletedEventHandler ChangeUserPasscodeCompleted;

        /// <remarks/>
        public event ChangeAdminUserPasscodeCompletedEventHandler ChangeAdminUserPasscodeCompleted;

        /// <remarks/>
        public event GetApplicationRoleUsersCompletedEventHandler GetApplicationRoleUsersCompleted;

        /// <remarks/>
        public event GetAdminUserNameCompletedEventHandler GetAdminUserNameCompleted;

        /// <remarks/>
        public event GetCustomerDetailsCompletedEventHandler GetCustomerDetailsCompleted;

        /// <remarks/>
        public event ValidateAccountCompletedEventHandler ValidateAccountCompleted;

        /// <remarks/>
        public event CheckUserFlagCompletedEventHandler CheckUserFlagCompleted;

        /// <remarks/>
        public event ResetUserFlagCompletedEventHandler ResetUserFlagCompleted;

        /// <remarks/>
        public event EncryptDataCompletedEventHandler EncryptDataCompleted;

        /// <remarks/>
        public event ProfileNewCardUserCompletedEventHandler ProfileNewCardUserCompleted;

        /// <remarks/>
        public event DecryptDataCompletedEventHandler DecryptDataCompleted;

        /// <remarks/>
        public event TransferCTICompletedEventHandler TransferCTICompleted;

        /// <remarks/>
        public event StartCTICompletedEventHandler StartCTICompleted;

        /// <remarks/>
        public event LogAdminUserActionCompletedEventHandler LogAdminUserActionCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getApprovedSignatory", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getApprovedSignatory(string UserId, string Status, string SignatureClass)
        {
            object[] results = this.Invoke("getApprovedSignatory", new object[] {
                    UserId,
                    Status,
                    SignatureClass});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetApprovedSignatory(string UserId, string Status, string SignatureClass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getApprovedSignatory", new object[] {
                    UserId,
                    Status,
                    SignatureClass}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetApprovedSignatory(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getApprovedSignatoryAsync(string UserId, string Status, string SignatureClass)
        {
            this.getApprovedSignatoryAsync(UserId, Status, SignatureClass, null);
        }

        /// <remarks/>
        public void getApprovedSignatoryAsync(string UserId, string Status, string SignatureClass, object userState)
        {
            if ((this.getApprovedSignatoryOperationCompleted == null))
            {
                this.getApprovedSignatoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetApprovedSignatoryOperationCompleted);
            }
            this.InvokeAsync("getApprovedSignatory", new object[] {
                    UserId,
                    Status,
                    SignatureClass}, this.getApprovedSignatoryOperationCompleted, userState);
        }

        private void OngetApprovedSignatoryOperationCompleted(object arg)
        {
            if ((this.getApprovedSignatoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getApprovedSignatoryCompleted(this, new getApprovedSignatoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertGTCollectionform", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertGTCollectionform(int customer_id, string form_title, string form_desc, string account_number, string alert_email, string cc_acct_off_email, int send_alert, string sms_alert_phones, int payment_category, int ussd_code, int merchant_code)
        {
            object[] results = this.Invoke("InsertGTCollectionform", new object[] {
                    customer_id,
                    form_title,
                    form_desc,
                    account_number,
                    alert_email,
                    cc_acct_off_email,
                    send_alert,
                    sms_alert_phones,
                    payment_category,
                    ussd_code,
                    merchant_code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertGTCollectionform(int customer_id, string form_title, string form_desc, string account_number, string alert_email, string cc_acct_off_email, int send_alert, string sms_alert_phones, int payment_category, int ussd_code, int merchant_code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InsertGTCollectionform", new object[] {
                    customer_id,
                    form_title,
                    form_desc,
                    account_number,
                    alert_email,
                    cc_acct_off_email,
                    send_alert,
                    sms_alert_phones,
                    payment_category,
                    ussd_code,
                    merchant_code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInsertGTCollectionform(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertGTCollectionformAsync(int customer_id, string form_title, string form_desc, string account_number, string alert_email, string cc_acct_off_email, int send_alert, string sms_alert_phones, int payment_category, int ussd_code, int merchant_code)
        {
            this.InsertGTCollectionformAsync(customer_id, form_title, form_desc, account_number, alert_email, cc_acct_off_email, send_alert, sms_alert_phones, payment_category, ussd_code, merchant_code, null);
        }

        /// <remarks/>
        public void InsertGTCollectionformAsync(int customer_id, string form_title, string form_desc, string account_number, string alert_email, string cc_acct_off_email, int send_alert, string sms_alert_phones, int payment_category, int ussd_code, int merchant_code, object userState)
        {
            if ((this.InsertGTCollectionformOperationCompleted == null))
            {
                this.InsertGTCollectionformOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertGTCollectionformOperationCompleted);
            }
            this.InvokeAsync("InsertGTCollectionform", new object[] {
                    customer_id,
                    form_title,
                    form_desc,
                    account_number,
                    alert_email,
                    cc_acct_off_email,
                    send_alert,
                    sms_alert_phones,
                    payment_category,
                    ussd_code,
                    merchant_code}, this.InsertGTCollectionformOperationCompleted, userState);
        }

        private void OnInsertGTCollectionformOperationCompleted(object arg)
        {
            if ((this.InsertGTCollectionformCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertGTCollectionformCompleted(this, new InsertGTCollectionformCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertGTformfield", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertGTformfield(int form_id, string form_name, string field_caption, string field_type, string field_datatype, int field_length, int field_in_remarks, int field_sequence, int amt_ref)
        {
            object[] results = this.Invoke("InsertGTformfield", new object[] {
                    form_id,
                    form_name,
                    field_caption,
                    field_type,
                    field_datatype,
                    field_length,
                    field_in_remarks,
                    field_sequence,
                    amt_ref});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertGTformfield(int form_id, string form_name, string field_caption, string field_type, string field_datatype, int field_length, int field_in_remarks, int field_sequence, int amt_ref, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InsertGTformfield", new object[] {
                    form_id,
                    form_name,
                    field_caption,
                    field_type,
                    field_datatype,
                    field_length,
                    field_in_remarks,
                    field_sequence,
                    amt_ref}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInsertGTformfield(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertGTformfieldAsync(int form_id, string form_name, string field_caption, string field_type, string field_datatype, int field_length, int field_in_remarks, int field_sequence, int amt_ref)
        {
            this.InsertGTformfieldAsync(form_id, form_name, field_caption, field_type, field_datatype, field_length, field_in_remarks, field_sequence, amt_ref, null);
        }

        /// <remarks/>
        public void InsertGTformfieldAsync(int form_id, string form_name, string field_caption, string field_type, string field_datatype, int field_length, int field_in_remarks, int field_sequence, int amt_ref, object userState)
        {
            if ((this.InsertGTformfieldOperationCompleted == null))
            {
                this.InsertGTformfieldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertGTformfieldOperationCompleted);
            }
            this.InvokeAsync("InsertGTformfield", new object[] {
                    form_id,
                    form_name,
                    field_caption,
                    field_type,
                    field_datatype,
                    field_length,
                    field_in_remarks,
                    field_sequence,
                    amt_ref}, this.InsertGTformfieldOperationCompleted, userState);
        }

        private void OnInsertGTformfieldOperationCompleted(object arg)
        {
            if ((this.InsertGTformfieldCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertGTformfieldCompleted(this, new InsertGTformfieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertGTCharge", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertGTCharge(string charge_desc, string charge_amt, int form_id, int customer_id, string account_number, string chg_bearer)
        {
            object[] results = this.Invoke("InsertGTCharge", new object[] {
                    charge_desc,
                    charge_amt,
                    form_id,
                    customer_id,
                    account_number,
                    chg_bearer});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertGTCharge(string charge_desc, string charge_amt, int form_id, int customer_id, string account_number, string chg_bearer, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InsertGTCharge", new object[] {
                    charge_desc,
                    charge_amt,
                    form_id,
                    customer_id,
                    account_number,
                    chg_bearer}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInsertGTCharge(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertGTChargeAsync(string charge_desc, string charge_amt, int form_id, int customer_id, string account_number, string chg_bearer)
        {
            this.InsertGTChargeAsync(charge_desc, charge_amt, form_id, customer_id, account_number, chg_bearer, null);
        }

        /// <remarks/>
        public void InsertGTChargeAsync(string charge_desc, string charge_amt, int form_id, int customer_id, string account_number, string chg_bearer, object userState)
        {
            if ((this.InsertGTChargeOperationCompleted == null))
            {
                this.InsertGTChargeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertGTChargeOperationCompleted);
            }
            this.InvokeAsync("InsertGTCharge", new object[] {
                    charge_desc,
                    charge_amt,
                    form_id,
                    customer_id,
                    account_number,
                    chg_bearer}, this.InsertGTChargeOperationCompleted, userState);
        }

        private void OnInsertGTChargeOperationCompleted(object arg)
        {
            if ((this.InsertGTChargeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertGTChargeCompleted(this, new InsertGTChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Updateform", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Updateform(int customer_id, string form_title, string form_desc, string account_number, string alert_email, string cc_acct_off_email, int send_alert, string sms_alert_phones, int payment_category, int ussd_code, int merchant_code, int ori_formid, int form_id)
        {
            object[] results = this.Invoke("Updateform", new object[] {
                    customer_id,
                    form_title,
                    form_desc,
                    account_number,
                    alert_email,
                    cc_acct_off_email,
                    send_alert,
                    sms_alert_phones,
                    payment_category,
                    ussd_code,
                    merchant_code,
                    ori_formid,
                    form_id});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateform(int customer_id, string form_title, string form_desc, string account_number, string alert_email, string cc_acct_off_email, int send_alert, string sms_alert_phones, int payment_category, int ussd_code, int merchant_code, int ori_formid, int form_id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Updateform", new object[] {
                    customer_id,
                    form_title,
                    form_desc,
                    account_number,
                    alert_email,
                    cc_acct_off_email,
                    send_alert,
                    sms_alert_phones,
                    payment_category,
                    ussd_code,
                    merchant_code,
                    ori_formid,
                    form_id}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateform(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateformAsync(int customer_id, string form_title, string form_desc, string account_number, string alert_email, string cc_acct_off_email, int send_alert, string sms_alert_phones, int payment_category, int ussd_code, int merchant_code, int ori_formid, int form_id)
        {
            this.UpdateformAsync(customer_id, form_title, form_desc, account_number, alert_email, cc_acct_off_email, send_alert, sms_alert_phones, payment_category, ussd_code, merchant_code, ori_formid, form_id, null);
        }

        /// <remarks/>
        public void UpdateformAsync(int customer_id, string form_title, string form_desc, string account_number, string alert_email, string cc_acct_off_email, int send_alert, string sms_alert_phones, int payment_category, int ussd_code, int merchant_code, int ori_formid, int form_id, object userState)
        {
            if ((this.UpdateformOperationCompleted == null))
            {
                this.UpdateformOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateformOperationCompleted);
            }
            this.InvokeAsync("Updateform", new object[] {
                    customer_id,
                    form_title,
                    form_desc,
                    account_number,
                    alert_email,
                    cc_acct_off_email,
                    send_alert,
                    sms_alert_phones,
                    payment_category,
                    ussd_code,
                    merchant_code,
                    ori_formid,
                    form_id}, this.UpdateformOperationCompleted, userState);
        }

        private void OnUpdateformOperationCompleted(object arg)
        {
            if ((this.UpdateformCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateformCompleted(this, new UpdateformCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateMAXIBANK", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateMAXIBANK(string CustomerID, string Status)
        {
            object[] results = this.Invoke("UpdateMAXIBANK", new object[] {
                    CustomerID,
                    Status});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateMAXIBANK(string CustomerID, string Status, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateMAXIBANK", new object[] {
                    CustomerID,
                    Status}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateMAXIBANK(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateMAXIBANKAsync(string CustomerID, string Status)
        {
            this.UpdateMAXIBANKAsync(CustomerID, Status, null);
        }

        /// <remarks/>
        public void UpdateMAXIBANKAsync(string CustomerID, string Status, object userState)
        {
            if ((this.UpdateMAXIBANKOperationCompleted == null))
            {
                this.UpdateMAXIBANKOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMAXIBANKOperationCompleted);
            }
            this.InvokeAsync("UpdateMAXIBANK", new object[] {
                    CustomerID,
                    Status}, this.UpdateMAXIBANKOperationCompleted, userState);
        }

        private void OnUpdateMAXIBANKOperationCompleted(object arg)
        {
            if ((this.UpdateMAXIBANKCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMAXIBANKCompleted(this, new UpdateMAXIBANKCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateFXPMProcess", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateFXPMProcess(string PM_CaseID, string Status, string Reject_Reason)
        {
            object[] results = this.Invoke("UpdateFXPMProcess", new object[] {
                    PM_CaseID,
                    Status,
                    Reject_Reason});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateFXPMProcess(string PM_CaseID, string Status, string Reject_Reason, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateFXPMProcess", new object[] {
                    PM_CaseID,
                    Status,
                    Reject_Reason}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateFXPMProcess(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateFXPMProcessAsync(string PM_CaseID, string Status, string Reject_Reason)
        {
            this.UpdateFXPMProcessAsync(PM_CaseID, Status, Reject_Reason, null);
        }

        /// <remarks/>
        public void UpdateFXPMProcessAsync(string PM_CaseID, string Status, string Reject_Reason, object userState)
        {
            if ((this.UpdateFXPMProcessOperationCompleted == null))
            {
                this.UpdateFXPMProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFXPMProcessOperationCompleted);
            }
            this.InvokeAsync("UpdateFXPMProcess", new object[] {
                    PM_CaseID,
                    Status,
                    Reject_Reason}, this.UpdateFXPMProcessOperationCompleted, userState);
        }

        private void OnUpdateFXPMProcessOperationCompleted(object arg)
        {
            if ((this.UpdateFXPMProcessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFXPMProcessCompleted(this, new UpdateFXPMProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Getfacilitybal", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Getfacilitybal(int bra_code, int cus_num)
        {
            object[] results = this.Invoke("Getfacilitybal", new object[] {
                    bra_code,
                    cus_num});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetfacilitybal(int bra_code, int cus_num, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Getfacilitybal", new object[] {
                    bra_code,
                    cus_num}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetfacilitybal(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetfacilitybalAsync(int bra_code, int cus_num)
        {
            this.GetfacilitybalAsync(bra_code, cus_num, null);
        }

        /// <remarks/>
        public void GetfacilitybalAsync(int bra_code, int cus_num, object userState)
        {
            if ((this.GetfacilitybalOperationCompleted == null))
            {
                this.GetfacilitybalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetfacilitybalOperationCompleted);
            }
            this.InvokeAsync("Getfacilitybal", new object[] {
                    bra_code,
                    cus_num}, this.GetfacilitybalOperationCompleted, userState);
        }

        private void OnGetfacilitybalOperationCompleted(object arg)
        {
            if ((this.GetfacilitybalCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetfacilitybalCompleted(this, new GetfacilitybalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUsrname", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateUsrname(int ntellid, string vtellname)
        {
            object[] results = this.Invoke("UpdateUsrname", new object[] {
                    ntellid,
                    vtellname});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateUsrname(int ntellid, string vtellname, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateUsrname", new object[] {
                    ntellid,
                    vtellname}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateUsrname(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateUsrnameAsync(int ntellid, string vtellname)
        {
            this.UpdateUsrnameAsync(ntellid, vtellname, null);
        }

        /// <remarks/>
        public void UpdateUsrnameAsync(int ntellid, string vtellname, object userState)
        {
            if ((this.UpdateUsrnameOperationCompleted == null))
            {
                this.UpdateUsrnameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUsrnameOperationCompleted);
            }
            this.InvokeAsync("UpdateUsrname", new object[] {
                    ntellid,
                    vtellname}, this.UpdateUsrnameOperationCompleted, userState);
        }

        private void OnUpdateUsrnameOperationCompleted(object arg)
        {
            if ((this.UpdateUsrnameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUsrnameCompleted(this, new UpdateUsrnameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTeamEmail", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTeamEmail(string pccode)
        {
            object[] results = this.Invoke("GetTeamEmail", new object[] {
                    pccode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetTeamEmail(string pccode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetTeamEmail", new object[] {
                    pccode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetTeamEmail(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetTeamEmailAsync(string pccode)
        {
            this.GetTeamEmailAsync(pccode, null);
        }

        /// <remarks/>
        public void GetTeamEmailAsync(string pccode, object userState)
        {
            if ((this.GetTeamEmailOperationCompleted == null))
            {
                this.GetTeamEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamEmailOperationCompleted);
            }
            this.InvokeAsync("GetTeamEmail", new object[] {
                    pccode}, this.GetTeamEmailOperationCompleted, userState);
        }

        private void OnGetTeamEmailOperationCompleted(object arg)
        {
            if ((this.GetTeamEmailCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamEmailCompleted(this, new GetTeamEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransactionAlertStatus", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTransactionAlertStatus(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            object[] results = this.Invoke("GetTransactionAlertStatus", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetTransactionAlertStatus(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetTransactionAlertStatus", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetTransactionAlertStatus(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetTransactionAlertStatusAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            this.GetTransactionAlertStatusAsync(bracode, cusnum, curcode, ledcode, subacctcode, null);
        }

        /// <remarks/>
        public void GetTransactionAlertStatusAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, object userState)
        {
            if ((this.GetTransactionAlertStatusOperationCompleted == null))
            {
                this.GetTransactionAlertStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionAlertStatusOperationCompleted);
            }
            this.InvokeAsync("GetTransactionAlertStatus", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, this.GetTransactionAlertStatusOperationCompleted, userState);
        }

        private void OnGetTransactionAlertStatusOperationCompleted(object arg)
        {
            if ((this.GetTransactionAlertStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionAlertStatusCompleted(this, new GetTransactionAlertStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferFunds_TranSeqCommit", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TransferFunds_TranSeqCommit(string Acct_fro, string Acct_to, double Amount, string type, int EXPL_CODE, string channel, string Remarks, int origtbraCode, string docAlp, int supervisorID, int tellerID, string transUniqIndenf)
        {
            object[] results = this.Invoke("TransferFunds_TranSeqCommit", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    EXPL_CODE,
                    channel,
                    Remarks,
                    origtbraCode,
                    docAlp,
                    supervisorID,
                    tellerID,
                    transUniqIndenf});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTransferFunds_TranSeqCommit(string Acct_fro, string Acct_to, double Amount, string type, int EXPL_CODE, string channel, string Remarks, int origtbraCode, string docAlp, int supervisorID, int tellerID, string transUniqIndenf, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("TransferFunds_TranSeqCommit", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    EXPL_CODE,
                    channel,
                    Remarks,
                    origtbraCode,
                    docAlp,
                    supervisorID,
                    tellerID,
                    transUniqIndenf}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTransferFunds_TranSeqCommit(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TransferFunds_TranSeqCommitAsync(string Acct_fro, string Acct_to, double Amount, string type, int EXPL_CODE, string channel, string Remarks, int origtbraCode, string docAlp, int supervisorID, int tellerID, string transUniqIndenf)
        {
            this.TransferFunds_TranSeqCommitAsync(Acct_fro, Acct_to, Amount, type, EXPL_CODE, channel, Remarks, origtbraCode, docAlp, supervisorID, tellerID, transUniqIndenf, null);
        }

        /// <remarks/>
        public void TransferFunds_TranSeqCommitAsync(string Acct_fro, string Acct_to, double Amount, string type, int EXPL_CODE, string channel, string Remarks, int origtbraCode, string docAlp, int supervisorID, int tellerID, string transUniqIndenf, object userState)
        {
            if ((this.TransferFunds_TranSeqCommitOperationCompleted == null))
            {
                this.TransferFunds_TranSeqCommitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferFunds_TranSeqCommitOperationCompleted);
            }
            this.InvokeAsync("TransferFunds_TranSeqCommit", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    EXPL_CODE,
                    channel,
                    Remarks,
                    origtbraCode,
                    docAlp,
                    supervisorID,
                    tellerID,
                    transUniqIndenf}, this.TransferFunds_TranSeqCommitOperationCompleted, userState);
        }

        private void OnTransferFunds_TranSeqCommitOperationCompleted(object arg)
        {
            if ((this.TransferFunds_TranSeqCommitCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferFunds_TranSeqCommitCompleted(this, new TransferFunds_TranSeqCommitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferFunds_TranSeqCommitCapexOpex", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TransferFunds_TranSeqCommitCapexOpex(string Acct_fro, string Acct_to, double Amount, string type, int EXPL_CODE, string channel, string Remarks, int origtbraCode, string docAlp, int supervisorID, int tellerID, int Period, int BankCode, int DocNum, string transUniqIndenf)
        {
            object[] results = this.Invoke("TransferFunds_TranSeqCommitCapexOpex", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    EXPL_CODE,
                    channel,
                    Remarks,
                    origtbraCode,
                    docAlp,
                    supervisorID,
                    tellerID,
                    Period,
                    BankCode,
                    DocNum,
                    transUniqIndenf});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTransferFunds_TranSeqCommitCapexOpex(
                    string Acct_fro,
                    string Acct_to,
                    double Amount,
                    string type,
                    int EXPL_CODE,
                    string channel,
                    string Remarks,
                    int origtbraCode,
                    string docAlp,
                    int supervisorID,
                    int tellerID,
                    int Period,
                    int BankCode,
                    int DocNum,
                    string transUniqIndenf,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("TransferFunds_TranSeqCommitCapexOpex", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    EXPL_CODE,
                    channel,
                    Remarks,
                    origtbraCode,
                    docAlp,
                    supervisorID,
                    tellerID,
                    Period,
                    BankCode,
                    DocNum,
                    transUniqIndenf}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTransferFunds_TranSeqCommitCapexOpex(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TransferFunds_TranSeqCommitCapexOpexAsync(string Acct_fro, string Acct_to, double Amount, string type, int EXPL_CODE, string channel, string Remarks, int origtbraCode, string docAlp, int supervisorID, int tellerID, int Period, int BankCode, int DocNum, string transUniqIndenf)
        {
            this.TransferFunds_TranSeqCommitCapexOpexAsync(Acct_fro, Acct_to, Amount, type, EXPL_CODE, channel, Remarks, origtbraCode, docAlp, supervisorID, tellerID, Period, BankCode, DocNum, transUniqIndenf, null);
        }

        /// <remarks/>
        public void TransferFunds_TranSeqCommitCapexOpexAsync(
                    string Acct_fro,
                    string Acct_to,
                    double Amount,
                    string type,
                    int EXPL_CODE,
                    string channel,
                    string Remarks,
                    int origtbraCode,
                    string docAlp,
                    int supervisorID,
                    int tellerID,
                    int Period,
                    int BankCode,
                    int DocNum,
                    string transUniqIndenf,
                    object userState)
        {
            if ((this.TransferFunds_TranSeqCommitCapexOpexOperationCompleted == null))
            {
                this.TransferFunds_TranSeqCommitCapexOpexOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferFunds_TranSeqCommitCapexOpexOperationCompleted);
            }
            this.InvokeAsync("TransferFunds_TranSeqCommitCapexOpex", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    EXPL_CODE,
                    channel,
                    Remarks,
                    origtbraCode,
                    docAlp,
                    supervisorID,
                    tellerID,
                    Period,
                    BankCode,
                    DocNum,
                    transUniqIndenf}, this.TransferFunds_TranSeqCommitCapexOpexOperationCompleted, userState);
        }

        private void OnTransferFunds_TranSeqCommitCapexOpexOperationCompleted(object arg)
        {
            if ((this.TransferFunds_TranSeqCommitCapexOpexCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferFunds_TranSeqCommitCapexOpexCompleted(this, new TransferFunds_TranSeqCommitCapexOpexCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferFunds_TranSeqFXFutureDate", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TransferFunds_TranSeqFXFutureDate(
                    int inp_origt_bra_code,
                    int inp_tell_id,
                    double inp_tra_amt,
                    int inp_bra_code,
                    string Remarks,
                    int inp_cus_num,
                    int inp_cur_code,
                    int inp_led_code1,
                    int inp_sub_acct_code,
                    int inp_sale_ind,
                    int inp_period,
                    int inp_bra_code_stl,
                    int inp_cus_num_stl,
                    int inp_cur_code_stl,
                    int inp_led_code_stl,
                    int inp_sub_acct_code_stl,
                    int inp_man_app1,
                    double inp_spot_pri,
                    double inp_cross_rate,
                    string transUniqIndenf,
                    string channel,
                    string docAlp)
        {
            object[] results = this.Invoke("TransferFunds_TranSeqFXFutureDate", new object[] {
                    inp_origt_bra_code,
                    inp_tell_id,
                    inp_tra_amt,
                    inp_bra_code,
                    Remarks,
                    inp_cus_num,
                    inp_cur_code,
                    inp_led_code1,
                    inp_sub_acct_code,
                    inp_sale_ind,
                    inp_period,
                    inp_bra_code_stl,
                    inp_cus_num_stl,
                    inp_cur_code_stl,
                    inp_led_code_stl,
                    inp_sub_acct_code_stl,
                    inp_man_app1,
                    inp_spot_pri,
                    inp_cross_rate,
                    transUniqIndenf,
                    channel,
                    docAlp});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTransferFunds_TranSeqFXFutureDate(
                    int inp_origt_bra_code,
                    int inp_tell_id,
                    double inp_tra_amt,
                    int inp_bra_code,
                    string Remarks,
                    int inp_cus_num,
                    int inp_cur_code,
                    int inp_led_code1,
                    int inp_sub_acct_code,
                    int inp_sale_ind,
                    int inp_period,
                    int inp_bra_code_stl,
                    int inp_cus_num_stl,
                    int inp_cur_code_stl,
                    int inp_led_code_stl,
                    int inp_sub_acct_code_stl,
                    int inp_man_app1,
                    double inp_spot_pri,
                    double inp_cross_rate,
                    string transUniqIndenf,
                    string channel,
                    string docAlp,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("TransferFunds_TranSeqFXFutureDate", new object[] {
                    inp_origt_bra_code,
                    inp_tell_id,
                    inp_tra_amt,
                    inp_bra_code,
                    Remarks,
                    inp_cus_num,
                    inp_cur_code,
                    inp_led_code1,
                    inp_sub_acct_code,
                    inp_sale_ind,
                    inp_period,
                    inp_bra_code_stl,
                    inp_cus_num_stl,
                    inp_cur_code_stl,
                    inp_led_code_stl,
                    inp_sub_acct_code_stl,
                    inp_man_app1,
                    inp_spot_pri,
                    inp_cross_rate,
                    transUniqIndenf,
                    channel,
                    docAlp}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTransferFunds_TranSeqFXFutureDate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TransferFunds_TranSeqFXFutureDateAsync(
                    int inp_origt_bra_code,
                    int inp_tell_id,
                    double inp_tra_amt,
                    int inp_bra_code,
                    string Remarks,
                    int inp_cus_num,
                    int inp_cur_code,
                    int inp_led_code1,
                    int inp_sub_acct_code,
                    int inp_sale_ind,
                    int inp_period,
                    int inp_bra_code_stl,
                    int inp_cus_num_stl,
                    int inp_cur_code_stl,
                    int inp_led_code_stl,
                    int inp_sub_acct_code_stl,
                    int inp_man_app1,
                    double inp_spot_pri,
                    double inp_cross_rate,
                    string transUniqIndenf,
                    string channel,
                    string docAlp)
        {
            this.TransferFunds_TranSeqFXFutureDateAsync(inp_origt_bra_code, inp_tell_id, inp_tra_amt, inp_bra_code, Remarks, inp_cus_num, inp_cur_code, inp_led_code1, inp_sub_acct_code, inp_sale_ind, inp_period, inp_bra_code_stl, inp_cus_num_stl, inp_cur_code_stl, inp_led_code_stl, inp_sub_acct_code_stl, inp_man_app1, inp_spot_pri, inp_cross_rate, transUniqIndenf, channel, docAlp, null);
        }

        /// <remarks/>
        public void TransferFunds_TranSeqFXFutureDateAsync(
                    int inp_origt_bra_code,
                    int inp_tell_id,
                    double inp_tra_amt,
                    int inp_bra_code,
                    string Remarks,
                    int inp_cus_num,
                    int inp_cur_code,
                    int inp_led_code1,
                    int inp_sub_acct_code,
                    int inp_sale_ind,
                    int inp_period,
                    int inp_bra_code_stl,
                    int inp_cus_num_stl,
                    int inp_cur_code_stl,
                    int inp_led_code_stl,
                    int inp_sub_acct_code_stl,
                    int inp_man_app1,
                    double inp_spot_pri,
                    double inp_cross_rate,
                    string transUniqIndenf,
                    string channel,
                    string docAlp,
                    object userState)
        {
            if ((this.TransferFunds_TranSeqFXFutureDateOperationCompleted == null))
            {
                this.TransferFunds_TranSeqFXFutureDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferFunds_TranSeqFXFutureDateOperationCompleted);
            }
            this.InvokeAsync("TransferFunds_TranSeqFXFutureDate", new object[] {
                    inp_origt_bra_code,
                    inp_tell_id,
                    inp_tra_amt,
                    inp_bra_code,
                    Remarks,
                    inp_cus_num,
                    inp_cur_code,
                    inp_led_code1,
                    inp_sub_acct_code,
                    inp_sale_ind,
                    inp_period,
                    inp_bra_code_stl,
                    inp_cus_num_stl,
                    inp_cur_code_stl,
                    inp_led_code_stl,
                    inp_sub_acct_code_stl,
                    inp_man_app1,
                    inp_spot_pri,
                    inp_cross_rate,
                    transUniqIndenf,
                    channel,
                    docAlp}, this.TransferFunds_TranSeqFXFutureDateOperationCompleted, userState);
        }

        private void OnTransferFunds_TranSeqFXFutureDateOperationCompleted(object arg)
        {
            if ((this.TransferFunds_TranSeqFXFutureDateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferFunds_TranSeqFXFutureDateCompleted(this, new TransferFunds_TranSeqFXFutureDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExistCustSearch", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExistCustSearch(string cusname)
        {
            object[] results = this.Invoke("ExistCustSearch", new object[] {
                    cusname});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginExistCustSearch(string cusname, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ExistCustSearch", new object[] {
                    cusname}, callback, asyncState);
        }

        /// <remarks/>
        public string EndExistCustSearch(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ExistCustSearchAsync(string cusname)
        {
            this.ExistCustSearchAsync(cusname, null);
        }

        /// <remarks/>
        public void ExistCustSearchAsync(string cusname, object userState)
        {
            if ((this.ExistCustSearchOperationCompleted == null))
            {
                this.ExistCustSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExistCustSearchOperationCompleted);
            }
            this.InvokeAsync("ExistCustSearch", new object[] {
                    cusname}, this.ExistCustSearchOperationCompleted, userState);
        }

        private void OnExistCustSearchOperationCompleted(object arg)
        {
            if ((this.ExistCustSearchCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExistCustSearchCompleted(this, new ExistCustSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGTWEBAPItoken", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetGTWEBAPItoken(string Code)
        {
            object[] results = this.Invoke("GetGTWEBAPItoken", new object[] {
                    Code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetGTWEBAPItoken(string Code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetGTWEBAPItoken", new object[] {
                    Code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetGTWEBAPItoken(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetGTWEBAPItokenAsync(string Code)
        {
            this.GetGTWEBAPItokenAsync(Code, null);
        }

        /// <remarks/>
        public void GetGTWEBAPItokenAsync(string Code, object userState)
        {
            if ((this.GetGTWEBAPItokenOperationCompleted == null))
            {
                this.GetGTWEBAPItokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGTWEBAPItokenOperationCompleted);
            }
            this.InvokeAsync("GetGTWEBAPItoken", new object[] {
                    Code}, this.GetGTWEBAPItokenOperationCompleted, userState);
        }

        private void OnGetGTWEBAPItokenOperationCompleted(object arg)
        {
            if ((this.GetGTWEBAPItokenCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGTWEBAPItokenCompleted(this, new GetGTWEBAPItokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertAccountDeferralDoc_Details", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertAccountDeferralDoc_Details(string Cust_Number, string Group_Head, string Divisional_Head, string Outstanding_Docs)
        {
            object[] results = this.Invoke("InsertAccountDeferralDoc_Details", new object[] {
                    Cust_Number,
                    Group_Head,
                    Divisional_Head,
                    Outstanding_Docs});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertAccountDeferralDoc_Details(string Cust_Number, string Group_Head, string Divisional_Head, string Outstanding_Docs, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InsertAccountDeferralDoc_Details", new object[] {
                    Cust_Number,
                    Group_Head,
                    Divisional_Head,
                    Outstanding_Docs}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInsertAccountDeferralDoc_Details(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertAccountDeferralDoc_DetailsAsync(string Cust_Number, string Group_Head, string Divisional_Head, string Outstanding_Docs)
        {
            this.InsertAccountDeferralDoc_DetailsAsync(Cust_Number, Group_Head, Divisional_Head, Outstanding_Docs, null);
        }

        /// <remarks/>
        public void InsertAccountDeferralDoc_DetailsAsync(string Cust_Number, string Group_Head, string Divisional_Head, string Outstanding_Docs, object userState)
        {
            if ((this.InsertAccountDeferralDoc_DetailsOperationCompleted == null))
            {
                this.InsertAccountDeferralDoc_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertAccountDeferralDoc_DetailsOperationCompleted);
            }
            this.InvokeAsync("InsertAccountDeferralDoc_Details", new object[] {
                    Cust_Number,
                    Group_Head,
                    Divisional_Head,
                    Outstanding_Docs}, this.InsertAccountDeferralDoc_DetailsOperationCompleted, userState);
        }

        private void OnInsertAccountDeferralDoc_DetailsOperationCompleted(object arg)
        {
            if ((this.InsertAccountDeferralDoc_DetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertAccountDeferralDoc_DetailsCompleted(this, new InsertAccountDeferralDoc_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BookLoan_BASIS", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BookLoan_BASIS(
                    double INP_INT_RATE,
                    string CRE_BRA_CODE,
                    int TELL_ID,
                    int INP_LED_CODE,
                    string CRE_CUS_NUM,
                    string CRE_CUR_CODE,
                    int CRE_LED_CODE,
                    int CRE_SUB_ACCT_CODE,
                    double INP_LOAN_AMT,
                    string INP_THEIR_REF,
                    string INP_REMARKS1,
                    string INP_REMARKS2,
                    string INP_REMARKS3,
                    string INP_REMARKS4,
                    string DVAL_DATE,
                    int INP_NUM_OF_PAY,
                    string INP_FST_MAT,
                    long transID,
                    int INP_BRA_CODE,
                    int INP_CUS_NUM,
                    int INP_CUR_CODE,
                    string INP_REF_KEY1,
                    int INPREPTYPE)
        {
            object[] results = this.Invoke("BookLoan_BASIS", new object[] {
                    INP_INT_RATE,
                    CRE_BRA_CODE,
                    TELL_ID,
                    INP_LED_CODE,
                    CRE_CUS_NUM,
                    CRE_CUR_CODE,
                    CRE_LED_CODE,
                    CRE_SUB_ACCT_CODE,
                    INP_LOAN_AMT,
                    INP_THEIR_REF,
                    INP_REMARKS1,
                    INP_REMARKS2,
                    INP_REMARKS3,
                    INP_REMARKS4,
                    DVAL_DATE,
                    INP_NUM_OF_PAY,
                    INP_FST_MAT,
                    transID,
                    INP_BRA_CODE,
                    INP_CUS_NUM,
                    INP_CUR_CODE,
                    INP_REF_KEY1,
                    INPREPTYPE});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginBookLoan_BASIS(
                    double INP_INT_RATE,
                    string CRE_BRA_CODE,
                    int TELL_ID,
                    int INP_LED_CODE,
                    string CRE_CUS_NUM,
                    string CRE_CUR_CODE,
                    int CRE_LED_CODE,
                    int CRE_SUB_ACCT_CODE,
                    double INP_LOAN_AMT,
                    string INP_THEIR_REF,
                    string INP_REMARKS1,
                    string INP_REMARKS2,
                    string INP_REMARKS3,
                    string INP_REMARKS4,
                    string DVAL_DATE,
                    int INP_NUM_OF_PAY,
                    string INP_FST_MAT,
                    long transID,
                    int INP_BRA_CODE,
                    int INP_CUS_NUM,
                    int INP_CUR_CODE,
                    string INP_REF_KEY1,
                    int INPREPTYPE,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("BookLoan_BASIS", new object[] {
                    INP_INT_RATE,
                    CRE_BRA_CODE,
                    TELL_ID,
                    INP_LED_CODE,
                    CRE_CUS_NUM,
                    CRE_CUR_CODE,
                    CRE_LED_CODE,
                    CRE_SUB_ACCT_CODE,
                    INP_LOAN_AMT,
                    INP_THEIR_REF,
                    INP_REMARKS1,
                    INP_REMARKS2,
                    INP_REMARKS3,
                    INP_REMARKS4,
                    DVAL_DATE,
                    INP_NUM_OF_PAY,
                    INP_FST_MAT,
                    transID,
                    INP_BRA_CODE,
                    INP_CUS_NUM,
                    INP_CUR_CODE,
                    INP_REF_KEY1,
                    INPREPTYPE}, callback, asyncState);
        }

        /// <remarks/>
        public string EndBookLoan_BASIS(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void BookLoan_BASISAsync(
                    double INP_INT_RATE,
                    string CRE_BRA_CODE,
                    int TELL_ID,
                    int INP_LED_CODE,
                    string CRE_CUS_NUM,
                    string CRE_CUR_CODE,
                    int CRE_LED_CODE,
                    int CRE_SUB_ACCT_CODE,
                    double INP_LOAN_AMT,
                    string INP_THEIR_REF,
                    string INP_REMARKS1,
                    string INP_REMARKS2,
                    string INP_REMARKS3,
                    string INP_REMARKS4,
                    string DVAL_DATE,
                    int INP_NUM_OF_PAY,
                    string INP_FST_MAT,
                    long transID,
                    int INP_BRA_CODE,
                    int INP_CUS_NUM,
                    int INP_CUR_CODE,
                    string INP_REF_KEY1,
                    int INPREPTYPE)
        {
            this.BookLoan_BASISAsync(INP_INT_RATE, CRE_BRA_CODE, TELL_ID, INP_LED_CODE, CRE_CUS_NUM, CRE_CUR_CODE, CRE_LED_CODE, CRE_SUB_ACCT_CODE, INP_LOAN_AMT, INP_THEIR_REF, INP_REMARKS1, INP_REMARKS2, INP_REMARKS3, INP_REMARKS4, DVAL_DATE, INP_NUM_OF_PAY, INP_FST_MAT, transID, INP_BRA_CODE, INP_CUS_NUM, INP_CUR_CODE, INP_REF_KEY1, INPREPTYPE, null);
        }

        /// <remarks/>
        public void BookLoan_BASISAsync(
                    double INP_INT_RATE,
                    string CRE_BRA_CODE,
                    int TELL_ID,
                    int INP_LED_CODE,
                    string CRE_CUS_NUM,
                    string CRE_CUR_CODE,
                    int CRE_LED_CODE,
                    int CRE_SUB_ACCT_CODE,
                    double INP_LOAN_AMT,
                    string INP_THEIR_REF,
                    string INP_REMARKS1,
                    string INP_REMARKS2,
                    string INP_REMARKS3,
                    string INP_REMARKS4,
                    string DVAL_DATE,
                    int INP_NUM_OF_PAY,
                    string INP_FST_MAT,
                    long transID,
                    int INP_BRA_CODE,
                    int INP_CUS_NUM,
                    int INP_CUR_CODE,
                    string INP_REF_KEY1,
                    int INPREPTYPE,
                    object userState)
        {
            if ((this.BookLoan_BASISOperationCompleted == null))
            {
                this.BookLoan_BASISOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBookLoan_BASISOperationCompleted);
            }
            this.InvokeAsync("BookLoan_BASIS", new object[] {
                    INP_INT_RATE,
                    CRE_BRA_CODE,
                    TELL_ID,
                    INP_LED_CODE,
                    CRE_CUS_NUM,
                    CRE_CUR_CODE,
                    CRE_LED_CODE,
                    CRE_SUB_ACCT_CODE,
                    INP_LOAN_AMT,
                    INP_THEIR_REF,
                    INP_REMARKS1,
                    INP_REMARKS2,
                    INP_REMARKS3,
                    INP_REMARKS4,
                    DVAL_DATE,
                    INP_NUM_OF_PAY,
                    INP_FST_MAT,
                    transID,
                    INP_BRA_CODE,
                    INP_CUS_NUM,
                    INP_CUR_CODE,
                    INP_REF_KEY1,
                    INPREPTYPE}, this.BookLoan_BASISOperationCompleted, userState);
        }

        private void OnBookLoan_BASISOperationCompleted(object arg)
        {
            if ((this.BookLoan_BASISCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BookLoan_BASISCompleted(this, new BookLoan_BASISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RescheduleLoan_BASIS", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RescheduleLoan_BASIS(int INP_REF_YEAR, int INP_REF_NUM, int INP_BRA_CODE, int INP_TELL_ID_HO, string INP_FST_MAT, int transID)
        {
            object[] results = this.Invoke("RescheduleLoan_BASIS", new object[] {
                    INP_REF_YEAR,
                    INP_REF_NUM,
                    INP_BRA_CODE,
                    INP_TELL_ID_HO,
                    INP_FST_MAT,
                    transID});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRescheduleLoan_BASIS(int INP_REF_YEAR, int INP_REF_NUM, int INP_BRA_CODE, int INP_TELL_ID_HO, string INP_FST_MAT, int transID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RescheduleLoan_BASIS", new object[] {
                    INP_REF_YEAR,
                    INP_REF_NUM,
                    INP_BRA_CODE,
                    INP_TELL_ID_HO,
                    INP_FST_MAT,
                    transID}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRescheduleLoan_BASIS(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RescheduleLoan_BASISAsync(int INP_REF_YEAR, int INP_REF_NUM, int INP_BRA_CODE, int INP_TELL_ID_HO, string INP_FST_MAT, int transID)
        {
            this.RescheduleLoan_BASISAsync(INP_REF_YEAR, INP_REF_NUM, INP_BRA_CODE, INP_TELL_ID_HO, INP_FST_MAT, transID, null);
        }

        /// <remarks/>
        public void RescheduleLoan_BASISAsync(int INP_REF_YEAR, int INP_REF_NUM, int INP_BRA_CODE, int INP_TELL_ID_HO, string INP_FST_MAT, int transID, object userState)
        {
            if ((this.RescheduleLoan_BASISOperationCompleted == null))
            {
                this.RescheduleLoan_BASISOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRescheduleLoan_BASISOperationCompleted);
            }
            this.InvokeAsync("RescheduleLoan_BASIS", new object[] {
                    INP_REF_YEAR,
                    INP_REF_NUM,
                    INP_BRA_CODE,
                    INP_TELL_ID_HO,
                    INP_FST_MAT,
                    transID}, this.RescheduleLoan_BASISOperationCompleted, userState);
        }

        private void OnRescheduleLoan_BASISOperationCompleted(object arg)
        {
            if ((this.RescheduleLoan_BASISCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RescheduleLoan_BASISCompleted(this, new RescheduleLoan_BASISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LiquidateLoan_BASIS", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LiquidateLoan_BASIS(int INP_REF_YEAR, int INP_REF_NUM, int INP_BRA_CODE, int NP_SET_BRA_CODE, int INP_SET_CUS_NUM, int INP_SET_CUR_CODE, int INP_SET_LED_CODE, int INP_SET_SUB_ACCT_CODE, int INP_TELL_ID_HO, int transID)
        {
            object[] results = this.Invoke("LiquidateLoan_BASIS", new object[] {
                    INP_REF_YEAR,
                    INP_REF_NUM,
                    INP_BRA_CODE,
                    NP_SET_BRA_CODE,
                    INP_SET_CUS_NUM,
                    INP_SET_CUR_CODE,
                    INP_SET_LED_CODE,
                    INP_SET_SUB_ACCT_CODE,
                    INP_TELL_ID_HO,
                    transID});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginLiquidateLoan_BASIS(int INP_REF_YEAR, int INP_REF_NUM, int INP_BRA_CODE, int NP_SET_BRA_CODE, int INP_SET_CUS_NUM, int INP_SET_CUR_CODE, int INP_SET_LED_CODE, int INP_SET_SUB_ACCT_CODE, int INP_TELL_ID_HO, int transID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("LiquidateLoan_BASIS", new object[] {
                    INP_REF_YEAR,
                    INP_REF_NUM,
                    INP_BRA_CODE,
                    NP_SET_BRA_CODE,
                    INP_SET_CUS_NUM,
                    INP_SET_CUR_CODE,
                    INP_SET_LED_CODE,
                    INP_SET_SUB_ACCT_CODE,
                    INP_TELL_ID_HO,
                    transID}, callback, asyncState);
        }

        /// <remarks/>
        public string EndLiquidateLoan_BASIS(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void LiquidateLoan_BASISAsync(int INP_REF_YEAR, int INP_REF_NUM, int INP_BRA_CODE, int NP_SET_BRA_CODE, int INP_SET_CUS_NUM, int INP_SET_CUR_CODE, int INP_SET_LED_CODE, int INP_SET_SUB_ACCT_CODE, int INP_TELL_ID_HO, int transID)
        {
            this.LiquidateLoan_BASISAsync(INP_REF_YEAR, INP_REF_NUM, INP_BRA_CODE, NP_SET_BRA_CODE, INP_SET_CUS_NUM, INP_SET_CUR_CODE, INP_SET_LED_CODE, INP_SET_SUB_ACCT_CODE, INP_TELL_ID_HO, transID, null);
        }

        /// <remarks/>
        public void LiquidateLoan_BASISAsync(int INP_REF_YEAR, int INP_REF_NUM, int INP_BRA_CODE, int NP_SET_BRA_CODE, int INP_SET_CUS_NUM, int INP_SET_CUR_CODE, int INP_SET_LED_CODE, int INP_SET_SUB_ACCT_CODE, int INP_TELL_ID_HO, int transID, object userState)
        {
            if ((this.LiquidateLoan_BASISOperationCompleted == null))
            {
                this.LiquidateLoan_BASISOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLiquidateLoan_BASISOperationCompleted);
            }
            this.InvokeAsync("LiquidateLoan_BASIS", new object[] {
                    INP_REF_YEAR,
                    INP_REF_NUM,
                    INP_BRA_CODE,
                    NP_SET_BRA_CODE,
                    INP_SET_CUS_NUM,
                    INP_SET_CUR_CODE,
                    INP_SET_LED_CODE,
                    INP_SET_SUB_ACCT_CODE,
                    INP_TELL_ID_HO,
                    transID}, this.LiquidateLoan_BASISOperationCompleted, userState);
        }

        private void OnLiquidateLoan_BASISOperationCompleted(object arg)
        {
            if ((this.LiquidateLoan_BASISCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LiquidateLoan_BASISCompleted(this, new LiquidateLoan_BASISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateLedger", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateLedger(
                    int bra_code,
                    int acct_code,
                    int advice_days,
                    int exd_wdl_lim,
                    int bra_fac_perc,
                    int ledger_type,
                    int dep_code,
                    int man_app_flag,
                    int cus_used_flag,
                    int led_model,
                    int stmt_cyc_code,
                    int grp_brk_cr,
                    int grp_brk_dr,
                    int int_flag,
                    int fc_rev_flag,
                    int ref_type,
                    int acct_clo_flag,
                    int fac_type_1,
                    int fac_type_2,
                    int fac_type_3,
                    int fac_type_4,
                    int fac_type_5,
                    int acct_clos_per,
                    int acct_del_per,
                    int acct_dor_per,
                    int fac_uns_per,
                    int int_chg_las_mon,
                    int int_chg_tis_mon,
                    int def_int_chg,
                    int int_pai_las_mon,
                    int int_pai_tis_mon,
                    int def_int_pai,
                    int arr_led,
                    int mat_type,
                    int led_code,
                    int bank_cha_flag,
                    int flag_one,
                    int flag_two,
                    int flag_three,
                    int flag_flour,
                    int ext_tra_flag,
                    int stl_ind,
                    int period_two,
                    int arr_rec_flag,
                    int int_led_flag,
                    int cb_led_code,
                    int exd_led_code,
                    int arr_flag,
                    int arr_ledger,
                    int sus_led,
                    int tell_id,
                    string des_eng,
                    int adv_days,
                    int add_int_days,
                    int susp_led_code,
                    int deb_rest_flag,
                    int cre_rest_flag,
                    int cur_code,
                    int ext_int_flag,
                    int band_type,
                    int calc_met,
                    int int_cap_per,
                    int int_chg_pai_ind,
                    int base_days,
                    int int_bal_lim,
                    int min_int_amt,
                    int int_cal_met,
                    int int_rate)
        {
            object[] results = this.Invoke("CreateLedger", new object[] {
                    bra_code,
                    acct_code,
                    advice_days,
                    exd_wdl_lim,
                    bra_fac_perc,
                    ledger_type,
                    dep_code,
                    man_app_flag,
                    cus_used_flag,
                    led_model,
                    stmt_cyc_code,
                    grp_brk_cr,
                    grp_brk_dr,
                    int_flag,
                    fc_rev_flag,
                    ref_type,
                    acct_clo_flag,
                    fac_type_1,
                    fac_type_2,
                    fac_type_3,
                    fac_type_4,
                    fac_type_5,
                    acct_clos_per,
                    acct_del_per,
                    acct_dor_per,
                    fac_uns_per,
                    int_chg_las_mon,
                    int_chg_tis_mon,
                    def_int_chg,
                    int_pai_las_mon,
                    int_pai_tis_mon,
                    def_int_pai,
                    arr_led,
                    mat_type,
                    led_code,
                    bank_cha_flag,
                    flag_one,
                    flag_two,
                    flag_three,
                    flag_flour,
                    ext_tra_flag,
                    stl_ind,
                    period_two,
                    arr_rec_flag,
                    int_led_flag,
                    cb_led_code,
                    exd_led_code,
                    arr_flag,
                    arr_ledger,
                    sus_led,
                    tell_id,
                    des_eng,
                    adv_days,
                    add_int_days,
                    susp_led_code,
                    deb_rest_flag,
                    cre_rest_flag,
                    cur_code,
                    ext_int_flag,
                    band_type,
                    calc_met,
                    int_cap_per,
                    int_chg_pai_ind,
                    base_days,
                    int_bal_lim,
                    min_int_amt,
                    int_cal_met,
                    int_rate});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateLedger(
                    int bra_code,
                    int acct_code,
                    int advice_days,
                    int exd_wdl_lim,
                    int bra_fac_perc,
                    int ledger_type,
                    int dep_code,
                    int man_app_flag,
                    int cus_used_flag,
                    int led_model,
                    int stmt_cyc_code,
                    int grp_brk_cr,
                    int grp_brk_dr,
                    int int_flag,
                    int fc_rev_flag,
                    int ref_type,
                    int acct_clo_flag,
                    int fac_type_1,
                    int fac_type_2,
                    int fac_type_3,
                    int fac_type_4,
                    int fac_type_5,
                    int acct_clos_per,
                    int acct_del_per,
                    int acct_dor_per,
                    int fac_uns_per,
                    int int_chg_las_mon,
                    int int_chg_tis_mon,
                    int def_int_chg,
                    int int_pai_las_mon,
                    int int_pai_tis_mon,
                    int def_int_pai,
                    int arr_led,
                    int mat_type,
                    int led_code,
                    int bank_cha_flag,
                    int flag_one,
                    int flag_two,
                    int flag_three,
                    int flag_flour,
                    int ext_tra_flag,
                    int stl_ind,
                    int period_two,
                    int arr_rec_flag,
                    int int_led_flag,
                    int cb_led_code,
                    int exd_led_code,
                    int arr_flag,
                    int arr_ledger,
                    int sus_led,
                    int tell_id,
                    string des_eng,
                    int adv_days,
                    int add_int_days,
                    int susp_led_code,
                    int deb_rest_flag,
                    int cre_rest_flag,
                    int cur_code,
                    int ext_int_flag,
                    int band_type,
                    int calc_met,
                    int int_cap_per,
                    int int_chg_pai_ind,
                    int base_days,
                    int int_bal_lim,
                    int min_int_amt,
                    int int_cal_met,
                    int int_rate,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("CreateLedger", new object[] {
                    bra_code,
                    acct_code,
                    advice_days,
                    exd_wdl_lim,
                    bra_fac_perc,
                    ledger_type,
                    dep_code,
                    man_app_flag,
                    cus_used_flag,
                    led_model,
                    stmt_cyc_code,
                    grp_brk_cr,
                    grp_brk_dr,
                    int_flag,
                    fc_rev_flag,
                    ref_type,
                    acct_clo_flag,
                    fac_type_1,
                    fac_type_2,
                    fac_type_3,
                    fac_type_4,
                    fac_type_5,
                    acct_clos_per,
                    acct_del_per,
                    acct_dor_per,
                    fac_uns_per,
                    int_chg_las_mon,
                    int_chg_tis_mon,
                    def_int_chg,
                    int_pai_las_mon,
                    int_pai_tis_mon,
                    def_int_pai,
                    arr_led,
                    mat_type,
                    led_code,
                    bank_cha_flag,
                    flag_one,
                    flag_two,
                    flag_three,
                    flag_flour,
                    ext_tra_flag,
                    stl_ind,
                    period_two,
                    arr_rec_flag,
                    int_led_flag,
                    cb_led_code,
                    exd_led_code,
                    arr_flag,
                    arr_ledger,
                    sus_led,
                    tell_id,
                    des_eng,
                    adv_days,
                    add_int_days,
                    susp_led_code,
                    deb_rest_flag,
                    cre_rest_flag,
                    cur_code,
                    ext_int_flag,
                    band_type,
                    calc_met,
                    int_cap_per,
                    int_chg_pai_ind,
                    base_days,
                    int_bal_lim,
                    min_int_amt,
                    int_cal_met,
                    int_rate}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateLedger(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CreateLedgerAsync(
                    int bra_code,
                    int acct_code,
                    int advice_days,
                    int exd_wdl_lim,
                    int bra_fac_perc,
                    int ledger_type,
                    int dep_code,
                    int man_app_flag,
                    int cus_used_flag,
                    int led_model,
                    int stmt_cyc_code,
                    int grp_brk_cr,
                    int grp_brk_dr,
                    int int_flag,
                    int fc_rev_flag,
                    int ref_type,
                    int acct_clo_flag,
                    int fac_type_1,
                    int fac_type_2,
                    int fac_type_3,
                    int fac_type_4,
                    int fac_type_5,
                    int acct_clos_per,
                    int acct_del_per,
                    int acct_dor_per,
                    int fac_uns_per,
                    int int_chg_las_mon,
                    int int_chg_tis_mon,
                    int def_int_chg,
                    int int_pai_las_mon,
                    int int_pai_tis_mon,
                    int def_int_pai,
                    int arr_led,
                    int mat_type,
                    int led_code,
                    int bank_cha_flag,
                    int flag_one,
                    int flag_two,
                    int flag_three,
                    int flag_flour,
                    int ext_tra_flag,
                    int stl_ind,
                    int period_two,
                    int arr_rec_flag,
                    int int_led_flag,
                    int cb_led_code,
                    int exd_led_code,
                    int arr_flag,
                    int arr_ledger,
                    int sus_led,
                    int tell_id,
                    string des_eng,
                    int adv_days,
                    int add_int_days,
                    int susp_led_code,
                    int deb_rest_flag,
                    int cre_rest_flag,
                    int cur_code,
                    int ext_int_flag,
                    int band_type,
                    int calc_met,
                    int int_cap_per,
                    int int_chg_pai_ind,
                    int base_days,
                    int int_bal_lim,
                    int min_int_amt,
                    int int_cal_met,
                    int int_rate)
        {
            this.CreateLedgerAsync(bra_code, acct_code, advice_days, exd_wdl_lim, bra_fac_perc, ledger_type, dep_code, man_app_flag, cus_used_flag, led_model, stmt_cyc_code, grp_brk_cr, grp_brk_dr, int_flag, fc_rev_flag, ref_type, acct_clo_flag, fac_type_1, fac_type_2, fac_type_3, fac_type_4, fac_type_5, acct_clos_per, acct_del_per, acct_dor_per, fac_uns_per, int_chg_las_mon, int_chg_tis_mon, def_int_chg, int_pai_las_mon, int_pai_tis_mon, def_int_pai, arr_led, mat_type, led_code, bank_cha_flag, flag_one, flag_two, flag_three, flag_flour, ext_tra_flag, stl_ind, period_two, arr_rec_flag, int_led_flag, cb_led_code, exd_led_code, arr_flag, arr_ledger, sus_led, tell_id, des_eng, adv_days, add_int_days, susp_led_code, deb_rest_flag, cre_rest_flag, cur_code, ext_int_flag, band_type, calc_met, int_cap_per, int_chg_pai_ind, base_days, int_bal_lim, min_int_amt, int_cal_met, int_rate, null);
        }

        /// <remarks/>
        public void CreateLedgerAsync(
                    int bra_code,
                    int acct_code,
                    int advice_days,
                    int exd_wdl_lim,
                    int bra_fac_perc,
                    int ledger_type,
                    int dep_code,
                    int man_app_flag,
                    int cus_used_flag,
                    int led_model,
                    int stmt_cyc_code,
                    int grp_brk_cr,
                    int grp_brk_dr,
                    int int_flag,
                    int fc_rev_flag,
                    int ref_type,
                    int acct_clo_flag,
                    int fac_type_1,
                    int fac_type_2,
                    int fac_type_3,
                    int fac_type_4,
                    int fac_type_5,
                    int acct_clos_per,
                    int acct_del_per,
                    int acct_dor_per,
                    int fac_uns_per,
                    int int_chg_las_mon,
                    int int_chg_tis_mon,
                    int def_int_chg,
                    int int_pai_las_mon,
                    int int_pai_tis_mon,
                    int def_int_pai,
                    int arr_led,
                    int mat_type,
                    int led_code,
                    int bank_cha_flag,
                    int flag_one,
                    int flag_two,
                    int flag_three,
                    int flag_flour,
                    int ext_tra_flag,
                    int stl_ind,
                    int period_two,
                    int arr_rec_flag,
                    int int_led_flag,
                    int cb_led_code,
                    int exd_led_code,
                    int arr_flag,
                    int arr_ledger,
                    int sus_led,
                    int tell_id,
                    string des_eng,
                    int adv_days,
                    int add_int_days,
                    int susp_led_code,
                    int deb_rest_flag,
                    int cre_rest_flag,
                    int cur_code,
                    int ext_int_flag,
                    int band_type,
                    int calc_met,
                    int int_cap_per,
                    int int_chg_pai_ind,
                    int base_days,
                    int int_bal_lim,
                    int min_int_amt,
                    int int_cal_met,
                    int int_rate,
                    object userState)
        {
            if ((this.CreateLedgerOperationCompleted == null))
            {
                this.CreateLedgerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateLedgerOperationCompleted);
            }
            this.InvokeAsync("CreateLedger", new object[] {
                    bra_code,
                    acct_code,
                    advice_days,
                    exd_wdl_lim,
                    bra_fac_perc,
                    ledger_type,
                    dep_code,
                    man_app_flag,
                    cus_used_flag,
                    led_model,
                    stmt_cyc_code,
                    grp_brk_cr,
                    grp_brk_dr,
                    int_flag,
                    fc_rev_flag,
                    ref_type,
                    acct_clo_flag,
                    fac_type_1,
                    fac_type_2,
                    fac_type_3,
                    fac_type_4,
                    fac_type_5,
                    acct_clos_per,
                    acct_del_per,
                    acct_dor_per,
                    fac_uns_per,
                    int_chg_las_mon,
                    int_chg_tis_mon,
                    def_int_chg,
                    int_pai_las_mon,
                    int_pai_tis_mon,
                    def_int_pai,
                    arr_led,
                    mat_type,
                    led_code,
                    bank_cha_flag,
                    flag_one,
                    flag_two,
                    flag_three,
                    flag_flour,
                    ext_tra_flag,
                    stl_ind,
                    period_two,
                    arr_rec_flag,
                    int_led_flag,
                    cb_led_code,
                    exd_led_code,
                    arr_flag,
                    arr_ledger,
                    sus_led,
                    tell_id,
                    des_eng,
                    adv_days,
                    add_int_days,
                    susp_led_code,
                    deb_rest_flag,
                    cre_rest_flag,
                    cur_code,
                    ext_int_flag,
                    band_type,
                    calc_met,
                    int_cap_per,
                    int_chg_pai_ind,
                    base_days,
                    int_bal_lim,
                    min_int_amt,
                    int_cal_met,
                    int_rate}, this.CreateLedgerOperationCompleted, userState);
        }

        private void OnCreateLedgerOperationCompleted(object arg)
        {
            if ((this.CreateLedgerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateLedgerCompleted(this, new CreateLedgerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTransferLimit", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateTransferLimit(string userId, int gtb_gtb_trans, int gtb_oth_trans, string request_Id, string request_date, string case_num, string channel, string approval_id)
        {
            object[] results = this.Invoke("UpdateTransferLimit", new object[] {
                    userId,
                    gtb_gtb_trans,
                    gtb_oth_trans,
                    request_Id,
                    request_date,
                    case_num,
                    channel,
                    approval_id});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateTransferLimit(string userId, int gtb_gtb_trans, int gtb_oth_trans, string request_Id, string request_date, string case_num, string channel, string approval_id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateTransferLimit", new object[] {
                    userId,
                    gtb_gtb_trans,
                    gtb_oth_trans,
                    request_Id,
                    request_date,
                    case_num,
                    channel,
                    approval_id}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateTransferLimit(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateTransferLimitAsync(string userId, int gtb_gtb_trans, int gtb_oth_trans, string request_Id, string request_date, string case_num, string channel, string approval_id)
        {
            this.UpdateTransferLimitAsync(userId, gtb_gtb_trans, gtb_oth_trans, request_Id, request_date, case_num, channel, approval_id, null);
        }

        /// <remarks/>
        public void UpdateTransferLimitAsync(string userId, int gtb_gtb_trans, int gtb_oth_trans, string request_Id, string request_date, string case_num, string channel, string approval_id, object userState)
        {
            if ((this.UpdateTransferLimitOperationCompleted == null))
            {
                this.UpdateTransferLimitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTransferLimitOperationCompleted);
            }
            this.InvokeAsync("UpdateTransferLimit", new object[] {
                    userId,
                    gtb_gtb_trans,
                    gtb_oth_trans,
                    request_Id,
                    request_date,
                    case_num,
                    channel,
                    approval_id}, this.UpdateTransferLimitOperationCompleted, userState);
        }

        private void OnUpdateTransferLimitOperationCompleted(object arg)
        {
            if ((this.UpdateTransferLimitCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTransferLimitCompleted(this, new UpdateTransferLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLedgerDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLedgerDetails(int copy_led)
        {
            object[] results = this.Invoke("GetLedgerDetails", new object[] {
                    copy_led});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetLedgerDetails(int copy_led, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetLedgerDetails", new object[] {
                    copy_led}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetLedgerDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetLedgerDetailsAsync(int copy_led)
        {
            this.GetLedgerDetailsAsync(copy_led, null);
        }

        /// <remarks/>
        public void GetLedgerDetailsAsync(int copy_led, object userState)
        {
            if ((this.GetLedgerDetailsOperationCompleted == null))
            {
                this.GetLedgerDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLedgerDetailsOperationCompleted);
            }
            this.InvokeAsync("GetLedgerDetails", new object[] {
                    copy_led}, this.GetLedgerDetailsOperationCompleted, userState);
        }

        private void OnGetLedgerDetailsOperationCompleted(object arg)
        {
            if ((this.GetLedgerDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLedgerDetailsCompleted(this, new GetLedgerDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserID", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserID(string acctno)
        {
            object[] results = this.Invoke("GetUserID", new object[] {
                    acctno});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetUserID(string acctno, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetUserID", new object[] {
                    acctno}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetUserID(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetUserIDAsync(string acctno)
        {
            this.GetUserIDAsync(acctno, null);
        }

        /// <remarks/>
        public void GetUserIDAsync(string acctno, object userState)
        {
            if ((this.GetUserIDOperationCompleted == null))
            {
                this.GetUserIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserIDOperationCompleted);
            }
            this.InvokeAsync("GetUserID", new object[] {
                    acctno}, this.GetUserIDOperationCompleted, userState);
        }

        private void OnGetUserIDOperationCompleted(object arg)
        {
            if ((this.GetUserIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserIDCompleted(this, new GetUserIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateFXTransferLog_PM", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateFXTransferLog_PM(string transref, float amount, string userid, string confirmationState, string confirmationRejectionReason, string channel)
        {
            object[] results = this.Invoke("UpdateFXTransferLog_PM", new object[] {
                    transref,
                    amount,
                    userid,
                    confirmationState,
                    confirmationRejectionReason,
                    channel});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateFXTransferLog_PM(string transref, float amount, string userid, string confirmationState, string confirmationRejectionReason, string channel, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateFXTransferLog_PM", new object[] {
                    transref,
                    amount,
                    userid,
                    confirmationState,
                    confirmationRejectionReason,
                    channel}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateFXTransferLog_PM(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateFXTransferLog_PMAsync(string transref, float amount, string userid, string confirmationState, string confirmationRejectionReason, string channel)
        {
            this.UpdateFXTransferLog_PMAsync(transref, amount, userid, confirmationState, confirmationRejectionReason, channel, null);
        }

        /// <remarks/>
        public void UpdateFXTransferLog_PMAsync(string transref, float amount, string userid, string confirmationState, string confirmationRejectionReason, string channel, object userState)
        {
            if ((this.UpdateFXTransferLog_PMOperationCompleted == null))
            {
                this.UpdateFXTransferLog_PMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFXTransferLog_PMOperationCompleted);
            }
            this.InvokeAsync("UpdateFXTransferLog_PM", new object[] {
                    transref,
                    amount,
                    userid,
                    confirmationState,
                    confirmationRejectionReason,
                    channel}, this.UpdateFXTransferLog_PMOperationCompleted, userState);
        }

        private void OnUpdateFXTransferLog_PMOperationCompleted(object arg)
        {
            if ((this.UpdateFXTransferLog_PMCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFXTransferLog_PMCompleted(this, new UpdateFXTransferLog_PMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertChequeBookRequests", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertChequeBookRequests(
                    string acctno,
                    string nuban,
                    string acctname,
                    int chqleaves,
                    int serialStart,
                    int serialStop,
                    int pickUpBranchCode,
                    string chkbkType,
                    string userId,
                    int reqtBra,
                    decimal amtChgd,
                    string channel,
                    int packs,
                    int reqID,
                    int trackId,
                    int acctNat,
                    int status)
        {
            object[] results = this.Invoke("InsertChequeBookRequests", new object[] {
                    acctno,
                    nuban,
                    acctname,
                    chqleaves,
                    serialStart,
                    serialStop,
                    pickUpBranchCode,
                    chkbkType,
                    userId,
                    reqtBra,
                    amtChgd,
                    channel,
                    packs,
                    reqID,
                    trackId,
                    acctNat,
                    status});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertChequeBookRequests(
                    string acctno,
                    string nuban,
                    string acctname,
                    int chqleaves,
                    int serialStart,
                    int serialStop,
                    int pickUpBranchCode,
                    string chkbkType,
                    string userId,
                    int reqtBra,
                    decimal amtChgd,
                    string channel,
                    int packs,
                    int reqID,
                    int trackId,
                    int acctNat,
                    int status,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("InsertChequeBookRequests", new object[] {
                    acctno,
                    nuban,
                    acctname,
                    chqleaves,
                    serialStart,
                    serialStop,
                    pickUpBranchCode,
                    chkbkType,
                    userId,
                    reqtBra,
                    amtChgd,
                    channel,
                    packs,
                    reqID,
                    trackId,
                    acctNat,
                    status}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInsertChequeBookRequests(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertChequeBookRequestsAsync(
                    string acctno,
                    string nuban,
                    string acctname,
                    int chqleaves,
                    int serialStart,
                    int serialStop,
                    int pickUpBranchCode,
                    string chkbkType,
                    string userId,
                    int reqtBra,
                    decimal amtChgd,
                    string channel,
                    int packs,
                    int reqID,
                    int trackId,
                    int acctNat,
                    int status)
        {
            this.InsertChequeBookRequestsAsync(acctno, nuban, acctname, chqleaves, serialStart, serialStop, pickUpBranchCode, chkbkType, userId, reqtBra, amtChgd, channel, packs, reqID, trackId, acctNat, status, null);
        }

        /// <remarks/>
        public void InsertChequeBookRequestsAsync(
                    string acctno,
                    string nuban,
                    string acctname,
                    int chqleaves,
                    int serialStart,
                    int serialStop,
                    int pickUpBranchCode,
                    string chkbkType,
                    string userId,
                    int reqtBra,
                    decimal amtChgd,
                    string channel,
                    int packs,
                    int reqID,
                    int trackId,
                    int acctNat,
                    int status,
                    object userState)
        {
            if ((this.InsertChequeBookRequestsOperationCompleted == null))
            {
                this.InsertChequeBookRequestsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertChequeBookRequestsOperationCompleted);
            }
            this.InvokeAsync("InsertChequeBookRequests", new object[] {
                    acctno,
                    nuban,
                    acctname,
                    chqleaves,
                    serialStart,
                    serialStop,
                    pickUpBranchCode,
                    chkbkType,
                    userId,
                    reqtBra,
                    amtChgd,
                    channel,
                    packs,
                    reqID,
                    trackId,
                    acctNat,
                    status}, this.InsertChequeBookRequestsOperationCompleted, userState);
        }

        private void OnInsertChequeBookRequestsOperationCompleted(object arg)
        {
            if ((this.InsertChequeBookRequestsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertChequeBookRequestsCompleted(this, new InsertChequeBookRequestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerDOBHistory", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerDOBHistory(string bra_code, string cus_num)
        {
            object[] results = this.Invoke("GetCustomerDOBHistory", new object[] {
                    bra_code,
                    cus_num});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCustomerDOBHistory(string bra_code, string cus_num, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCustomerDOBHistory", new object[] {
                    bra_code,
                    cus_num}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetCustomerDOBHistory(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetCustomerDOBHistoryAsync(string bra_code, string cus_num)
        {
            this.GetCustomerDOBHistoryAsync(bra_code, cus_num, null);
        }

        /// <remarks/>
        public void GetCustomerDOBHistoryAsync(string bra_code, string cus_num, object userState)
        {
            if ((this.GetCustomerDOBHistoryOperationCompleted == null))
            {
                this.GetCustomerDOBHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerDOBHistoryOperationCompleted);
            }
            this.InvokeAsync("GetCustomerDOBHistory", new object[] {
                    bra_code,
                    cus_num}, this.GetCustomerDOBHistoryOperationCompleted, userState);
        }

        private void OnGetCustomerDOBHistoryOperationCompleted(object arg)
        {
            if ((this.GetCustomerDOBHistoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerDOBHistoryCompleted(this, new GetCustomerDOBHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDeferredDoc", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDeferredDoc(string accountNo)
        {
            object[] results = this.Invoke("GetDeferredDoc", new object[] {
                    accountNo});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetDeferredDoc(string accountNo, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetDeferredDoc", new object[] {
                    accountNo}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetDeferredDoc(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetDeferredDocAsync(string accountNo)
        {
            this.GetDeferredDocAsync(accountNo, null);
        }

        /// <remarks/>
        public void GetDeferredDocAsync(string accountNo, object userState)
        {
            if ((this.GetDeferredDocOperationCompleted == null))
            {
                this.GetDeferredDocOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeferredDocOperationCompleted);
            }
            this.InvokeAsync("GetDeferredDoc", new object[] {
                    accountNo}, this.GetDeferredDocOperationCompleted, userState);
        }

        private void OnGetDeferredDocOperationCompleted(object arg)
        {
            if ((this.GetDeferredDocCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeferredDocCompleted(this, new GetDeferredDocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountLinkedEmail", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAccountLinkedEmail(string oldAccountNumber)
        {
            object[] results = this.Invoke("GetAccountLinkedEmail", new object[] {
                    oldAccountNumber});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAccountLinkedEmail(string oldAccountNumber, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAccountLinkedEmail", new object[] {
                    oldAccountNumber}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAccountLinkedEmail(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAccountLinkedEmailAsync(string oldAccountNumber)
        {
            this.GetAccountLinkedEmailAsync(oldAccountNumber, null);
        }

        /// <remarks/>
        public void GetAccountLinkedEmailAsync(string oldAccountNumber, object userState)
        {
            if ((this.GetAccountLinkedEmailOperationCompleted == null))
            {
                this.GetAccountLinkedEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountLinkedEmailOperationCompleted);
            }
            this.InvokeAsync("GetAccountLinkedEmail", new object[] {
                    oldAccountNumber}, this.GetAccountLinkedEmailOperationCompleted, userState);
        }

        private void OnGetAccountLinkedEmailOperationCompleted(object arg)
        {
            if ((this.GetAccountLinkedEmailCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountLinkedEmailCompleted(this, new GetAccountLinkedEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountNature", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAccountNature(int bra_code, int cus_num)
        {
            object[] results = this.Invoke("GetAccountNature", new object[] {
                    bra_code,
                    cus_num});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAccountNature(int bra_code, int cus_num, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAccountNature", new object[] {
                    bra_code,
                    cus_num}, callback, asyncState);
        }

        /// <remarks/>
        public int EndGetAccountNature(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void GetAccountNatureAsync(int bra_code, int cus_num)
        {
            this.GetAccountNatureAsync(bra_code, cus_num, null);
        }

        /// <remarks/>
        public void GetAccountNatureAsync(int bra_code, int cus_num, object userState)
        {
            if ((this.GetAccountNatureOperationCompleted == null))
            {
                this.GetAccountNatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountNatureOperationCompleted);
            }
            this.InvokeAsync("GetAccountNature", new object[] {
                    bra_code,
                    cus_num}, this.GetAccountNatureOperationCompleted, userState);
        }

        private void OnGetAccountNatureOperationCompleted(object arg)
        {
            if ((this.GetAccountNatureCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountNatureCompleted(this, new GetAccountNatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchOFACList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchOFACList(string cus_sho_name)
        {
            object[] results = this.Invoke("SearchOFACList", new object[] {
                    cus_sho_name});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSearchOFACList(string cus_sho_name, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SearchOFACList", new object[] {
                    cus_sho_name}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSearchOFACList(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SearchOFACListAsync(string cus_sho_name)
        {
            this.SearchOFACListAsync(cus_sho_name, null);
        }

        /// <remarks/>
        public void SearchOFACListAsync(string cus_sho_name, object userState)
        {
            if ((this.SearchOFACListOperationCompleted == null))
            {
                this.SearchOFACListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchOFACListOperationCompleted);
            }
            this.InvokeAsync("SearchOFACList", new object[] {
                    cus_sho_name}, this.SearchOFACListOperationCompleted, userState);
        }

        private void OnSearchOFACListOperationCompleted(object arg)
        {
            if ((this.SearchOFACListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchOFACListCompleted(this, new SearchOFACListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustBVN", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustBVN(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code)
        {
            object[] results = this.Invoke("GetCustBVN", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCustBVN(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCustBVN", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetCustBVN(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetCustBVNAsync(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code)
        {
            this.GetCustBVNAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, null);
        }

        /// <remarks/>
        public void GetCustBVNAsync(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, object userState)
        {
            if ((this.GetCustBVNOperationCompleted == null))
            {
                this.GetCustBVNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustBVNOperationCompleted);
            }
            this.InvokeAsync("GetCustBVN", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, this.GetCustBVNOperationCompleted, userState);
        }

        private void OnGetCustBVNOperationCompleted(object arg)
        {
            if ((this.GetCustBVNCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustBVNCompleted(this, new GetCustBVNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLinkedAcct2BVN", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLinkedAcct2BVN(string bvn)
        {
            object[] results = this.Invoke("GetLinkedAcct2BVN", new object[] {
                    bvn});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetLinkedAcct2BVN(string bvn, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetLinkedAcct2BVN", new object[] {
                    bvn}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetLinkedAcct2BVN(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetLinkedAcct2BVNAsync(string bvn)
        {
            this.GetLinkedAcct2BVNAsync(bvn, null);
        }

        /// <remarks/>
        public void GetLinkedAcct2BVNAsync(string bvn, object userState)
        {
            if ((this.GetLinkedAcct2BVNOperationCompleted == null))
            {
                this.GetLinkedAcct2BVNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLinkedAcct2BVNOperationCompleted);
            }
            this.InvokeAsync("GetLinkedAcct2BVN", new object[] {
                    bvn}, this.GetLinkedAcct2BVNOperationCompleted, userState);
        }

        private void OnGetLinkedAcct2BVNOperationCompleted(object arg)
        {
            if ((this.GetLinkedAcct2BVNCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLinkedAcct2BVNCompleted(this, new GetLinkedAcct2BVNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddInReference", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddInReference(string newacct, string refacct, string signatory, string tellid, string origbracode)
        {
            object[] results = this.Invoke("AddInReference", new object[] {
                    newacct,
                    refacct,
                    signatory,
                    tellid,
                    origbracode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddInReference(string newacct, string refacct, string signatory, string tellid, string origbracode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddInReference", new object[] {
                    newacct,
                    refacct,
                    signatory,
                    tellid,
                    origbracode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAddInReference(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AddInReferenceAsync(string newacct, string refacct, string signatory, string tellid, string origbracode)
        {
            this.AddInReferenceAsync(newacct, refacct, signatory, tellid, origbracode, null);
        }

        /// <remarks/>
        public void AddInReferenceAsync(string newacct, string refacct, string signatory, string tellid, string origbracode, object userState)
        {
            if ((this.AddInReferenceOperationCompleted == null))
            {
                this.AddInReferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddInReferenceOperationCompleted);
            }
            this.InvokeAsync("AddInReference", new object[] {
                    newacct,
                    refacct,
                    signatory,
                    tellid,
                    origbracode}, this.AddInReferenceOperationCompleted, userState);
        }

        private void OnAddInReferenceOperationCompleted(object arg)
        {
            if ((this.AddInReferenceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddInReferenceCompleted(this, new AddInReferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddoutReference", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddoutReference(string newacct, string refacct, string refname, string refbnk, string tellid, string origbracode)
        {
            object[] results = this.Invoke("AddoutReference", new object[] {
                    newacct,
                    refacct,
                    refname,
                    refbnk,
                    tellid,
                    origbracode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddoutReference(string newacct, string refacct, string refname, string refbnk, string tellid, string origbracode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddoutReference", new object[] {
                    newacct,
                    refacct,
                    refname,
                    refbnk,
                    tellid,
                    origbracode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAddoutReference(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AddoutReferenceAsync(string newacct, string refacct, string refname, string refbnk, string tellid, string origbracode)
        {
            this.AddoutReferenceAsync(newacct, refacct, refname, refbnk, tellid, origbracode, null);
        }

        /// <remarks/>
        public void AddoutReferenceAsync(string newacct, string refacct, string refname, string refbnk, string tellid, string origbracode, object userState)
        {
            if ((this.AddoutReferenceOperationCompleted == null))
            {
                this.AddoutReferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddoutReferenceOperationCompleted);
            }
            this.InvokeAsync("AddoutReference", new object[] {
                    newacct,
                    refacct,
                    refname,
                    refbnk,
                    tellid,
                    origbracode}, this.AddoutReferenceOperationCompleted, userState);
        }

        private void OnAddoutReferenceOperationCompleted(object arg)
        {
            if ((this.AddoutReferenceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddoutReferenceCompleted(this, new AddoutReferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUnsuitableReference", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddUnsuitableReference(string newacct, string refacct, string signatory, string tellid, string origbracode, string Unsuitablereason)
        {
            object[] results = this.Invoke("AddUnsuitableReference", new object[] {
                    newacct,
                    refacct,
                    signatory,
                    tellid,
                    origbracode,
                    Unsuitablereason});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddUnsuitableReference(string newacct, string refacct, string signatory, string tellid, string origbracode, string Unsuitablereason, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddUnsuitableReference", new object[] {
                    newacct,
                    refacct,
                    signatory,
                    tellid,
                    origbracode,
                    Unsuitablereason}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAddUnsuitableReference(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AddUnsuitableReferenceAsync(string newacct, string refacct, string signatory, string tellid, string origbracode, string Unsuitablereason)
        {
            this.AddUnsuitableReferenceAsync(newacct, refacct, signatory, tellid, origbracode, Unsuitablereason, null);
        }

        /// <remarks/>
        public void AddUnsuitableReferenceAsync(string newacct, string refacct, string signatory, string tellid, string origbracode, string Unsuitablereason, object userState)
        {
            if ((this.AddUnsuitableReferenceOperationCompleted == null))
            {
                this.AddUnsuitableReferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUnsuitableReferenceOperationCompleted);
            }
            this.InvokeAsync("AddUnsuitableReference", new object[] {
                    newacct,
                    refacct,
                    signatory,
                    tellid,
                    origbracode,
                    Unsuitablereason}, this.AddUnsuitableReferenceOperationCompleted, userState);
        }

        private void OnAddUnsuitableReferenceOperationCompleted(object arg)
        {
            if ((this.AddUnsuitableReferenceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUnsuitableReferenceCompleted(this, new AddUnsuitableReferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertBallim", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertBallim(int bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, int tell_id, string bal_lim, string mat_date)
        {
            object[] results = this.Invoke("InsertBallim", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    tell_id,
                    bal_lim,
                    mat_date});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertBallim(int bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, int tell_id, string bal_lim, string mat_date, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InsertBallim", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    tell_id,
                    bal_lim,
                    mat_date}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInsertBallim(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertBallimAsync(int bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, int tell_id, string bal_lim, string mat_date)
        {
            this.InsertBallimAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, tell_id, bal_lim, mat_date, null);
        }

        /// <remarks/>
        public void InsertBallimAsync(int bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, int tell_id, string bal_lim, string mat_date, object userState)
        {
            if ((this.InsertBallimOperationCompleted == null))
            {
                this.InsertBallimOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertBallimOperationCompleted);
            }
            this.InvokeAsync("InsertBallim", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    tell_id,
                    bal_lim,
                    mat_date}, this.InsertBallimOperationCompleted, userState);
        }

        private void OnInsertBallimOperationCompleted(object arg)
        {
            if ((this.InsertBallimCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertBallimCompleted(this, new InsertBallimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertCardAccount", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertCardAccount(string fullAcctKey, string cardAccount)
        {
            object[] results = this.Invoke("InsertCardAccount", new object[] {
                    fullAcctKey,
                    cardAccount});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertCardAccount(string fullAcctKey, string cardAccount, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InsertCardAccount", new object[] {
                    fullAcctKey,
                    cardAccount}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInsertCardAccount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertCardAccountAsync(string fullAcctKey, string cardAccount)
        {
            this.InsertCardAccountAsync(fullAcctKey, cardAccount, null);
        }

        /// <remarks/>
        public void InsertCardAccountAsync(string fullAcctKey, string cardAccount, object userState)
        {
            if ((this.InsertCardAccountOperationCompleted == null))
            {
                this.InsertCardAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCardAccountOperationCompleted);
            }
            this.InvokeAsync("InsertCardAccount", new object[] {
                    fullAcctKey,
                    cardAccount}, this.InsertCardAccountOperationCompleted, userState);
        }

        private void OnInsertCardAccountOperationCompleted(object arg)
        {
            if ((this.InsertCardAccountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCardAccountCompleted(this, new InsertCardAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAccountDetails(string oldAccountNumber)
        {
            object[] results = this.Invoke("GetAccountDetails", new object[] {
                    oldAccountNumber});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAccountDetails(string oldAccountNumber, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAccountDetails", new object[] {
                    oldAccountNumber}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAccountDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAccountDetailsAsync(string oldAccountNumber)
        {
            this.GetAccountDetailsAsync(oldAccountNumber, null);
        }

        /// <remarks/>
        public void GetAccountDetailsAsync(string oldAccountNumber, object userState)
        {
            if ((this.GetAccountDetailsOperationCompleted == null))
            {
                this.GetAccountDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountDetailsOperationCompleted);
            }
            this.InvokeAsync("GetAccountDetails", new object[] {
                    oldAccountNumber}, this.GetAccountDetailsOperationCompleted, userState);
        }

        private void OnGetAccountDetailsOperationCompleted(object arg)
        {
            if ((this.GetAccountDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountDetailsCompleted(this, new GetAccountDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProcessSalaryAdvance", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcessSalaryAdvance(string AccttoCredit, string Name, double RequestAmount, string MobNum, string channel)
        {
            object[] results = this.Invoke("ProcessSalaryAdvance", new object[] {
                    AccttoCredit,
                    Name,
                    RequestAmount,
                    MobNum,
                    channel});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginProcessSalaryAdvance(string AccttoCredit, string Name, double RequestAmount, string MobNum, string channel, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ProcessSalaryAdvance", new object[] {
                    AccttoCredit,
                    Name,
                    RequestAmount,
                    MobNum,
                    channel}, callback, asyncState);
        }

        /// <remarks/>
        public string EndProcessSalaryAdvance(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ProcessSalaryAdvanceAsync(string AccttoCredit, string Name, double RequestAmount, string MobNum, string channel)
        {
            this.ProcessSalaryAdvanceAsync(AccttoCredit, Name, RequestAmount, MobNum, channel, null);
        }

        /// <remarks/>
        public void ProcessSalaryAdvanceAsync(string AccttoCredit, string Name, double RequestAmount, string MobNum, string channel, object userState)
        {
            if ((this.ProcessSalaryAdvanceOperationCompleted == null))
            {
                this.ProcessSalaryAdvanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessSalaryAdvanceOperationCompleted);
            }
            this.InvokeAsync("ProcessSalaryAdvance", new object[] {
                    AccttoCredit,
                    Name,
                    RequestAmount,
                    MobNum,
                    channel}, this.ProcessSalaryAdvanceOperationCompleted, userState);
        }

        private void OnProcessSalaryAdvanceOperationCompleted(object arg)
        {
            if ((this.ProcessSalaryAdvanceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessSalaryAdvanceCompleted(this, new ProcessSalaryAdvanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateGOHAttestationInfo", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateGOHAttestationInfo(string Initiator, System.DateTime Initiator_Date, int branch, string case_id, System.DateTime Date_From, System.DateTime Date_To, System.DateTime Vaultcounted_Date, string Vaultexception_Noted, string Vaultaction_taken, System.DateTime ATMcounted_Date, string ATMexception_Noted, string ATMaction_taken, int Status, string exception_identified)
        {
            object[] results = this.Invoke("UpdateGOHAttestationInfo", new object[] {
                    Initiator,
                    Initiator_Date,
                    branch,
                    case_id,
                    Date_From,
                    Date_To,
                    Vaultcounted_Date,
                    Vaultexception_Noted,
                    Vaultaction_taken,
                    ATMcounted_Date,
                    ATMexception_Noted,
                    ATMaction_taken,
                    Status,
                    exception_identified});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateGOHAttestationInfo(
                    string Initiator,
                    System.DateTime Initiator_Date,
                    int branch,
                    string case_id,
                    System.DateTime Date_From,
                    System.DateTime Date_To,
                    System.DateTime Vaultcounted_Date,
                    string Vaultexception_Noted,
                    string Vaultaction_taken,
                    System.DateTime ATMcounted_Date,
                    string ATMexception_Noted,
                    string ATMaction_taken,
                    int Status,
                    string exception_identified,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("UpdateGOHAttestationInfo", new object[] {
                    Initiator,
                    Initiator_Date,
                    branch,
                    case_id,
                    Date_From,
                    Date_To,
                    Vaultcounted_Date,
                    Vaultexception_Noted,
                    Vaultaction_taken,
                    ATMcounted_Date,
                    ATMexception_Noted,
                    ATMaction_taken,
                    Status,
                    exception_identified}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateGOHAttestationInfo(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateGOHAttestationInfoAsync(string Initiator, System.DateTime Initiator_Date, int branch, string case_id, System.DateTime Date_From, System.DateTime Date_To, System.DateTime Vaultcounted_Date, string Vaultexception_Noted, string Vaultaction_taken, System.DateTime ATMcounted_Date, string ATMexception_Noted, string ATMaction_taken, int Status, string exception_identified)
        {
            this.UpdateGOHAttestationInfoAsync(Initiator, Initiator_Date, branch, case_id, Date_From, Date_To, Vaultcounted_Date, Vaultexception_Noted, Vaultaction_taken, ATMcounted_Date, ATMexception_Noted, ATMaction_taken, Status, exception_identified, null);
        }

        /// <remarks/>
        public void UpdateGOHAttestationInfoAsync(string Initiator, System.DateTime Initiator_Date, int branch, string case_id, System.DateTime Date_From, System.DateTime Date_To, System.DateTime Vaultcounted_Date, string Vaultexception_Noted, string Vaultaction_taken, System.DateTime ATMcounted_Date, string ATMexception_Noted, string ATMaction_taken, int Status, string exception_identified, object userState)
        {
            if ((this.UpdateGOHAttestationInfoOperationCompleted == null))
            {
                this.UpdateGOHAttestationInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateGOHAttestationInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateGOHAttestationInfo", new object[] {
                    Initiator,
                    Initiator_Date,
                    branch,
                    case_id,
                    Date_From,
                    Date_To,
                    Vaultcounted_Date,
                    Vaultexception_Noted,
                    Vaultaction_taken,
                    ATMcounted_Date,
                    ATMexception_Noted,
                    ATMaction_taken,
                    Status,
                    exception_identified}, this.UpdateGOHAttestationInfoOperationCompleted, userState);
        }

        private void OnUpdateGOHAttestationInfoOperationCompleted(object arg)
        {
            if ((this.UpdateGOHAttestationInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateGOHAttestationInfoCompleted(this, new UpdateGOHAttestationInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getOutstandingBranches", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getOutstandingBranches(int region)
        {
            object[] results = this.Invoke("getOutstandingBranches", new object[] {
                    region});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetOutstandingBranches(int region, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getOutstandingBranches", new object[] {
                    region}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetOutstandingBranches(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getOutstandingBranchesAsync(int region)
        {
            this.getOutstandingBranchesAsync(region, null);
        }

        /// <remarks/>
        public void getOutstandingBranchesAsync(int region, object userState)
        {
            if ((this.getOutstandingBranchesOperationCompleted == null))
            {
                this.getOutstandingBranchesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOutstandingBranchesOperationCompleted);
            }
            this.InvokeAsync("getOutstandingBranches", new object[] {
                    region}, this.getOutstandingBranchesOperationCompleted, userState);
        }

        private void OngetOutstandingBranchesOperationCompleted(object arg)
        {
            if ((this.getOutstandingBranchesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOutstandingBranchesCompleted(this, new getOutstandingBranchesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateRelStatus", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateRelStatus(string caseid, string docid, int status)
        {
            object[] results = this.Invoke("UpdateRelStatus", new object[] {
                    caseid,
                    docid,
                    status});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateRelStatus(string caseid, string docid, int status, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateRelStatus", new object[] {
                    caseid,
                    docid,
                    status}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateRelStatus(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateRelStatusAsync(string caseid, string docid, int status)
        {
            this.UpdateRelStatusAsync(caseid, docid, status, null);
        }

        /// <remarks/>
        public void UpdateRelStatusAsync(string caseid, string docid, int status, object userState)
        {
            if ((this.UpdateRelStatusOperationCompleted == null))
            {
                this.UpdateRelStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRelStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateRelStatus", new object[] {
                    caseid,
                    docid,
                    status}, this.UpdateRelStatusOperationCompleted, userState);
        }

        private void OnUpdateRelStatusOperationCompleted(object arg)
        {
            if ((this.UpdateRelStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRelStatusCompleted(this, new UpdateRelStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PostToBASIS_With_Charges", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] PostToBASIS_With_Charges(
                    string PrincipalAcctFrom,
                    string PrincipalacctTo,
                    double PrincipalAmount,
                    int PrincipalExplcode,
                    string PrincipalRemark,
                    string CommissionAcctFrom,
                    string CommisionacctTo,
                    double CommissionAmount,
                    int CommissionExplcode,
                    string CommissionRemark,
                    string VATAcctFrom,
                    string VATacctTo,
                    double VATAmount,
                    int VATExplcode,
                    string VATRemark,
                    string RequestCode,
                    string braCode)
        {
            object[] results = this.Invoke("PostToBASIS_With_Charges", new object[] {
                    PrincipalAcctFrom,
                    PrincipalacctTo,
                    PrincipalAmount,
                    PrincipalExplcode,
                    PrincipalRemark,
                    CommissionAcctFrom,
                    CommisionacctTo,
                    CommissionAmount,
                    CommissionExplcode,
                    CommissionRemark,
                    VATAcctFrom,
                    VATacctTo,
                    VATAmount,
                    VATExplcode,
                    VATRemark,
                    RequestCode,
                    braCode});
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginPostToBASIS_With_Charges(
                    string PrincipalAcctFrom,
                    string PrincipalacctTo,
                    double PrincipalAmount,
                    int PrincipalExplcode,
                    string PrincipalRemark,
                    string CommissionAcctFrom,
                    string CommisionacctTo,
                    double CommissionAmount,
                    int CommissionExplcode,
                    string CommissionRemark,
                    string VATAcctFrom,
                    string VATacctTo,
                    double VATAmount,
                    int VATExplcode,
                    string VATRemark,
                    string RequestCode,
                    string braCode,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("PostToBASIS_With_Charges", new object[] {
                    PrincipalAcctFrom,
                    PrincipalacctTo,
                    PrincipalAmount,
                    PrincipalExplcode,
                    PrincipalRemark,
                    CommissionAcctFrom,
                    CommisionacctTo,
                    CommissionAmount,
                    CommissionExplcode,
                    CommissionRemark,
                    VATAcctFrom,
                    VATacctTo,
                    VATAmount,
                    VATExplcode,
                    VATRemark,
                    RequestCode,
                    braCode}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndPostToBASIS_With_Charges(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void PostToBASIS_With_ChargesAsync(
                    string PrincipalAcctFrom,
                    string PrincipalacctTo,
                    double PrincipalAmount,
                    int PrincipalExplcode,
                    string PrincipalRemark,
                    string CommissionAcctFrom,
                    string CommisionacctTo,
                    double CommissionAmount,
                    int CommissionExplcode,
                    string CommissionRemark,
                    string VATAcctFrom,
                    string VATacctTo,
                    double VATAmount,
                    int VATExplcode,
                    string VATRemark,
                    string RequestCode,
                    string braCode)
        {
            this.PostToBASIS_With_ChargesAsync(PrincipalAcctFrom, PrincipalacctTo, PrincipalAmount, PrincipalExplcode, PrincipalRemark, CommissionAcctFrom, CommisionacctTo, CommissionAmount, CommissionExplcode, CommissionRemark, VATAcctFrom, VATacctTo, VATAmount, VATExplcode, VATRemark, RequestCode, braCode, null);
        }

        /// <remarks/>
        public void PostToBASIS_With_ChargesAsync(
                    string PrincipalAcctFrom,
                    string PrincipalacctTo,
                    double PrincipalAmount,
                    int PrincipalExplcode,
                    string PrincipalRemark,
                    string CommissionAcctFrom,
                    string CommisionacctTo,
                    double CommissionAmount,
                    int CommissionExplcode,
                    string CommissionRemark,
                    string VATAcctFrom,
                    string VATacctTo,
                    double VATAmount,
                    int VATExplcode,
                    string VATRemark,
                    string RequestCode,
                    string braCode,
                    object userState)
        {
            if ((this.PostToBASIS_With_ChargesOperationCompleted == null))
            {
                this.PostToBASIS_With_ChargesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostToBASIS_With_ChargesOperationCompleted);
            }
            this.InvokeAsync("PostToBASIS_With_Charges", new object[] {
                    PrincipalAcctFrom,
                    PrincipalacctTo,
                    PrincipalAmount,
                    PrincipalExplcode,
                    PrincipalRemark,
                    CommissionAcctFrom,
                    CommisionacctTo,
                    CommissionAmount,
                    CommissionExplcode,
                    CommissionRemark,
                    VATAcctFrom,
                    VATacctTo,
                    VATAmount,
                    VATExplcode,
                    VATRemark,
                    RequestCode,
                    braCode}, this.PostToBASIS_With_ChargesOperationCompleted, userState);
        }

        private void OnPostToBASIS_With_ChargesOperationCompleted(object arg)
        {
            if ((this.PostToBASIS_With_ChargesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostToBASIS_With_ChargesCompleted(this, new PostToBASIS_With_ChargesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Temporary_request", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Temporary_request(string Initiator_Name, string Initiator_Staff_No, string Request_Type, string Relief_Start_Date, string Relief_End_Date, string Relief_Role, string Relief_Branch, string Branch_Code, string Case_ID, string Staff_No_RelievedStaff)
        {
            object[] results = this.Invoke("Temporary_request", new object[] {
                    Initiator_Name,
                    Initiator_Staff_No,
                    Request_Type,
                    Relief_Start_Date,
                    Relief_End_Date,
                    Relief_Role,
                    Relief_Branch,
                    Branch_Code,
                    Case_ID,
                    Staff_No_RelievedStaff});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTemporary_request(string Initiator_Name, string Initiator_Staff_No, string Request_Type, string Relief_Start_Date, string Relief_End_Date, string Relief_Role, string Relief_Branch, string Branch_Code, string Case_ID, string Staff_No_RelievedStaff, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Temporary_request", new object[] {
                    Initiator_Name,
                    Initiator_Staff_No,
                    Request_Type,
                    Relief_Start_Date,
                    Relief_End_Date,
                    Relief_Role,
                    Relief_Branch,
                    Branch_Code,
                    Case_ID,
                    Staff_No_RelievedStaff}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTemporary_request(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void Temporary_requestAsync(string Initiator_Name, string Initiator_Staff_No, string Request_Type, string Relief_Start_Date, string Relief_End_Date, string Relief_Role, string Relief_Branch, string Branch_Code, string Case_ID, string Staff_No_RelievedStaff)
        {
            this.Temporary_requestAsync(Initiator_Name, Initiator_Staff_No, Request_Type, Relief_Start_Date, Relief_End_Date, Relief_Role, Relief_Branch, Branch_Code, Case_ID, Staff_No_RelievedStaff, null);
        }

        /// <remarks/>
        public void Temporary_requestAsync(string Initiator_Name, string Initiator_Staff_No, string Request_Type, string Relief_Start_Date, string Relief_End_Date, string Relief_Role, string Relief_Branch, string Branch_Code, string Case_ID, string Staff_No_RelievedStaff, object userState)
        {
            if ((this.Temporary_requestOperationCompleted == null))
            {
                this.Temporary_requestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTemporary_requestOperationCompleted);
            }
            this.InvokeAsync("Temporary_request", new object[] {
                    Initiator_Name,
                    Initiator_Staff_No,
                    Request_Type,
                    Relief_Start_Date,
                    Relief_End_Date,
                    Relief_Role,
                    Relief_Branch,
                    Branch_Code,
                    Case_ID,
                    Staff_No_RelievedStaff}, this.Temporary_requestOperationCompleted, userState);
        }

        private void OnTemporary_requestOperationCompleted(object arg)
        {
            if ((this.Temporary_requestCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Temporary_requestCompleted(this, new Temporary_requestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReliefExist", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetReliefExist(string Initiator_staff_no)
        {
            object[] results = this.Invoke("GetReliefExist", new object[] {
                    Initiator_staff_no});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetReliefExist(string Initiator_staff_no, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetReliefExist", new object[] {
                    Initiator_staff_no}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetReliefExist(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetReliefExistAsync(string Initiator_staff_no)
        {
            this.GetReliefExistAsync(Initiator_staff_no, null);
        }

        /// <remarks/>
        public void GetReliefExistAsync(string Initiator_staff_no, object userState)
        {
            if ((this.GetReliefExistOperationCompleted == null))
            {
                this.GetReliefExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReliefExistOperationCompleted);
            }
            this.InvokeAsync("GetReliefExist", new object[] {
                    Initiator_staff_no}, this.GetReliefExistOperationCompleted, userState);
        }

        private void OnGetReliefExistOperationCompleted(object arg)
        {
            if ((this.GetReliefExistCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReliefExistCompleted(this, new GetReliefExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateReliefDuty", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateReliefDuty(string Initiator_staff_no)
        {
            object[] results = this.Invoke("UpdateReliefDuty", new object[] {
                    Initiator_staff_no});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateReliefDuty(string Initiator_staff_no, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateReliefDuty", new object[] {
                    Initiator_staff_no}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateReliefDuty(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateReliefDutyAsync(string Initiator_staff_no)
        {
            this.UpdateReliefDutyAsync(Initiator_staff_no, null);
        }

        /// <remarks/>
        public void UpdateReliefDutyAsync(string Initiator_staff_no, object userState)
        {
            if ((this.UpdateReliefDutyOperationCompleted == null))
            {
                this.UpdateReliefDutyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateReliefDutyOperationCompleted);
            }
            this.InvokeAsync("UpdateReliefDuty", new object[] {
                    Initiator_staff_no}, this.UpdateReliefDutyOperationCompleted, userState);
        }

        private void OnUpdateReliefDutyOperationCompleted(object arg)
        {
            if ((this.UpdateReliefDutyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateReliefDutyCompleted(this, new UpdateReliefDutyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/KillMyID", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string KillMyID(int bracode, int tellerid)
        {
            object[] results = this.Invoke("KillMyID", new object[] {
                    bracode,
                    tellerid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginKillMyID(int bracode, int tellerid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("KillMyID", new object[] {
                    bracode,
                    tellerid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndKillMyID(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void KillMyIDAsync(int bracode, int tellerid)
        {
            this.KillMyIDAsync(bracode, tellerid, null);
        }

        /// <remarks/>
        public void KillMyIDAsync(int bracode, int tellerid, object userState)
        {
            if ((this.KillMyIDOperationCompleted == null))
            {
                this.KillMyIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKillMyIDOperationCompleted);
            }
            this.InvokeAsync("KillMyID", new object[] {
                    bracode,
                    tellerid}, this.KillMyIDOperationCompleted, userState);
        }

        private void OnKillMyIDOperationCompleted(object arg)
        {
            if ((this.KillMyIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KillMyIDCompleted(this, new KillMyIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateNewMgr", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateNewMgr(int mgrcode, string mgrname)
        {
            object[] results = this.Invoke("CreateNewMgr", new object[] {
                    mgrcode,
                    mgrname});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateNewMgr(int mgrcode, string mgrname, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateNewMgr", new object[] {
                    mgrcode,
                    mgrname}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateNewMgr(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CreateNewMgrAsync(int mgrcode, string mgrname)
        {
            this.CreateNewMgrAsync(mgrcode, mgrname, null);
        }

        /// <remarks/>
        public void CreateNewMgrAsync(int mgrcode, string mgrname, object userState)
        {
            if ((this.CreateNewMgrOperationCompleted == null))
            {
                this.CreateNewMgrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewMgrOperationCompleted);
            }
            this.InvokeAsync("CreateNewMgr", new object[] {
                    mgrcode,
                    mgrname}, this.CreateNewMgrOperationCompleted, userState);
        }

        private void OnCreateNewMgrOperationCompleted(object arg)
        {
            if ((this.CreateNewMgrCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewMgrCompleted(this, new CreateNewMgrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Removeledrest", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Removeledrest(int led_code, string deb_rest, int tell_id)
        {
            object[] results = this.Invoke("Removeledrest", new object[] {
                    led_code,
                    deb_rest,
                    tell_id});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveledrest(int led_code, string deb_rest, int tell_id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Removeledrest", new object[] {
                    led_code,
                    deb_rest,
                    tell_id}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRemoveledrest(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RemoveledrestAsync(int led_code, string deb_rest, int tell_id)
        {
            this.RemoveledrestAsync(led_code, deb_rest, tell_id, null);
        }

        /// <remarks/>
        public void RemoveledrestAsync(int led_code, string deb_rest, int tell_id, object userState)
        {
            if ((this.RemoveledrestOperationCompleted == null))
            {
                this.RemoveledrestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveledrestOperationCompleted);
            }
            this.InvokeAsync("Removeledrest", new object[] {
                    led_code,
                    deb_rest,
                    tell_id}, this.RemoveledrestOperationCompleted, userState);
        }

        private void OnRemoveledrestOperationCompleted(object arg)
        {
            if ((this.RemoveledrestCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveledrestCompleted(this, new RemoveledrestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Openextertrans", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Openextertrans(int led_code, string deb_rest, int tell_id)
        {
            object[] results = this.Invoke("Openextertrans", new object[] {
                    led_code,
                    deb_rest,
                    tell_id});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginOpenextertrans(int led_code, string deb_rest, int tell_id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Openextertrans", new object[] {
                    led_code,
                    deb_rest,
                    tell_id}, callback, asyncState);
        }

        /// <remarks/>
        public string EndOpenextertrans(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void OpenextertransAsync(int led_code, string deb_rest, int tell_id)
        {
            this.OpenextertransAsync(led_code, deb_rest, tell_id, null);
        }

        /// <remarks/>
        public void OpenextertransAsync(int led_code, string deb_rest, int tell_id, object userState)
        {
            if ((this.OpenextertransOperationCompleted == null))
            {
                this.OpenextertransOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenextertransOperationCompleted);
            }
            this.InvokeAsync("Openextertrans", new object[] {
                    led_code,
                    deb_rest,
                    tell_id}, this.OpenextertransOperationCompleted, userState);
        }

        private void OnOpenextertransOperationCompleted(object arg)
        {
            if ((this.OpenextertransCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenextertransCompleted(this, new OpenextertransCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertLedgAmendRecord", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertLedgAmendRecord(int led_code, string led_name, int teller_id, int status, int Req_type)
        {
            object[] results = this.Invoke("InsertLedgAmendRecord", new object[] {
                    led_code,
                    led_name,
                    teller_id,
                    status,
                    Req_type});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertLedgAmendRecord(int led_code, string led_name, int teller_id, int status, int Req_type, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InsertLedgAmendRecord", new object[] {
                    led_code,
                    led_name,
                    teller_id,
                    status,
                    Req_type}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInsertLedgAmendRecord(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertLedgAmendRecordAsync(int led_code, string led_name, int teller_id, int status, int Req_type)
        {
            this.InsertLedgAmendRecordAsync(led_code, led_name, teller_id, status, Req_type, null);
        }

        /// <remarks/>
        public void InsertLedgAmendRecordAsync(int led_code, string led_name, int teller_id, int status, int Req_type, object userState)
        {
            if ((this.InsertLedgAmendRecordOperationCompleted == null))
            {
                this.InsertLedgAmendRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertLedgAmendRecordOperationCompleted);
            }
            this.InvokeAsync("InsertLedgAmendRecord", new object[] {
                    led_code,
                    led_name,
                    teller_id,
                    status,
                    Req_type}, this.InsertLedgAmendRecordOperationCompleted, userState);
        }

        private void OnInsertLedgAmendRecordOperationCompleted(object arg)
        {
            if ((this.InsertLedgAmendRecordCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertLedgAmendRecordCompleted(this, new InsertLedgAmendRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertInto_EBillspayMerchant", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertInto_EBillspayMerchant(string acc_num, string acc_name, string trans_acc)
        {
            object[] results = this.Invoke("InsertInto_EBillspayMerchant", new object[] {
                    acc_num,
                    acc_name,
                    trans_acc});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertInto_EBillspayMerchant(string acc_num, string acc_name, string trans_acc, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InsertInto_EBillspayMerchant", new object[] {
                    acc_num,
                    acc_name,
                    trans_acc}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInsertInto_EBillspayMerchant(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertInto_EBillspayMerchantAsync(string acc_num, string acc_name, string trans_acc)
        {
            this.InsertInto_EBillspayMerchantAsync(acc_num, acc_name, trans_acc, null);
        }

        /// <remarks/>
        public void InsertInto_EBillspayMerchantAsync(string acc_num, string acc_name, string trans_acc, object userState)
        {
            if ((this.InsertInto_EBillspayMerchantOperationCompleted == null))
            {
                this.InsertInto_EBillspayMerchantOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertInto_EBillspayMerchantOperationCompleted);
            }
            this.InvokeAsync("InsertInto_EBillspayMerchant", new object[] {
                    acc_num,
                    acc_name,
                    trans_acc}, this.InsertInto_EBillspayMerchantOperationCompleted, userState);
        }

        private void OnInsertInto_EBillspayMerchantOperationCompleted(object arg)
        {
            if ((this.InsertInto_EBillspayMerchantCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertInto_EBillspayMerchantCompleted(this, new InsertInto_EBillspayMerchantCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertAppVersion", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertAppVersion(string Channel, string Code, string AppType, string BaseVersion, string CurrentVersion, string Owner)
        {
            object[] results = this.Invoke("InsertAppVersion", new object[] {
                    Channel,
                    Code,
                    AppType,
                    BaseVersion,
                    CurrentVersion,
                    Owner});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertAppVersion(string Channel, string Code, string AppType, string BaseVersion, string CurrentVersion, string Owner, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InsertAppVersion", new object[] {
                    Channel,
                    Code,
                    AppType,
                    BaseVersion,
                    CurrentVersion,
                    Owner}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInsertAppVersion(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertAppVersionAsync(string Channel, string Code, string AppType, string BaseVersion, string CurrentVersion, string Owner)
        {
            this.InsertAppVersionAsync(Channel, Code, AppType, BaseVersion, CurrentVersion, Owner, null);
        }

        /// <remarks/>
        public void InsertAppVersionAsync(string Channel, string Code, string AppType, string BaseVersion, string CurrentVersion, string Owner, object userState)
        {
            if ((this.InsertAppVersionOperationCompleted == null))
            {
                this.InsertAppVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertAppVersionOperationCompleted);
            }
            this.InvokeAsync("InsertAppVersion", new object[] {
                    Channel,
                    Code,
                    AppType,
                    BaseVersion,
                    CurrentVersion,
                    Owner}, this.InsertAppVersionOperationCompleted, userState);
        }

        private void OnInsertAppVersionOperationCompleted(object arg)
        {
            if ((this.InsertAppVersionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertAppVersionCompleted(this, new InsertAppVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateNewTeam", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateNewTeam(int teamno, string leadername, int actdiv, int subdiv, string telephone, string fax, string email, string teamname)
        {
            object[] results = this.Invoke("CreateNewTeam", new object[] {
                    teamno,
                    leadername,
                    actdiv,
                    subdiv,
                    telephone,
                    fax,
                    email,
                    teamname});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateNewTeam(int teamno, string leadername, int actdiv, int subdiv, string telephone, string fax, string email, string teamname, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateNewTeam", new object[] {
                    teamno,
                    leadername,
                    actdiv,
                    subdiv,
                    telephone,
                    fax,
                    email,
                    teamname}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateNewTeam(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CreateNewTeamAsync(int teamno, string leadername, int actdiv, int subdiv, string telephone, string fax, string email, string teamname)
        {
            this.CreateNewTeamAsync(teamno, leadername, actdiv, subdiv, telephone, fax, email, teamname, null);
        }

        /// <remarks/>
        public void CreateNewTeamAsync(int teamno, string leadername, int actdiv, int subdiv, string telephone, string fax, string email, string teamname, object userState)
        {
            if ((this.CreateNewTeamOperationCompleted == null))
            {
                this.CreateNewTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewTeamOperationCompleted);
            }
            this.InvokeAsync("CreateNewTeam", new object[] {
                    teamno,
                    leadername,
                    actdiv,
                    subdiv,
                    telephone,
                    fax,
                    email,
                    teamname}, this.CreateNewTeamOperationCompleted, userState);
        }

        private void OnCreateNewTeamOperationCompleted(object arg)
        {
            if ((this.CreateNewTeamCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewTeamCompleted(this, new CreateNewTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CustomerUpdate", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerUpdate(
                    int bra,
                    int cus,
                    int marital,
                    int gender,
                    string childname,
                    string childdate,
                    int indcorp,
                    int idtype,
                    int titlecode,
                    string mobnum,
                    string email,
                    string telnum1,
                    string telnum2,
                    string addr1,
                    string addr2,
                    int postcode,
                    int citycode,
                    string birDate,
                    int lga,
                    int statecode,
                    string birthplace,
                    string mothname,
                    int nationality,
                    int acctmgr,
                    int deptype)
        {
            object[] results = this.Invoke("CustomerUpdate", new object[] {
                    bra,
                    cus,
                    marital,
                    gender,
                    childname,
                    childdate,
                    indcorp,
                    idtype,
                    titlecode,
                    mobnum,
                    email,
                    telnum1,
                    telnum2,
                    addr1,
                    addr2,
                    postcode,
                    citycode,
                    birDate,
                    lga,
                    statecode,
                    birthplace,
                    mothname,
                    nationality,
                    acctmgr,
                    deptype});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCustomerUpdate(
                    int bra,
                    int cus,
                    int marital,
                    int gender,
                    string childname,
                    string childdate,
                    int indcorp,
                    int idtype,
                    int titlecode,
                    string mobnum,
                    string email,
                    string telnum1,
                    string telnum2,
                    string addr1,
                    string addr2,
                    int postcode,
                    int citycode,
                    string birDate,
                    int lga,
                    int statecode,
                    string birthplace,
                    string mothname,
                    int nationality,
                    int acctmgr,
                    int deptype,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("CustomerUpdate", new object[] {
                    bra,
                    cus,
                    marital,
                    gender,
                    childname,
                    childdate,
                    indcorp,
                    idtype,
                    titlecode,
                    mobnum,
                    email,
                    telnum1,
                    telnum2,
                    addr1,
                    addr2,
                    postcode,
                    citycode,
                    birDate,
                    lga,
                    statecode,
                    birthplace,
                    mothname,
                    nationality,
                    acctmgr,
                    deptype}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCustomerUpdate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CustomerUpdateAsync(
                    int bra,
                    int cus,
                    int marital,
                    int gender,
                    string childname,
                    string childdate,
                    int indcorp,
                    int idtype,
                    int titlecode,
                    string mobnum,
                    string email,
                    string telnum1,
                    string telnum2,
                    string addr1,
                    string addr2,
                    int postcode,
                    int citycode,
                    string birDate,
                    int lga,
                    int statecode,
                    string birthplace,
                    string mothname,
                    int nationality,
                    int acctmgr,
                    int deptype)
        {
            this.CustomerUpdateAsync(bra, cus, marital, gender, childname, childdate, indcorp, idtype, titlecode, mobnum, email, telnum1, telnum2, addr1, addr2, postcode, citycode, birDate, lga, statecode, birthplace, mothname, nationality, acctmgr, deptype, null);
        }

        /// <remarks/>
        public void CustomerUpdateAsync(
                    int bra,
                    int cus,
                    int marital,
                    int gender,
                    string childname,
                    string childdate,
                    int indcorp,
                    int idtype,
                    int titlecode,
                    string mobnum,
                    string email,
                    string telnum1,
                    string telnum2,
                    string addr1,
                    string addr2,
                    int postcode,
                    int citycode,
                    string birDate,
                    int lga,
                    int statecode,
                    string birthplace,
                    string mothname,
                    int nationality,
                    int acctmgr,
                    int deptype,
                    object userState)
        {
            if ((this.CustomerUpdateOperationCompleted == null))
            {
                this.CustomerUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerUpdateOperationCompleted);
            }
            this.InvokeAsync("CustomerUpdate", new object[] {
                    bra,
                    cus,
                    marital,
                    gender,
                    childname,
                    childdate,
                    indcorp,
                    idtype,
                    titlecode,
                    mobnum,
                    email,
                    telnum1,
                    telnum2,
                    addr1,
                    addr2,
                    postcode,
                    citycode,
                    birDate,
                    lga,
                    statecode,
                    birthplace,
                    mothname,
                    nationality,
                    acctmgr,
                    deptype}, this.CustomerUpdateOperationCompleted, userState);
        }

        private void OnCustomerUpdateOperationCompleted(object arg)
        {
            if ((this.CustomerUpdateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerUpdateCompleted(this, new CustomerUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeAcctCha", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangeAcctCha(
                    int bra,
                    int cus,
                    int cur,
                    int led,
                    int sub,
                    int chgtyp,
                    int chgdet,
                    float Period,
                    float chg_amt,
                    float upperband_val,
                    float chg_per,
                    float deb_tralimit,
                    float cre_tralimit,
                    int min_tralimit,
                    int cre_ledcode,
                    float min_chgper,
                    float max_chgper,
                    float min_chgamt,
                    float max_chgamt,
                    float min_tra_amt,
                    int chg_flag,
                    float add_chg_amt,
                    int vat_flag,
                    float vat_per,
                    string cha_matdate,
                    int operator_type,
                    int tellerid)
        {
            object[] results = this.Invoke("ChangeAcctCha", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    sub,
                    chgtyp,
                    chgdet,
                    Period,
                    chg_amt,
                    upperband_val,
                    chg_per,
                    deb_tralimit,
                    cre_tralimit,
                    min_tralimit,
                    cre_ledcode,
                    min_chgper,
                    max_chgper,
                    min_chgamt,
                    max_chgamt,
                    min_tra_amt,
                    chg_flag,
                    add_chg_amt,
                    vat_flag,
                    vat_per,
                    cha_matdate,
                    operator_type,
                    tellerid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginChangeAcctCha(
                    int bra,
                    int cus,
                    int cur,
                    int led,
                    int sub,
                    int chgtyp,
                    int chgdet,
                    float Period,
                    float chg_amt,
                    float upperband_val,
                    float chg_per,
                    float deb_tralimit,
                    float cre_tralimit,
                    int min_tralimit,
                    int cre_ledcode,
                    float min_chgper,
                    float max_chgper,
                    float min_chgamt,
                    float max_chgamt,
                    float min_tra_amt,
                    int chg_flag,
                    float add_chg_amt,
                    int vat_flag,
                    float vat_per,
                    string cha_matdate,
                    int operator_type,
                    int tellerid,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("ChangeAcctCha", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    sub,
                    chgtyp,
                    chgdet,
                    Period,
                    chg_amt,
                    upperband_val,
                    chg_per,
                    deb_tralimit,
                    cre_tralimit,
                    min_tralimit,
                    cre_ledcode,
                    min_chgper,
                    max_chgper,
                    min_chgamt,
                    max_chgamt,
                    min_tra_amt,
                    chg_flag,
                    add_chg_amt,
                    vat_flag,
                    vat_per,
                    cha_matdate,
                    operator_type,
                    tellerid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndChangeAcctCha(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ChangeAcctChaAsync(
                    int bra,
                    int cus,
                    int cur,
                    int led,
                    int sub,
                    int chgtyp,
                    int chgdet,
                    float Period,
                    float chg_amt,
                    float upperband_val,
                    float chg_per,
                    float deb_tralimit,
                    float cre_tralimit,
                    int min_tralimit,
                    int cre_ledcode,
                    float min_chgper,
                    float max_chgper,
                    float min_chgamt,
                    float max_chgamt,
                    float min_tra_amt,
                    int chg_flag,
                    float add_chg_amt,
                    int vat_flag,
                    float vat_per,
                    string cha_matdate,
                    int operator_type,
                    int tellerid)
        {
            this.ChangeAcctChaAsync(bra, cus, cur, led, sub, chgtyp, chgdet, Period, chg_amt, upperband_val, chg_per, deb_tralimit, cre_tralimit, min_tralimit, cre_ledcode, min_chgper, max_chgper, min_chgamt, max_chgamt, min_tra_amt, chg_flag, add_chg_amt, vat_flag, vat_per, cha_matdate, operator_type, tellerid, null);
        }

        /// <remarks/>
        public void ChangeAcctChaAsync(
                    int bra,
                    int cus,
                    int cur,
                    int led,
                    int sub,
                    int chgtyp,
                    int chgdet,
                    float Period,
                    float chg_amt,
                    float upperband_val,
                    float chg_per,
                    float deb_tralimit,
                    float cre_tralimit,
                    int min_tralimit,
                    int cre_ledcode,
                    float min_chgper,
                    float max_chgper,
                    float min_chgamt,
                    float max_chgamt,
                    float min_tra_amt,
                    int chg_flag,
                    float add_chg_amt,
                    int vat_flag,
                    float vat_per,
                    string cha_matdate,
                    int operator_type,
                    int tellerid,
                    object userState)
        {
            if ((this.ChangeAcctChaOperationCompleted == null))
            {
                this.ChangeAcctChaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeAcctChaOperationCompleted);
            }
            this.InvokeAsync("ChangeAcctCha", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    sub,
                    chgtyp,
                    chgdet,
                    Period,
                    chg_amt,
                    upperband_val,
                    chg_per,
                    deb_tralimit,
                    cre_tralimit,
                    min_tralimit,
                    cre_ledcode,
                    min_chgper,
                    max_chgper,
                    min_chgamt,
                    max_chgamt,
                    min_tra_amt,
                    chg_flag,
                    add_chg_amt,
                    vat_flag,
                    vat_per,
                    cha_matdate,
                    operator_type,
                    tellerid}, this.ChangeAcctChaOperationCompleted, userState);
        }

        private void OnChangeAcctChaOperationCompleted(object arg)
        {
            if ((this.ChangeAcctChaCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeAcctChaCompleted(this, new ChangeAcctChaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddEoneRole", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddEoneRole(string role_desc)
        {
            object[] results = this.Invoke("AddEoneRole", new object[] {
                    role_desc});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddEoneRole(string role_desc, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddEoneRole", new object[] {
                    role_desc}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAddEoneRole(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AddEoneRoleAsync(string role_desc)
        {
            this.AddEoneRoleAsync(role_desc, null);
        }

        /// <remarks/>
        public void AddEoneRoleAsync(string role_desc, object userState)
        {
            if ((this.AddEoneRoleOperationCompleted == null))
            {
                this.AddEoneRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEoneRoleOperationCompleted);
            }
            this.InvokeAsync("AddEoneRole", new object[] {
                    role_desc}, this.AddEoneRoleOperationCompleted, userState);
        }

        private void OnAddEoneRoleOperationCompleted(object arg)
        {
            if ((this.AddEoneRoleCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEoneRoleCompleted(this, new AddEoneRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddBasisRole", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddBasisRole(string role_desc)
        {
            object[] results = this.Invoke("AddBasisRole", new object[] {
                    role_desc});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddBasisRole(string role_desc, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddBasisRole", new object[] {
                    role_desc}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAddBasisRole(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AddBasisRoleAsync(string role_desc)
        {
            this.AddBasisRoleAsync(role_desc, null);
        }

        /// <remarks/>
        public void AddBasisRoleAsync(string role_desc, object userState)
        {
            if ((this.AddBasisRoleOperationCompleted == null))
            {
                this.AddBasisRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddBasisRoleOperationCompleted);
            }
            this.InvokeAsync("AddBasisRole", new object[] {
                    role_desc}, this.AddBasisRoleOperationCompleted, userState);
        }

        private void OnAddBasisRoleOperationCompleted(object arg)
        {
            if ((this.AddBasisRoleCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddBasisRoleCompleted(this, new AddBasisRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewTeller", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddNewTeller(int BASISID, string Username, string password, int branch_code, string roleid, string UpdateFlag)
        {
            object[] results = this.Invoke("AddNewTeller", new object[] {
                    BASISID,
                    Username,
                    password,
                    branch_code,
                    roleid,
                    UpdateFlag});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddNewTeller(int BASISID, string Username, string password, int branch_code, string roleid, string UpdateFlag, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddNewTeller", new object[] {
                    BASISID,
                    Username,
                    password,
                    branch_code,
                    roleid,
                    UpdateFlag}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAddNewTeller(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AddNewTellerAsync(int BASISID, string Username, string password, int branch_code, string roleid, string UpdateFlag)
        {
            this.AddNewTellerAsync(BASISID, Username, password, branch_code, roleid, UpdateFlag, null);
        }

        /// <remarks/>
        public void AddNewTellerAsync(int BASISID, string Username, string password, int branch_code, string roleid, string UpdateFlag, object userState)
        {
            if ((this.AddNewTellerOperationCompleted == null))
            {
                this.AddNewTellerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNewTellerOperationCompleted);
            }
            this.InvokeAsync("AddNewTeller", new object[] {
                    BASISID,
                    Username,
                    password,
                    branch_code,
                    roleid,
                    UpdateFlag}, this.AddNewTellerOperationCompleted, userState);
        }

        private void OnAddNewTellerOperationCompleted(object arg)
        {
            if ((this.AddNewTellerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNewTellerCompleted(this, new AddNewTellerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CustBlacklistSearch", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustBlacklistSearch(string cusname)
        {
            object[] results = this.Invoke("CustBlacklistSearch", new object[] {
                    cusname});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCustBlacklistSearch(string cusname, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CustBlacklistSearch", new object[] {
                    cusname}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCustBlacklistSearch(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CustBlacklistSearchAsync(string cusname)
        {
            this.CustBlacklistSearchAsync(cusname, null);
        }

        /// <remarks/>
        public void CustBlacklistSearchAsync(string cusname, object userState)
        {
            if ((this.CustBlacklistSearchOperationCompleted == null))
            {
                this.CustBlacklistSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustBlacklistSearchOperationCompleted);
            }
            this.InvokeAsync("CustBlacklistSearch", new object[] {
                    cusname}, this.CustBlacklistSearchOperationCompleted, userState);
        }

        private void OnCustBlacklistSearchOperationCompleted(object arg)
        {
            if ((this.CustBlacklistSearchCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustBlacklistSearchCompleted(this, new CustBlacklistSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCOTDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCOTDetails(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            object[] results = this.Invoke("GetCOTDetails", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCOTDetails(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCOTDetails", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetCOTDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetCOTDetailsAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            this.GetCOTDetailsAsync(bracode, cusnum, curcode, ledcode, subacctcode, null);
        }

        /// <remarks/>
        public void GetCOTDetailsAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, object userState)
        {
            if ((this.GetCOTDetailsOperationCompleted == null))
            {
                this.GetCOTDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCOTDetailsOperationCompleted);
            }
            this.InvokeAsync("GetCOTDetails", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, this.GetCOTDetailsOperationCompleted, userState);
        }

        private void OnGetCOTDetailsOperationCompleted(object arg)
        {
            if ((this.GetCOTDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCOTDetailsCompleted(this, new GetCOTDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchBASISUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchBASISUser(string str, string branch_code)
        {
            object[] results = this.Invoke("SearchBASISUser", new object[] {
                    str,
                    branch_code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSearchBASISUser(string str, string branch_code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SearchBASISUser", new object[] {
                    str,
                    branch_code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSearchBASISUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SearchBASISUserAsync(string str, string branch_code)
        {
            this.SearchBASISUserAsync(str, branch_code, null);
        }

        /// <remarks/>
        public void SearchBASISUserAsync(string str, string branch_code, object userState)
        {
            if ((this.SearchBASISUserOperationCompleted == null))
            {
                this.SearchBASISUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchBASISUserOperationCompleted);
            }
            this.InvokeAsync("SearchBASISUser", new object[] {
                    str,
                    branch_code}, this.SearchBASISUserOperationCompleted, userState);
        }

        private void OnSearchBASISUserOperationCompleted(object arg)
        {
            if ((this.SearchBASISUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchBASISUserCompleted(this, new SearchBASISUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AnalyzeFx", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AnalyzeFx(string acctno, decimal transfer_amt, System.DateTime anal_date)
        {
            object[] results = this.Invoke("AnalyzeFx", new object[] {
                    acctno,
                    transfer_amt,
                    anal_date});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAnalyzeFx(string acctno, decimal transfer_amt, System.DateTime anal_date, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AnalyzeFx", new object[] {
                    acctno,
                    transfer_amt,
                    anal_date}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAnalyzeFx(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AnalyzeFxAsync(string acctno, decimal transfer_amt, System.DateTime anal_date)
        {
            this.AnalyzeFxAsync(acctno, transfer_amt, anal_date, null);
        }

        /// <remarks/>
        public void AnalyzeFxAsync(string acctno, decimal transfer_amt, System.DateTime anal_date, object userState)
        {
            if ((this.AnalyzeFxOperationCompleted == null))
            {
                this.AnalyzeFxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAnalyzeFxOperationCompleted);
            }
            this.InvokeAsync("AnalyzeFx", new object[] {
                    acctno,
                    transfer_amt,
                    anal_date}, this.AnalyzeFxOperationCompleted, userState);
        }

        private void OnAnalyzeFxOperationCompleted(object arg)
        {
            if ((this.AnalyzeFxCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AnalyzeFxCompleted(this, new AnalyzeFxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/submitFXRequestToBASIS", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string submitFXRequestToBASIS(
                    string uniqueref,
                    string reqappcode,
                    string transferbracode,
                    string cusbracode,
                    string cusnum,
                    string curcode,
                    string ledcode,
                    string subacctcode,
                    string trfcurcode,
                    double traamount,
                    string purpose,
                    string beneacctnum,
                    string benename,
                    string beneaddr,
                    string benecountry,
                    string acctforcharges,
                    string benebankname,
                    string benebankBIC,
                    string acctforswift,
                    string remarks,
                    string trfremarks,
                    string intermediaryBIC,
                    string intermediarybankaddress,
                    string intermediarybankname)
        {
            object[] results = this.Invoke("submitFXRequestToBASIS", new object[] {
                    uniqueref,
                    reqappcode,
                    transferbracode,
                    cusbracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    trfcurcode,
                    traamount,
                    purpose,
                    beneacctnum,
                    benename,
                    beneaddr,
                    benecountry,
                    acctforcharges,
                    benebankname,
                    benebankBIC,
                    acctforswift,
                    remarks,
                    trfremarks,
                    intermediaryBIC,
                    intermediarybankaddress,
                    intermediarybankname});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginsubmitFXRequestToBASIS(
                    string uniqueref,
                    string reqappcode,
                    string transferbracode,
                    string cusbracode,
                    string cusnum,
                    string curcode,
                    string ledcode,
                    string subacctcode,
                    string trfcurcode,
                    double traamount,
                    string purpose,
                    string beneacctnum,
                    string benename,
                    string beneaddr,
                    string benecountry,
                    string acctforcharges,
                    string benebankname,
                    string benebankBIC,
                    string acctforswift,
                    string remarks,
                    string trfremarks,
                    string intermediaryBIC,
                    string intermediarybankaddress,
                    string intermediarybankname,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("submitFXRequestToBASIS", new object[] {
                    uniqueref,
                    reqappcode,
                    transferbracode,
                    cusbracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    trfcurcode,
                    traamount,
                    purpose,
                    beneacctnum,
                    benename,
                    beneaddr,
                    benecountry,
                    acctforcharges,
                    benebankname,
                    benebankBIC,
                    acctforswift,
                    remarks,
                    trfremarks,
                    intermediaryBIC,
                    intermediarybankaddress,
                    intermediarybankname}, callback, asyncState);
        }

        /// <remarks/>
        public string EndsubmitFXRequestToBASIS(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void submitFXRequestToBASISAsync(
                    string uniqueref,
                    string reqappcode,
                    string transferbracode,
                    string cusbracode,
                    string cusnum,
                    string curcode,
                    string ledcode,
                    string subacctcode,
                    string trfcurcode,
                    double traamount,
                    string purpose,
                    string beneacctnum,
                    string benename,
                    string beneaddr,
                    string benecountry,
                    string acctforcharges,
                    string benebankname,
                    string benebankBIC,
                    string acctforswift,
                    string remarks,
                    string trfremarks,
                    string intermediaryBIC,
                    string intermediarybankaddress,
                    string intermediarybankname)
        {
            this.submitFXRequestToBASISAsync(uniqueref, reqappcode, transferbracode, cusbracode, cusnum, curcode, ledcode, subacctcode, trfcurcode, traamount, purpose, beneacctnum, benename, beneaddr, benecountry, acctforcharges, benebankname, benebankBIC, acctforswift, remarks, trfremarks, intermediaryBIC, intermediarybankaddress, intermediarybankname, null);
        }

        /// <remarks/>
        public void submitFXRequestToBASISAsync(
                    string uniqueref,
                    string reqappcode,
                    string transferbracode,
                    string cusbracode,
                    string cusnum,
                    string curcode,
                    string ledcode,
                    string subacctcode,
                    string trfcurcode,
                    double traamount,
                    string purpose,
                    string beneacctnum,
                    string benename,
                    string beneaddr,
                    string benecountry,
                    string acctforcharges,
                    string benebankname,
                    string benebankBIC,
                    string acctforswift,
                    string remarks,
                    string trfremarks,
                    string intermediaryBIC,
                    string intermediarybankaddress,
                    string intermediarybankname,
                    object userState)
        {
            if ((this.submitFXRequestToBASISOperationCompleted == null))
            {
                this.submitFXRequestToBASISOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsubmitFXRequestToBASISOperationCompleted);
            }
            this.InvokeAsync("submitFXRequestToBASIS", new object[] {
                    uniqueref,
                    reqappcode,
                    transferbracode,
                    cusbracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    trfcurcode,
                    traamount,
                    purpose,
                    beneacctnum,
                    benename,
                    beneaddr,
                    benecountry,
                    acctforcharges,
                    benebankname,
                    benebankBIC,
                    acctforswift,
                    remarks,
                    trfremarks,
                    intermediaryBIC,
                    intermediarybankaddress,
                    intermediarybankname}, this.submitFXRequestToBASISOperationCompleted, userState);
        }

        private void OnsubmitFXRequestToBASISOperationCompleted(object arg)
        {
            if ((this.submitFXRequestToBASISCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.submitFXRequestToBASISCompleted(this, new submitFXRequestToBASISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteFXRequest", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string deleteFXRequest(string uniqueref)
        {
            object[] results = this.Invoke("deleteFXRequest", new object[] {
                    uniqueref});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegindeleteFXRequest(string uniqueref, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("deleteFXRequest", new object[] {
                    uniqueref}, callback, asyncState);
        }

        /// <remarks/>
        public string EnddeleteFXRequest(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void deleteFXRequestAsync(string uniqueref)
        {
            this.deleteFXRequestAsync(uniqueref, null);
        }

        /// <remarks/>
        public void deleteFXRequestAsync(string uniqueref, object userState)
        {
            if ((this.deleteFXRequestOperationCompleted == null))
            {
                this.deleteFXRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteFXRequestOperationCompleted);
            }
            this.InvokeAsync("deleteFXRequest", new object[] {
                    uniqueref}, this.deleteFXRequestOperationCompleted, userState);
        }

        private void OndeleteFXRequestOperationCompleted(object arg)
        {
            if ((this.deleteFXRequestCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteFXRequestCompleted(this, new deleteFXRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getFXRequestStatus", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getFXRequestStatus(string uniqueref)
        {
            object[] results = this.Invoke("getFXRequestStatus", new object[] {
                    uniqueref});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetFXRequestStatus(string uniqueref, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getFXRequestStatus", new object[] {
                    uniqueref}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetFXRequestStatus(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getFXRequestStatusAsync(string uniqueref)
        {
            this.getFXRequestStatusAsync(uniqueref, null);
        }

        /// <remarks/>
        public void getFXRequestStatusAsync(string uniqueref, object userState)
        {
            if ((this.getFXRequestStatusOperationCompleted == null))
            {
                this.getFXRequestStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFXRequestStatusOperationCompleted);
            }
            this.InvokeAsync("getFXRequestStatus", new object[] {
                    uniqueref}, this.getFXRequestStatusOperationCompleted, userState);
        }

        private void OngetFXRequestStatusOperationCompleted(object arg)
        {
            if ((this.getFXRequestStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFXRequestStatusCompleted(this, new getFXRequestStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidatePEP", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidatePEP(string Name)
        {
            object[] results = this.Invoke("ValidatePEP", new object[] {
                    Name});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginValidatePEP(string Name, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ValidatePEP", new object[] {
                    Name}, callback, asyncState);
        }

        /// <remarks/>
        public string EndValidatePEP(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ValidatePEPAsync(string Name)
        {
            this.ValidatePEPAsync(Name, null);
        }

        /// <remarks/>
        public void ValidatePEPAsync(string Name, object userState)
        {
            if ((this.ValidatePEPOperationCompleted == null))
            {
                this.ValidatePEPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidatePEPOperationCompleted);
            }
            this.InvokeAsync("ValidatePEP", new object[] {
                    Name}, this.ValidatePEPOperationCompleted, userState);
        }

        private void OnValidatePEPOperationCompleted(object arg)
        {
            if ((this.ValidatePEPCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidatePEPCompleted(this, new ValidatePEPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateTokenSerial", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateTokenSerial(string tokenserial)
        {
            object[] results = this.Invoke("ValidateTokenSerial", new object[] {
                    tokenserial});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginValidateTokenSerial(string tokenserial, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ValidateTokenSerial", new object[] {
                    tokenserial}, callback, asyncState);
        }

        /// <remarks/>
        public string EndValidateTokenSerial(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ValidateTokenSerialAsync(string tokenserial)
        {
            this.ValidateTokenSerialAsync(tokenserial, null);
        }

        /// <remarks/>
        public void ValidateTokenSerialAsync(string tokenserial, object userState)
        {
            if ((this.ValidateTokenSerialOperationCompleted == null))
            {
                this.ValidateTokenSerialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateTokenSerialOperationCompleted);
            }
            this.InvokeAsync("ValidateTokenSerial", new object[] {
                    tokenserial}, this.ValidateTokenSerialOperationCompleted, userState);
        }

        private void OnValidateTokenSerialOperationCompleted(object arg)
        {
            if ((this.ValidateTokenSerialCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateTokenSerialCompleted(this, new ValidateTokenSerialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateTokenSerialForStaff", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateTokenSerialForStaff(string tokenserial, string userid)
        {
            object[] results = this.Invoke("ValidateTokenSerialForStaff", new object[] {
                    tokenserial,
                    userid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginValidateTokenSerialForStaff(string tokenserial, string userid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ValidateTokenSerialForStaff", new object[] {
                    tokenserial,
                    userid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndValidateTokenSerialForStaff(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ValidateTokenSerialForStaffAsync(string tokenserial, string userid)
        {
            this.ValidateTokenSerialForStaffAsync(tokenserial, userid, null);
        }

        /// <remarks/>
        public void ValidateTokenSerialForStaffAsync(string tokenserial, string userid, object userState)
        {
            if ((this.ValidateTokenSerialForStaffOperationCompleted == null))
            {
                this.ValidateTokenSerialForStaffOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateTokenSerialForStaffOperationCompleted);
            }
            this.InvokeAsync("ValidateTokenSerialForStaff", new object[] {
                    tokenserial,
                    userid}, this.ValidateTokenSerialForStaffOperationCompleted, userState);
        }

        private void OnValidateTokenSerialForStaffOperationCompleted(object arg)
        {
            if ((this.ValidateTokenSerialForStaffCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateTokenSerialForStaffCompleted(this, new ValidateTokenSerialForStaffCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountStatusnew", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAccountStatusnew(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code)
        {
            object[] results = this.Invoke("GetAccountStatusnew", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAccountStatusnew(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAccountStatusnew", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAccountStatusnew(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAccountStatusnewAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code)
        {
            this.GetAccountStatusnewAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, null);
        }

        /// <remarks/>
        public void GetAccountStatusnewAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, object userState)
        {
            if ((this.GetAccountStatusnewOperationCompleted == null))
            {
                this.GetAccountStatusnewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountStatusnewOperationCompleted);
            }
            this.InvokeAsync("GetAccountStatusnew", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, this.GetAccountStatusnewOperationCompleted, userState);
        }

        private void OnGetAccountStatusnewOperationCompleted(object arg)
        {
            if ((this.GetAccountStatusnewCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountStatusnewCompleted(this, new GetAccountStatusnewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImageToByteArray", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImageToByteArray([System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")] byte[] imagefilePath, int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, string cus_name, int tellerid, string comments)
        {
            object[] results = this.Invoke("ImageToByteArray", new object[] {
                    imagefilePath,
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    cus_name,
                    tellerid,
                    comments});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginImageToByteArray(byte[] imagefilePath, int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, string cus_name, int tellerid, string comments, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ImageToByteArray", new object[] {
                    imagefilePath,
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    cus_name,
                    tellerid,
                    comments}, callback, asyncState);
        }

        /// <remarks/>
        public string EndImageToByteArray(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ImageToByteArrayAsync(byte[] imagefilePath, int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, string cus_name, int tellerid, string comments)
        {
            this.ImageToByteArrayAsync(imagefilePath, bra_code, cus_num, cur_code, led_code, sub_acct_code, cus_name, tellerid, comments, null);
        }

        /// <remarks/>
        public void ImageToByteArrayAsync(byte[] imagefilePath, int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, string cus_name, int tellerid, string comments, object userState)
        {
            if ((this.ImageToByteArrayOperationCompleted == null))
            {
                this.ImageToByteArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImageToByteArrayOperationCompleted);
            }
            this.InvokeAsync("ImageToByteArray", new object[] {
                    imagefilePath,
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    cus_name,
                    tellerid,
                    comments}, this.ImageToByteArrayOperationCompleted, userState);
        }

        private void OnImageToByteArrayOperationCompleted(object arg)
        {
            if ((this.ImageToByteArrayCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImageToByteArrayCompleted(this, new ImageToByteArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountStatus", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAccountStatus(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            object[] results = this.Invoke("GetAccountStatus", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAccountStatus(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAccountStatus", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAccountStatus(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAccountStatusAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            this.GetAccountStatusAsync(bracode, cusnum, curcode, ledcode, subacctcode, null);
        }

        /// <remarks/>
        public void GetAccountStatusAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, object userState)
        {
            if ((this.GetAccountStatusOperationCompleted == null))
            {
                this.GetAccountStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountStatusOperationCompleted);
            }
            this.InvokeAsync("GetAccountStatus", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, this.GetAccountStatusOperationCompleted, userState);
        }

        private void OnGetAccountStatusOperationCompleted(object arg)
        {
            if ((this.GetAccountStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountStatusCompleted(this, new GetAccountStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DisplayAdd_CPC", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DisplayAdd_CPC(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code)
        {
            object[] results = this.Invoke("DisplayAdd_CPC", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDisplayAdd_CPC(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DisplayAdd_CPC", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDisplayAdd_CPC(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DisplayAdd_CPCAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code)
        {
            this.DisplayAdd_CPCAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, null);
        }

        /// <remarks/>
        public void DisplayAdd_CPCAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, object userState)
        {
            if ((this.DisplayAdd_CPCOperationCompleted == null))
            {
                this.DisplayAdd_CPCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisplayAdd_CPCOperationCompleted);
            }
            this.InvokeAsync("DisplayAdd_CPC", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, this.DisplayAdd_CPCOperationCompleted, userState);
        }

        private void OnDisplayAdd_CPCOperationCompleted(object arg)
        {
            if ((this.DisplayAdd_CPCCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisplayAdd_CPCCompleted(this, new DisplayAdd_CPCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStaffIDLevel", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStaffIDLevel(string email_address)
        {
            object[] results = this.Invoke("GetStaffIDLevel", new object[] {
                    email_address});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetStaffIDLevel(string email_address, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetStaffIDLevel", new object[] {
                    email_address}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetStaffIDLevel(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetStaffIDLevelAsync(string email_address)
        {
            this.GetStaffIDLevelAsync(email_address, null);
        }

        /// <remarks/>
        public void GetStaffIDLevelAsync(string email_address, object userState)
        {
            if ((this.GetStaffIDLevelOperationCompleted == null))
            {
                this.GetStaffIDLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStaffIDLevelOperationCompleted);
            }
            this.InvokeAsync("GetStaffIDLevel", new object[] {
                    email_address}, this.GetStaffIDLevelOperationCompleted, userState);
        }

        private void OnGetStaffIDLevelOperationCompleted(object arg)
        {
            if ((this.GetStaffIDLevelCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStaffIDLevelCompleted(this, new GetStaffIDLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStaffEmpDate", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStaffEmpDate(string email_address)
        {
            object[] results = this.Invoke("GetStaffEmpDate", new object[] {
                    email_address});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetStaffEmpDate(string email_address, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetStaffEmpDate", new object[] {
                    email_address}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetStaffEmpDate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetStaffEmpDateAsync(string email_address)
        {
            this.GetStaffEmpDateAsync(email_address, null);
        }

        /// <remarks/>
        public void GetStaffEmpDateAsync(string email_address, object userState)
        {
            if ((this.GetStaffEmpDateOperationCompleted == null))
            {
                this.GetStaffEmpDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStaffEmpDateOperationCompleted);
            }
            this.InvokeAsync("GetStaffEmpDate", new object[] {
                    email_address}, this.GetStaffEmpDateOperationCompleted, userState);
        }

        private void OnGetStaffEmpDateOperationCompleted(object arg)
        {
            if ((this.GetStaffEmpDateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStaffEmpDateCompleted(this, new GetStaffEmpDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStaffRecords", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStaffRecords(string email_address)
        {
            object[] results = this.Invoke("GetStaffRecords", new object[] {
                    email_address});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetStaffRecords(string email_address, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetStaffRecords", new object[] {
                    email_address}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetStaffRecords(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetStaffRecordsAsync(string email_address)
        {
            this.GetStaffRecordsAsync(email_address, null);
        }

        /// <remarks/>
        public void GetStaffRecordsAsync(string email_address, object userState)
        {
            if ((this.GetStaffRecordsOperationCompleted == null))
            {
                this.GetStaffRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStaffRecordsOperationCompleted);
            }
            this.InvokeAsync("GetStaffRecords", new object[] {
                    email_address}, this.GetStaffRecordsOperationCompleted, userState);
        }

        private void OnGetStaffRecordsOperationCompleted(object arg)
        {
            if ((this.GetStaffRecordsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStaffRecordsCompleted(this, new GetStaffRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckTransactionExist", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckTransactionExist(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, double tra_amt, string remark, string expl_code, int deb_cre_ind)
        {
            object[] results = this.Invoke("CheckTransactionExist", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    tra_amt,
                    remark,
                    expl_code,
                    deb_cre_ind});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckTransactionExist(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, double tra_amt, string remark, string expl_code, int deb_cre_ind, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckTransactionExist", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    tra_amt,
                    remark,
                    expl_code,
                    deb_cre_ind}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCheckTransactionExist(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckTransactionExistAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, double tra_amt, string remark, string expl_code, int deb_cre_ind)
        {
            this.CheckTransactionExistAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, tra_amt, remark, expl_code, deb_cre_ind, null);
        }

        /// <remarks/>
        public void CheckTransactionExistAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, double tra_amt, string remark, string expl_code, int deb_cre_ind, object userState)
        {
            if ((this.CheckTransactionExistOperationCompleted == null))
            {
                this.CheckTransactionExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckTransactionExistOperationCompleted);
            }
            this.InvokeAsync("CheckTransactionExist", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    tra_amt,
                    remark,
                    expl_code,
                    deb_cre_ind}, this.CheckTransactionExistOperationCompleted, userState);
        }

        private void OnCheckTransactionExistOperationCompleted(object arg)
        {
            if ((this.CheckTransactionExistCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckTransactionExistCompleted(this, new CheckTransactionExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStaffConfDate", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStaffConfDate(string email_address)
        {
            object[] results = this.Invoke("GetStaffConfDate", new object[] {
                    email_address});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetStaffConfDate(string email_address, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetStaffConfDate", new object[] {
                    email_address}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetStaffConfDate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetStaffConfDateAsync(string email_address)
        {
            this.GetStaffConfDateAsync(email_address, null);
        }

        /// <remarks/>
        public void GetStaffConfDateAsync(string email_address, object userState)
        {
            if ((this.GetStaffConfDateOperationCompleted == null))
            {
                this.GetStaffConfDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStaffConfDateOperationCompleted);
            }
            this.InvokeAsync("GetStaffConfDate", new object[] {
                    email_address}, this.GetStaffConfDateOperationCompleted, userState);
        }

        private void OnGetStaffConfDateOperationCompleted(object arg)
        {
            if ((this.GetStaffConfDateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStaffConfDateCompleted(this, new GetStaffConfDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBasisSignatureAndSequence2", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CustSigVal2 GetBasisSignatureAndSequence2(int branch_code, int Customer_no, string approved)
        {
            object[] results = this.Invoke("GetBasisSignatureAndSequence2", new object[] {
                    branch_code,
                    Customer_no,
                    approved});
            return ((CustSigVal2)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBasisSignatureAndSequence2(int branch_code, int Customer_no, string approved, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBasisSignatureAndSequence2", new object[] {
                    branch_code,
                    Customer_no,
                    approved}, callback, asyncState);
        }

        /// <remarks/>
        public CustSigVal2 EndGetBasisSignatureAndSequence2(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((CustSigVal2)(results[0]));
        }

        /// <remarks/>
        public void GetBasisSignatureAndSequence2Async(int branch_code, int Customer_no, string approved)
        {
            this.GetBasisSignatureAndSequence2Async(branch_code, Customer_no, approved, null);
        }

        /// <remarks/>
        public void GetBasisSignatureAndSequence2Async(int branch_code, int Customer_no, string approved, object userState)
        {
            if ((this.GetBasisSignatureAndSequence2OperationCompleted == null))
            {
                this.GetBasisSignatureAndSequence2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasisSignatureAndSequence2OperationCompleted);
            }
            this.InvokeAsync("GetBasisSignatureAndSequence2", new object[] {
                    branch_code,
                    Customer_no,
                    approved}, this.GetBasisSignatureAndSequence2OperationCompleted, userState);
        }

        private void OnGetBasisSignatureAndSequence2OperationCompleted(object arg)
        {
            if ((this.GetBasisSignatureAndSequence2Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasisSignatureAndSequence2Completed(this, new GetBasisSignatureAndSequence2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateLoanMasCustomer", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateLoanMasCustomer(string bra_code, string cus_num, string loan_led)
        {
            object[] results = this.Invoke("ValidateLoanMasCustomer", new object[] {
                    bra_code,
                    cus_num,
                    loan_led});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginValidateLoanMasCustomer(string bra_code, string cus_num, string loan_led, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ValidateLoanMasCustomer", new object[] {
                    bra_code,
                    cus_num,
                    loan_led}, callback, asyncState);
        }

        /// <remarks/>
        public string EndValidateLoanMasCustomer(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ValidateLoanMasCustomerAsync(string bra_code, string cus_num, string loan_led)
        {
            this.ValidateLoanMasCustomerAsync(bra_code, cus_num, loan_led, null);
        }

        /// <remarks/>
        public void ValidateLoanMasCustomerAsync(string bra_code, string cus_num, string loan_led, object userState)
        {
            if ((this.ValidateLoanMasCustomerOperationCompleted == null))
            {
                this.ValidateLoanMasCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateLoanMasCustomerOperationCompleted);
            }
            this.InvokeAsync("ValidateLoanMasCustomer", new object[] {
                    bra_code,
                    cus_num,
                    loan_led}, this.ValidateLoanMasCustomerOperationCompleted, userState);
        }

        private void OnValidateLoanMasCustomerOperationCompleted(object arg)
        {
            if ((this.ValidateLoanMasCustomerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateLoanMasCustomerCompleted(this, new ValidateLoanMasCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckLoanExist", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckLoanExist(string bra_code, string cus_num)
        {
            object[] results = this.Invoke("CheckLoanExist", new object[] {
                    bra_code,
                    cus_num});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckLoanExist(string bra_code, string cus_num, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckLoanExist", new object[] {
                    bra_code,
                    cus_num}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCheckLoanExist(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckLoanExistAsync(string bra_code, string cus_num)
        {
            this.CheckLoanExistAsync(bra_code, cus_num, null);
        }

        /// <remarks/>
        public void CheckLoanExistAsync(string bra_code, string cus_num, object userState)
        {
            if ((this.CheckLoanExistOperationCompleted == null))
            {
                this.CheckLoanExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckLoanExistOperationCompleted);
            }
            this.InvokeAsync("CheckLoanExist", new object[] {
                    bra_code,
                    cus_num}, this.CheckLoanExistOperationCompleted, userState);
        }

        private void OnCheckLoanExistOperationCompleted(object arg)
        {
            if ((this.CheckLoanExistCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckLoanExistCompleted(this, new CheckLoanExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBasisDetailsForFTR", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBasisDetailsForFTR(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            object[] results = this.Invoke("GetBasisDetailsForFTR", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBasisDetailsForFTR(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBasisDetailsForFTR", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetBasisDetailsForFTR(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetBasisDetailsForFTRAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            this.GetBasisDetailsForFTRAsync(bracode, cusnum, curcode, ledcode, subacctcode, null);
        }

        /// <remarks/>
        public void GetBasisDetailsForFTRAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, object userState)
        {
            if ((this.GetBasisDetailsForFTROperationCompleted == null))
            {
                this.GetBasisDetailsForFTROperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasisDetailsForFTROperationCompleted);
            }
            this.InvokeAsync("GetBasisDetailsForFTR", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, this.GetBasisDetailsForFTROperationCompleted, userState);
        }

        private void OnGetBasisDetailsForFTROperationCompleted(object arg)
        {
            if ((this.GetBasisDetailsForFTRCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasisDetailsForFTRCompleted(this, new GetBasisDetailsForFTRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBasisDetailsForFastBVN", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBasisDetailsForFastBVN(string bracode, string cusnum)
        {
            object[] results = this.Invoke("GetBasisDetailsForFastBVN", new object[] {
                    bracode,
                    cusnum});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBasisDetailsForFastBVN(string bracode, string cusnum, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBasisDetailsForFastBVN", new object[] {
                    bracode,
                    cusnum}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetBasisDetailsForFastBVN(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetBasisDetailsForFastBVNAsync(string bracode, string cusnum)
        {
            this.GetBasisDetailsForFastBVNAsync(bracode, cusnum, null);
        }

        /// <remarks/>
        public void GetBasisDetailsForFastBVNAsync(string bracode, string cusnum, object userState)
        {
            if ((this.GetBasisDetailsForFastBVNOperationCompleted == null))
            {
                this.GetBasisDetailsForFastBVNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasisDetailsForFastBVNOperationCompleted);
            }
            this.InvokeAsync("GetBasisDetailsForFastBVN", new object[] {
                    bracode,
                    cusnum}, this.GetBasisDetailsForFastBVNOperationCompleted, userState);
        }

        private void OnGetBasisDetailsForFastBVNOperationCompleted(object arg)
        {
            if ((this.GetBasisDetailsForFastBVNCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasisDetailsForFastBVNCompleted(this, new GetBasisDetailsForFastBVNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBasisDetailsForBVN", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBasisDetailsForBVN(string bracode, string cusnum)
        {
            object[] results = this.Invoke("GetBasisDetailsForBVN", new object[] {
                    bracode,
                    cusnum});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBasisDetailsForBVN(string bracode, string cusnum, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBasisDetailsForBVN", new object[] {
                    bracode,
                    cusnum}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetBasisDetailsForBVN(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetBasisDetailsForBVNAsync(string bracode, string cusnum)
        {
            this.GetBasisDetailsForBVNAsync(bracode, cusnum, null);
        }

        /// <remarks/>
        public void GetBasisDetailsForBVNAsync(string bracode, string cusnum, object userState)
        {
            if ((this.GetBasisDetailsForBVNOperationCompleted == null))
            {
                this.GetBasisDetailsForBVNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasisDetailsForBVNOperationCompleted);
            }
            this.InvokeAsync("GetBasisDetailsForBVN", new object[] {
                    bracode,
                    cusnum}, this.GetBasisDetailsForBVNOperationCompleted, userState);
        }

        private void OnGetBasisDetailsForBVNOperationCompleted(object arg)
        {
            if ((this.GetBasisDetailsForBVNCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasisDetailsForBVNCompleted(this, new GetBasisDetailsForBVNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSeqAccountList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSeqAccountList(string bracode, string cusnum)
        {
            object[] results = this.Invoke("GetSeqAccountList", new object[] {
                    bracode,
                    cusnum});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSeqAccountList(string bracode, string cusnum, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSeqAccountList", new object[] {
                    bracode,
                    cusnum}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetSeqAccountList(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetSeqAccountListAsync(string bracode, string cusnum)
        {
            this.GetSeqAccountListAsync(bracode, cusnum, null);
        }

        /// <remarks/>
        public void GetSeqAccountListAsync(string bracode, string cusnum, object userState)
        {
            if ((this.GetSeqAccountListOperationCompleted == null))
            {
                this.GetSeqAccountListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSeqAccountListOperationCompleted);
            }
            this.InvokeAsync("GetSeqAccountList", new object[] {
                    bracode,
                    cusnum}, this.GetSeqAccountListOperationCompleted, userState);
        }

        private void OnGetSeqAccountListOperationCompleted(object arg)
        {
            if ((this.GetSeqAccountListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSeqAccountListCompleted(this, new GetSeqAccountListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateTemporaryCode", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateTemporaryCode(string tempcode)
        {
            object[] results = this.Invoke("ValidateTemporaryCode", new object[] {
                    tempcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginValidateTemporaryCode(string tempcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ValidateTemporaryCode", new object[] {
                    tempcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndValidateTemporaryCode(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ValidateTemporaryCodeAsync(string tempcode)
        {
            this.ValidateTemporaryCodeAsync(tempcode, null);
        }

        /// <remarks/>
        public void ValidateTemporaryCodeAsync(string tempcode, object userState)
        {
            if ((this.ValidateTemporaryCodeOperationCompleted == null))
            {
                this.ValidateTemporaryCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateTemporaryCodeOperationCompleted);
            }
            this.InvokeAsync("ValidateTemporaryCode", new object[] {
                    tempcode}, this.ValidateTemporaryCodeOperationCompleted, userState);
        }

        private void OnValidateTemporaryCodeOperationCompleted(object arg)
        {
            if ((this.ValidateTemporaryCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateTemporaryCodeCompleted(this, new ValidateTemporaryCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateGTInstantCode", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateGTInstantCode(string tempcode)
        {
            object[] results = this.Invoke("ValidateGTInstantCode", new object[] {
                    tempcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginValidateGTInstantCode(string tempcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ValidateGTInstantCode", new object[] {
                    tempcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndValidateGTInstantCode(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ValidateGTInstantCodeAsync(string tempcode)
        {
            this.ValidateGTInstantCodeAsync(tempcode, null);
        }

        /// <remarks/>
        public void ValidateGTInstantCodeAsync(string tempcode, object userState)
        {
            if ((this.ValidateGTInstantCodeOperationCompleted == null))
            {
                this.ValidateGTInstantCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateGTInstantCodeOperationCompleted);
            }
            this.InvokeAsync("ValidateGTInstantCode", new object[] {
                    tempcode}, this.ValidateGTInstantCodeOperationCompleted, userState);
        }

        private void OnValidateGTInstantCodeOperationCompleted(object arg)
        {
            if ((this.ValidateGTInstantCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateGTInstantCodeCompleted(this, new ValidateGTInstantCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/validatemobileCPC", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string validatemobileCPC(string mobilex, string telnum, string telnum2, string emaillx, string namex, string surnamex)
        {
            object[] results = this.Invoke("validatemobileCPC", new object[] {
                    mobilex,
                    telnum,
                    telnum2,
                    emaillx,
                    namex,
                    surnamex});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginvalidatemobileCPC(string mobilex, string telnum, string telnum2, string emaillx, string namex, string surnamex, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("validatemobileCPC", new object[] {
                    mobilex,
                    telnum,
                    telnum2,
                    emaillx,
                    namex,
                    surnamex}, callback, asyncState);
        }

        /// <remarks/>
        public string EndvalidatemobileCPC(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void validatemobileCPCAsync(string mobilex, string telnum, string telnum2, string emaillx, string namex, string surnamex)
        {
            this.validatemobileCPCAsync(mobilex, telnum, telnum2, emaillx, namex, surnamex, null);
        }

        /// <remarks/>
        public void validatemobileCPCAsync(string mobilex, string telnum, string telnum2, string emaillx, string namex, string surnamex, object userState)
        {
            if ((this.validatemobileCPCOperationCompleted == null))
            {
                this.validatemobileCPCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvalidatemobileCPCOperationCompleted);
            }
            this.InvokeAsync("validatemobileCPC", new object[] {
                    mobilex,
                    telnum,
                    telnum2,
                    emaillx,
                    namex,
                    surnamex}, this.validatemobileCPCOperationCompleted, userState);
        }

        private void OnvalidatemobileCPCOperationCompleted(object arg)
        {
            if ((this.validatemobileCPCCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.validatemobileCPCCompleted(this, new validatemobileCPCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertBankCardUniqueCode", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertBankCardUniqueCode(string AcccountKey, string Uniquecode, string UserID, string UserName, string IPAddress, int Status)
        {
            object[] results = this.Invoke("InsertBankCardUniqueCode", new object[] {
                    AcccountKey,
                    Uniquecode,
                    UserID,
                    UserName,
                    IPAddress,
                    Status});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertBankCardUniqueCode(string AcccountKey, string Uniquecode, string UserID, string UserName, string IPAddress, int Status, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InsertBankCardUniqueCode", new object[] {
                    AcccountKey,
                    Uniquecode,
                    UserID,
                    UserName,
                    IPAddress,
                    Status}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInsertBankCardUniqueCode(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertBankCardUniqueCodeAsync(string AcccountKey, string Uniquecode, string UserID, string UserName, string IPAddress, int Status)
        {
            this.InsertBankCardUniqueCodeAsync(AcccountKey, Uniquecode, UserID, UserName, IPAddress, Status, null);
        }

        /// <remarks/>
        public void InsertBankCardUniqueCodeAsync(string AcccountKey, string Uniquecode, string UserID, string UserName, string IPAddress, int Status, object userState)
        {
            if ((this.InsertBankCardUniqueCodeOperationCompleted == null))
            {
                this.InsertBankCardUniqueCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertBankCardUniqueCodeOperationCompleted);
            }
            this.InvokeAsync("InsertBankCardUniqueCode", new object[] {
                    AcccountKey,
                    Uniquecode,
                    UserID,
                    UserName,
                    IPAddress,
                    Status}, this.InsertBankCardUniqueCodeOperationCompleted, userState);
        }

        private void OnInsertBankCardUniqueCodeOperationCompleted(object arg)
        {
            if ((this.InsertBankCardUniqueCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertBankCardUniqueCodeCompleted(this, new InsertBankCardUniqueCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateGapsCustomer", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateGapsCustomer(
                    string CustomerID,
                    int BranchCode,
                    int CustomerNo,
                    string CustomerName,
                    string ShortName,
                    int ApprovalLevels,
                    string CustomerType,
                    string UserName,
                    string Password,
                    string FirstName,
                    string LastName,
                    string Emailadd,
                    string ApprovalMode,
                    string HasApprLimit,
                    string ApprovalStruct,
                    int NoReqPerBatch,
                    string SetupBy,
                    string OwnAcct_ApprReq,
                    int UserLevel,
                    float ApprovalLimit,
                    string RoleName,
                    string TokenSerialNo,
                    string Gender,
                    string MobileNo,
                    int DefaultRoleID,
                    string Do_NIP,
                    float OwnAcctApprovalLimit,
                    string blob)
        {
            object[] results = this.Invoke("CreateGapsCustomer", new object[] {
                    CustomerID,
                    BranchCode,
                    CustomerNo,
                    CustomerName,
                    ShortName,
                    ApprovalLevels,
                    CustomerType,
                    UserName,
                    Password,
                    FirstName,
                    LastName,
                    Emailadd,
                    ApprovalMode,
                    HasApprLimit,
                    ApprovalStruct,
                    NoReqPerBatch,
                    SetupBy,
                    OwnAcct_ApprReq,
                    UserLevel,
                    ApprovalLimit,
                    RoleName,
                    TokenSerialNo,
                    Gender,
                    MobileNo,
                    DefaultRoleID,
                    Do_NIP,
                    OwnAcctApprovalLimit,
                    blob});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateGapsCustomer(
                    string CustomerID,
                    int BranchCode,
                    int CustomerNo,
                    string CustomerName,
                    string ShortName,
                    int ApprovalLevels,
                    string CustomerType,
                    string UserName,
                    string Password,
                    string FirstName,
                    string LastName,
                    string Emailadd,
                    string ApprovalMode,
                    string HasApprLimit,
                    string ApprovalStruct,
                    int NoReqPerBatch,
                    string SetupBy,
                    string OwnAcct_ApprReq,
                    int UserLevel,
                    float ApprovalLimit,
                    string RoleName,
                    string TokenSerialNo,
                    string Gender,
                    string MobileNo,
                    int DefaultRoleID,
                    string Do_NIP,
                    float OwnAcctApprovalLimit,
                    string blob,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("CreateGapsCustomer", new object[] {
                    CustomerID,
                    BranchCode,
                    CustomerNo,
                    CustomerName,
                    ShortName,
                    ApprovalLevels,
                    CustomerType,
                    UserName,
                    Password,
                    FirstName,
                    LastName,
                    Emailadd,
                    ApprovalMode,
                    HasApprLimit,
                    ApprovalStruct,
                    NoReqPerBatch,
                    SetupBy,
                    OwnAcct_ApprReq,
                    UserLevel,
                    ApprovalLimit,
                    RoleName,
                    TokenSerialNo,
                    Gender,
                    MobileNo,
                    DefaultRoleID,
                    Do_NIP,
                    OwnAcctApprovalLimit,
                    blob}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateGapsCustomer(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CreateGapsCustomerAsync(
                    string CustomerID,
                    int BranchCode,
                    int CustomerNo,
                    string CustomerName,
                    string ShortName,
                    int ApprovalLevels,
                    string CustomerType,
                    string UserName,
                    string Password,
                    string FirstName,
                    string LastName,
                    string Emailadd,
                    string ApprovalMode,
                    string HasApprLimit,
                    string ApprovalStruct,
                    int NoReqPerBatch,
                    string SetupBy,
                    string OwnAcct_ApprReq,
                    int UserLevel,
                    float ApprovalLimit,
                    string RoleName,
                    string TokenSerialNo,
                    string Gender,
                    string MobileNo,
                    int DefaultRoleID,
                    string Do_NIP,
                    float OwnAcctApprovalLimit,
                    string blob)
        {
            this.CreateGapsCustomerAsync(CustomerID, BranchCode, CustomerNo, CustomerName, ShortName, ApprovalLevels, CustomerType, UserName, Password, FirstName, LastName, Emailadd, ApprovalMode, HasApprLimit, ApprovalStruct, NoReqPerBatch, SetupBy, OwnAcct_ApprReq, UserLevel, ApprovalLimit, RoleName, TokenSerialNo, Gender, MobileNo, DefaultRoleID, Do_NIP, OwnAcctApprovalLimit, blob, null);
        }

        /// <remarks/>
        public void CreateGapsCustomerAsync(
                    string CustomerID,
                    int BranchCode,
                    int CustomerNo,
                    string CustomerName,
                    string ShortName,
                    int ApprovalLevels,
                    string CustomerType,
                    string UserName,
                    string Password,
                    string FirstName,
                    string LastName,
                    string Emailadd,
                    string ApprovalMode,
                    string HasApprLimit,
                    string ApprovalStruct,
                    int NoReqPerBatch,
                    string SetupBy,
                    string OwnAcct_ApprReq,
                    int UserLevel,
                    float ApprovalLimit,
                    string RoleName,
                    string TokenSerialNo,
                    string Gender,
                    string MobileNo,
                    int DefaultRoleID,
                    string Do_NIP,
                    float OwnAcctApprovalLimit,
                    string blob,
                    object userState)
        {
            if ((this.CreateGapsCustomerOperationCompleted == null))
            {
                this.CreateGapsCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateGapsCustomerOperationCompleted);
            }
            this.InvokeAsync("CreateGapsCustomer", new object[] {
                    CustomerID,
                    BranchCode,
                    CustomerNo,
                    CustomerName,
                    ShortName,
                    ApprovalLevels,
                    CustomerType,
                    UserName,
                    Password,
                    FirstName,
                    LastName,
                    Emailadd,
                    ApprovalMode,
                    HasApprLimit,
                    ApprovalStruct,
                    NoReqPerBatch,
                    SetupBy,
                    OwnAcct_ApprReq,
                    UserLevel,
                    ApprovalLimit,
                    RoleName,
                    TokenSerialNo,
                    Gender,
                    MobileNo,
                    DefaultRoleID,
                    Do_NIP,
                    OwnAcctApprovalLimit,
                    blob}, this.CreateGapsCustomerOperationCompleted, userState);
        }

        private void OnCreateGapsCustomerOperationCompleted(object arg)
        {
            if ((this.CreateGapsCustomerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateGapsCustomerCompleted(this, new CreateGapsCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateGapsCustomer2", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateGapsCustomer2(
                    string CustomerID,
                    int BranchCode,
                    int CustomerNo,
                    string CustomerName,
                    string ShortName,
                    int ApprovalLevels,
                    string CustomerType,
                    string UserName,
                    string Password,
                    string FirstName,
                    string LastName,
                    string Emailadd,
                    string ApprovalMode,
                    string HasApprLimit,
                    string ApprovalStruct,
                    int NoReqPerBatch,
                    string SetupBy,
                    string OwnAcct_ApprReq,
                    int UserLevel,
                    float ApprovalLimit,
                    string RoleName,
                    string TokenSerialNo,
                    string Gender,
                    string MobileNo,
                    int DefaultRoleID,
                    string Do_NIP,
                    float OwnAcctApprovalLimit,
                    int UserStatus,
                    int Approve)
        {
            object[] results = this.Invoke("CreateGapsCustomer2", new object[] {
                    CustomerID,
                    BranchCode,
                    CustomerNo,
                    CustomerName,
                    ShortName,
                    ApprovalLevels,
                    CustomerType,
                    UserName,
                    Password,
                    FirstName,
                    LastName,
                    Emailadd,
                    ApprovalMode,
                    HasApprLimit,
                    ApprovalStruct,
                    NoReqPerBatch,
                    SetupBy,
                    OwnAcct_ApprReq,
                    UserLevel,
                    ApprovalLimit,
                    RoleName,
                    TokenSerialNo,
                    Gender,
                    MobileNo,
                    DefaultRoleID,
                    Do_NIP,
                    OwnAcctApprovalLimit,
                    UserStatus,
                    Approve});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateGapsCustomer2(
                    string CustomerID,
                    int BranchCode,
                    int CustomerNo,
                    string CustomerName,
                    string ShortName,
                    int ApprovalLevels,
                    string CustomerType,
                    string UserName,
                    string Password,
                    string FirstName,
                    string LastName,
                    string Emailadd,
                    string ApprovalMode,
                    string HasApprLimit,
                    string ApprovalStruct,
                    int NoReqPerBatch,
                    string SetupBy,
                    string OwnAcct_ApprReq,
                    int UserLevel,
                    float ApprovalLimit,
                    string RoleName,
                    string TokenSerialNo,
                    string Gender,
                    string MobileNo,
                    int DefaultRoleID,
                    string Do_NIP,
                    float OwnAcctApprovalLimit,
                    int UserStatus,
                    int Approve,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("CreateGapsCustomer2", new object[] {
                    CustomerID,
                    BranchCode,
                    CustomerNo,
                    CustomerName,
                    ShortName,
                    ApprovalLevels,
                    CustomerType,
                    UserName,
                    Password,
                    FirstName,
                    LastName,
                    Emailadd,
                    ApprovalMode,
                    HasApprLimit,
                    ApprovalStruct,
                    NoReqPerBatch,
                    SetupBy,
                    OwnAcct_ApprReq,
                    UserLevel,
                    ApprovalLimit,
                    RoleName,
                    TokenSerialNo,
                    Gender,
                    MobileNo,
                    DefaultRoleID,
                    Do_NIP,
                    OwnAcctApprovalLimit,
                    UserStatus,
                    Approve}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateGapsCustomer2(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CreateGapsCustomer2Async(
                    string CustomerID,
                    int BranchCode,
                    int CustomerNo,
                    string CustomerName,
                    string ShortName,
                    int ApprovalLevels,
                    string CustomerType,
                    string UserName,
                    string Password,
                    string FirstName,
                    string LastName,
                    string Emailadd,
                    string ApprovalMode,
                    string HasApprLimit,
                    string ApprovalStruct,
                    int NoReqPerBatch,
                    string SetupBy,
                    string OwnAcct_ApprReq,
                    int UserLevel,
                    float ApprovalLimit,
                    string RoleName,
                    string TokenSerialNo,
                    string Gender,
                    string MobileNo,
                    int DefaultRoleID,
                    string Do_NIP,
                    float OwnAcctApprovalLimit,
                    int UserStatus,
                    int Approve)
        {
            this.CreateGapsCustomer2Async(CustomerID, BranchCode, CustomerNo, CustomerName, ShortName, ApprovalLevels, CustomerType, UserName, Password, FirstName, LastName, Emailadd, ApprovalMode, HasApprLimit, ApprovalStruct, NoReqPerBatch, SetupBy, OwnAcct_ApprReq, UserLevel, ApprovalLimit, RoleName, TokenSerialNo, Gender, MobileNo, DefaultRoleID, Do_NIP, OwnAcctApprovalLimit, UserStatus, Approve, null);
        }

        /// <remarks/>
        public void CreateGapsCustomer2Async(
                    string CustomerID,
                    int BranchCode,
                    int CustomerNo,
                    string CustomerName,
                    string ShortName,
                    int ApprovalLevels,
                    string CustomerType,
                    string UserName,
                    string Password,
                    string FirstName,
                    string LastName,
                    string Emailadd,
                    string ApprovalMode,
                    string HasApprLimit,
                    string ApprovalStruct,
                    int NoReqPerBatch,
                    string SetupBy,
                    string OwnAcct_ApprReq,
                    int UserLevel,
                    float ApprovalLimit,
                    string RoleName,
                    string TokenSerialNo,
                    string Gender,
                    string MobileNo,
                    int DefaultRoleID,
                    string Do_NIP,
                    float OwnAcctApprovalLimit,
                    int UserStatus,
                    int Approve,
                    object userState)
        {
            if ((this.CreateGapsCustomer2OperationCompleted == null))
            {
                this.CreateGapsCustomer2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateGapsCustomer2OperationCompleted);
            }
            this.InvokeAsync("CreateGapsCustomer2", new object[] {
                    CustomerID,
                    BranchCode,
                    CustomerNo,
                    CustomerName,
                    ShortName,
                    ApprovalLevels,
                    CustomerType,
                    UserName,
                    Password,
                    FirstName,
                    LastName,
                    Emailadd,
                    ApprovalMode,
                    HasApprLimit,
                    ApprovalStruct,
                    NoReqPerBatch,
                    SetupBy,
                    OwnAcct_ApprReq,
                    UserLevel,
                    ApprovalLimit,
                    RoleName,
                    TokenSerialNo,
                    Gender,
                    MobileNo,
                    DefaultRoleID,
                    Do_NIP,
                    OwnAcctApprovalLimit,
                    UserStatus,
                    Approve}, this.CreateGapsCustomer2OperationCompleted, userState);
        }

        private void OnCreateGapsCustomer2OperationCompleted(object arg)
        {
            if ((this.CreateGapsCustomer2Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateGapsCustomer2Completed(this, new CreateGapsCustomer2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateGapsAccount", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateGapsAccount(string CustomerID, int BranchCode, int CustomerNo, int CurCode, int LedCode, int SubAcctCode, string FullAcctKey, string SetupBy, string Nuban_Acct)
        {
            object[] results = this.Invoke("CreateGapsAccount", new object[] {
                    CustomerID,
                    BranchCode,
                    CustomerNo,
                    CurCode,
                    LedCode,
                    SubAcctCode,
                    FullAcctKey,
                    SetupBy,
                    Nuban_Acct});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateGapsAccount(string CustomerID, int BranchCode, int CustomerNo, int CurCode, int LedCode, int SubAcctCode, string FullAcctKey, string SetupBy, string Nuban_Acct, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateGapsAccount", new object[] {
                    CustomerID,
                    BranchCode,
                    CustomerNo,
                    CurCode,
                    LedCode,
                    SubAcctCode,
                    FullAcctKey,
                    SetupBy,
                    Nuban_Acct}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateGapsAccount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CreateGapsAccountAsync(string CustomerID, int BranchCode, int CustomerNo, int CurCode, int LedCode, int SubAcctCode, string FullAcctKey, string SetupBy, string Nuban_Acct)
        {
            this.CreateGapsAccountAsync(CustomerID, BranchCode, CustomerNo, CurCode, LedCode, SubAcctCode, FullAcctKey, SetupBy, Nuban_Acct, null);
        }

        /// <remarks/>
        public void CreateGapsAccountAsync(string CustomerID, int BranchCode, int CustomerNo, int CurCode, int LedCode, int SubAcctCode, string FullAcctKey, string SetupBy, string Nuban_Acct, object userState)
        {
            if ((this.CreateGapsAccountOperationCompleted == null))
            {
                this.CreateGapsAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateGapsAccountOperationCompleted);
            }
            this.InvokeAsync("CreateGapsAccount", new object[] {
                    CustomerID,
                    BranchCode,
                    CustomerNo,
                    CurCode,
                    LedCode,
                    SubAcctCode,
                    FullAcctKey,
                    SetupBy,
                    Nuban_Acct}, this.CreateGapsAccountOperationCompleted, userState);
        }

        private void OnCreateGapsAccountOperationCompleted(object arg)
        {
            if ((this.CreateGapsAccountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateGapsAccountCompleted(this, new CreateGapsAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertBiometricPM", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertBiometricPM(
                    string customerID,
                    string bvn,
                    string sig_seq,
                    string bvn_location,
                    string first_name,
                    string last_name,
                    string middle_name,
                    string date_of_birth,
                    string phone_number,
                    string image_file,
                    string signatory_seq,
                    string acct_type,
                    string initiator_id,
                    string initiator_date,
                    string approval_id,
                    string approval_date,
                    string Email)
        {
            object[] results = this.Invoke("InsertBiometricPM", new object[] {
                    customerID,
                    bvn,
                    sig_seq,
                    bvn_location,
                    first_name,
                    last_name,
                    middle_name,
                    date_of_birth,
                    phone_number,
                    image_file,
                    signatory_seq,
                    acct_type,
                    initiator_id,
                    initiator_date,
                    approval_id,
                    approval_date,
                    Email});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertBiometricPM(
                    string customerID,
                    string bvn,
                    string sig_seq,
                    string bvn_location,
                    string first_name,
                    string last_name,
                    string middle_name,
                    string date_of_birth,
                    string phone_number,
                    string image_file,
                    string signatory_seq,
                    string acct_type,
                    string initiator_id,
                    string initiator_date,
                    string approval_id,
                    string approval_date,
                    string Email,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("InsertBiometricPM", new object[] {
                    customerID,
                    bvn,
                    sig_seq,
                    bvn_location,
                    first_name,
                    last_name,
                    middle_name,
                    date_of_birth,
                    phone_number,
                    image_file,
                    signatory_seq,
                    acct_type,
                    initiator_id,
                    initiator_date,
                    approval_id,
                    approval_date,
                    Email}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInsertBiometricPM(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertBiometricPMAsync(
                    string customerID,
                    string bvn,
                    string sig_seq,
                    string bvn_location,
                    string first_name,
                    string last_name,
                    string middle_name,
                    string date_of_birth,
                    string phone_number,
                    string image_file,
                    string signatory_seq,
                    string acct_type,
                    string initiator_id,
                    string initiator_date,
                    string approval_id,
                    string approval_date,
                    string Email)
        {
            this.InsertBiometricPMAsync(customerID, bvn, sig_seq, bvn_location, first_name, last_name, middle_name, date_of_birth, phone_number, image_file, signatory_seq, acct_type, initiator_id, initiator_date, approval_id, approval_date, Email, null);
        }

        /// <remarks/>
        public void InsertBiometricPMAsync(
                    string customerID,
                    string bvn,
                    string sig_seq,
                    string bvn_location,
                    string first_name,
                    string last_name,
                    string middle_name,
                    string date_of_birth,
                    string phone_number,
                    string image_file,
                    string signatory_seq,
                    string acct_type,
                    string initiator_id,
                    string initiator_date,
                    string approval_id,
                    string approval_date,
                    string Email,
                    object userState)
        {
            if ((this.InsertBiometricPMOperationCompleted == null))
            {
                this.InsertBiometricPMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertBiometricPMOperationCompleted);
            }
            this.InvokeAsync("InsertBiometricPM", new object[] {
                    customerID,
                    bvn,
                    sig_seq,
                    bvn_location,
                    first_name,
                    last_name,
                    middle_name,
                    date_of_birth,
                    phone_number,
                    image_file,
                    signatory_seq,
                    acct_type,
                    initiator_id,
                    initiator_date,
                    approval_id,
                    approval_date,
                    Email}, this.InsertBiometricPMOperationCompleted, userState);
        }

        private void OnInsertBiometricPMOperationCompleted(object arg)
        {
            if ((this.InsertBiometricPMCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertBiometricPMCompleted(this, new InsertBiometricPMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertMailTemp", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertMailTemp(string Subject, string Sender, string ToRecipient, string CcRecipient, string BccRecipient, string Message, int IsHtml, string Application, string SendDate)
        {
            object[] results = this.Invoke("InsertMailTemp", new object[] {
                    Subject,
                    Sender,
                    ToRecipient,
                    CcRecipient,
                    BccRecipient,
                    Message,
                    IsHtml,
                    Application,
                    SendDate});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertMailTemp(string Subject, string Sender, string ToRecipient, string CcRecipient, string BccRecipient, string Message, int IsHtml, string Application, string SendDate, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InsertMailTemp", new object[] {
                    Subject,
                    Sender,
                    ToRecipient,
                    CcRecipient,
                    BccRecipient,
                    Message,
                    IsHtml,
                    Application,
                    SendDate}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInsertMailTemp(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertMailTempAsync(string Subject, string Sender, string ToRecipient, string CcRecipient, string BccRecipient, string Message, int IsHtml, string Application, string SendDate)
        {
            this.InsertMailTempAsync(Subject, Sender, ToRecipient, CcRecipient, BccRecipient, Message, IsHtml, Application, SendDate, null);
        }

        /// <remarks/>
        public void InsertMailTempAsync(string Subject, string Sender, string ToRecipient, string CcRecipient, string BccRecipient, string Message, int IsHtml, string Application, string SendDate, object userState)
        {
            if ((this.InsertMailTempOperationCompleted == null))
            {
                this.InsertMailTempOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMailTempOperationCompleted);
            }
            this.InvokeAsync("InsertMailTemp", new object[] {
                    Subject,
                    Sender,
                    ToRecipient,
                    CcRecipient,
                    BccRecipient,
                    Message,
                    IsHtml,
                    Application,
                    SendDate}, this.InsertMailTempOperationCompleted, userState);
        }

        private void OnInsertMailTempOperationCompleted(object arg)
        {
            if ((this.InsertMailTempCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMailTempCompleted(this, new InsertMailTempCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateGapsUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateGapsUser(
                    string UserName,
                    string Password,
                    string FirstName,
                    string LastName,
                    string CustomerID,
                    string UserLevel,
                    float ApprovalLimit,
                    string Sex,
                    string Email,
                    string MobileID,
                    string PhoneNo,
                    string UseToken,
                    string SetupBy,
                    int RoleID,
                    int UserID,
                    string CusName,
                    int RoleidTech,
                    string TokenNo,
                    float OwnAcct_ApprLimit,
                    string useDefaultRole)
        {
            object[] results = this.Invoke("CreateGapsUser", new object[] {
                    UserName,
                    Password,
                    FirstName,
                    LastName,
                    CustomerID,
                    UserLevel,
                    ApprovalLimit,
                    Sex,
                    Email,
                    MobileID,
                    PhoneNo,
                    UseToken,
                    SetupBy,
                    RoleID,
                    UserID,
                    CusName,
                    RoleidTech,
                    TokenNo,
                    OwnAcct_ApprLimit,
                    useDefaultRole});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateGapsUser(
                    string UserName,
                    string Password,
                    string FirstName,
                    string LastName,
                    string CustomerID,
                    string UserLevel,
                    float ApprovalLimit,
                    string Sex,
                    string Email,
                    string MobileID,
                    string PhoneNo,
                    string UseToken,
                    string SetupBy,
                    int RoleID,
                    int UserID,
                    string CusName,
                    int RoleidTech,
                    string TokenNo,
                    float OwnAcct_ApprLimit,
                    string useDefaultRole,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("CreateGapsUser", new object[] {
                    UserName,
                    Password,
                    FirstName,
                    LastName,
                    CustomerID,
                    UserLevel,
                    ApprovalLimit,
                    Sex,
                    Email,
                    MobileID,
                    PhoneNo,
                    UseToken,
                    SetupBy,
                    RoleID,
                    UserID,
                    CusName,
                    RoleidTech,
                    TokenNo,
                    OwnAcct_ApprLimit,
                    useDefaultRole}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateGapsUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CreateGapsUserAsync(
                    string UserName,
                    string Password,
                    string FirstName,
                    string LastName,
                    string CustomerID,
                    string UserLevel,
                    float ApprovalLimit,
                    string Sex,
                    string Email,
                    string MobileID,
                    string PhoneNo,
                    string UseToken,
                    string SetupBy,
                    int RoleID,
                    int UserID,
                    string CusName,
                    int RoleidTech,
                    string TokenNo,
                    float OwnAcct_ApprLimit,
                    string useDefaultRole)
        {
            this.CreateGapsUserAsync(UserName, Password, FirstName, LastName, CustomerID, UserLevel, ApprovalLimit, Sex, Email, MobileID, PhoneNo, UseToken, SetupBy, RoleID, UserID, CusName, RoleidTech, TokenNo, OwnAcct_ApprLimit, useDefaultRole, null);
        }

        /// <remarks/>
        public void CreateGapsUserAsync(
                    string UserName,
                    string Password,
                    string FirstName,
                    string LastName,
                    string CustomerID,
                    string UserLevel,
                    float ApprovalLimit,
                    string Sex,
                    string Email,
                    string MobileID,
                    string PhoneNo,
                    string UseToken,
                    string SetupBy,
                    int RoleID,
                    int UserID,
                    string CusName,
                    int RoleidTech,
                    string TokenNo,
                    float OwnAcct_ApprLimit,
                    string useDefaultRole,
                    object userState)
        {
            if ((this.CreateGapsUserOperationCompleted == null))
            {
                this.CreateGapsUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateGapsUserOperationCompleted);
            }
            this.InvokeAsync("CreateGapsUser", new object[] {
                    UserName,
                    Password,
                    FirstName,
                    LastName,
                    CustomerID,
                    UserLevel,
                    ApprovalLimit,
                    Sex,
                    Email,
                    MobileID,
                    PhoneNo,
                    UseToken,
                    SetupBy,
                    RoleID,
                    UserID,
                    CusName,
                    RoleidTech,
                    TokenNo,
                    OwnAcct_ApprLimit,
                    useDefaultRole}, this.CreateGapsUserOperationCompleted, userState);
        }

        private void OnCreateGapsUserOperationCompleted(object arg)
        {
            if ((this.CreateGapsUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateGapsUserCompleted(this, new CreateGapsUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProfileNewUserEone", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProfileNewUserEone(string user_id, string staff_id, string BASIS_ID, string user_name, string branch_code, string email, string tokenid, string status, string registration_date, string registered_by, string mobileno, string role_id)
        {
            object[] results = this.Invoke("ProfileNewUserEone", new object[] {
                    user_id,
                    staff_id,
                    BASIS_ID,
                    user_name,
                    branch_code,
                    email,
                    tokenid,
                    status,
                    registration_date,
                    registered_by,
                    mobileno,
                    role_id});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginProfileNewUserEone(string user_id, string staff_id, string BASIS_ID, string user_name, string branch_code, string email, string tokenid, string status, string registration_date, string registered_by, string mobileno, string role_id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ProfileNewUserEone", new object[] {
                    user_id,
                    staff_id,
                    BASIS_ID,
                    user_name,
                    branch_code,
                    email,
                    tokenid,
                    status,
                    registration_date,
                    registered_by,
                    mobileno,
                    role_id}, callback, asyncState);
        }

        /// <remarks/>
        public string EndProfileNewUserEone(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ProfileNewUserEoneAsync(string user_id, string staff_id, string BASIS_ID, string user_name, string branch_code, string email, string tokenid, string status, string registration_date, string registered_by, string mobileno, string role_id)
        {
            this.ProfileNewUserEoneAsync(user_id, staff_id, BASIS_ID, user_name, branch_code, email, tokenid, status, registration_date, registered_by, mobileno, role_id, null);
        }

        /// <remarks/>
        public void ProfileNewUserEoneAsync(string user_id, string staff_id, string BASIS_ID, string user_name, string branch_code, string email, string tokenid, string status, string registration_date, string registered_by, string mobileno, string role_id, object userState)
        {
            if ((this.ProfileNewUserEoneOperationCompleted == null))
            {
                this.ProfileNewUserEoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProfileNewUserEoneOperationCompleted);
            }
            this.InvokeAsync("ProfileNewUserEone", new object[] {
                    user_id,
                    staff_id,
                    BASIS_ID,
                    user_name,
                    branch_code,
                    email,
                    tokenid,
                    status,
                    registration_date,
                    registered_by,
                    mobileno,
                    role_id}, this.ProfileNewUserEoneOperationCompleted, userState);
        }

        private void OnProfileNewUserEoneOperationCompleted(object arg)
        {
            if ((this.ProfileNewUserEoneCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProfileNewUserEoneCompleted(this, new ProfileNewUserEoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ApproveGapsUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ApproveGapsUser(string CustomerID, string ApproveBy, int ApproveFlag)
        {
            object[] results = this.Invoke("ApproveGapsUser", new object[] {
                    CustomerID,
                    ApproveBy,
                    ApproveFlag});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginApproveGapsUser(string CustomerID, string ApproveBy, int ApproveFlag, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ApproveGapsUser", new object[] {
                    CustomerID,
                    ApproveBy,
                    ApproveFlag}, callback, asyncState);
        }

        /// <remarks/>
        public string EndApproveGapsUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ApproveGapsUserAsync(string CustomerID, string ApproveBy, int ApproveFlag)
        {
            this.ApproveGapsUserAsync(CustomerID, ApproveBy, ApproveFlag, null);
        }

        /// <remarks/>
        public void ApproveGapsUserAsync(string CustomerID, string ApproveBy, int ApproveFlag, object userState)
        {
            if ((this.ApproveGapsUserOperationCompleted == null))
            {
                this.ApproveGapsUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApproveGapsUserOperationCompleted);
            }
            this.InvokeAsync("ApproveGapsUser", new object[] {
                    CustomerID,
                    ApproveBy,
                    ApproveFlag}, this.ApproveGapsUserOperationCompleted, userState);
        }

        private void OnApproveGapsUserOperationCompleted(object arg)
        {
            if ((this.ApproveGapsUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApproveGapsUserCompleted(this, new ApproveGapsUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectGapsTokenDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SelectGapsTokenDetails(string UserName, string CustomerID)
        {
            object[] results = this.Invoke("SelectGapsTokenDetails", new object[] {
                    UserName,
                    CustomerID});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSelectGapsTokenDetails(string UserName, string CustomerID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SelectGapsTokenDetails", new object[] {
                    UserName,
                    CustomerID}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSelectGapsTokenDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SelectGapsTokenDetailsAsync(string UserName, string CustomerID)
        {
            this.SelectGapsTokenDetailsAsync(UserName, CustomerID, null);
        }

        /// <remarks/>
        public void SelectGapsTokenDetailsAsync(string UserName, string CustomerID, object userState)
        {
            if ((this.SelectGapsTokenDetailsOperationCompleted == null))
            {
                this.SelectGapsTokenDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectGapsTokenDetailsOperationCompleted);
            }
            this.InvokeAsync("SelectGapsTokenDetails", new object[] {
                    UserName,
                    CustomerID}, this.SelectGapsTokenDetailsOperationCompleted, userState);
        }

        private void OnSelectGapsTokenDetailsOperationCompleted(object arg)
        {
            if ((this.SelectGapsTokenDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectGapsTokenDetailsCompleted(this, new SelectGapsTokenDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertGapsTokenDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertGapsTokenDetails(string SERIALNUMBER, string DPBlob, string userName)
        {
            object[] results = this.Invoke("InsertGapsTokenDetails", new object[] {
                    SERIALNUMBER,
                    DPBlob,
                    userName});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertGapsTokenDetails(string SERIALNUMBER, string DPBlob, string userName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InsertGapsTokenDetails", new object[] {
                    SERIALNUMBER,
                    DPBlob,
                    userName}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInsertGapsTokenDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertGapsTokenDetailsAsync(string SERIALNUMBER, string DPBlob, string userName)
        {
            this.InsertGapsTokenDetailsAsync(SERIALNUMBER, DPBlob, userName, null);
        }

        /// <remarks/>
        public void InsertGapsTokenDetailsAsync(string SERIALNUMBER, string DPBlob, string userName, object userState)
        {
            if ((this.InsertGapsTokenDetailsOperationCompleted == null))
            {
                this.InsertGapsTokenDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertGapsTokenDetailsOperationCompleted);
            }
            this.InvokeAsync("InsertGapsTokenDetails", new object[] {
                    SERIALNUMBER,
                    DPBlob,
                    userName}, this.InsertGapsTokenDetailsOperationCompleted, userState);
        }

        private void OnInsertGapsTokenDetailsOperationCompleted(object arg)
        {
            if ((this.InsertGapsTokenDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertGapsTokenDetailsCompleted(this, new InsertGapsTokenDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStaffAcctNum", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStaffAcctNum(string email_address)
        {
            object[] results = this.Invoke("GetStaffAcctNum", new object[] {
                    email_address});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetStaffAcctNum(string email_address, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetStaffAcctNum", new object[] {
                    email_address}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetStaffAcctNum(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetStaffAcctNumAsync(string email_address)
        {
            this.GetStaffAcctNumAsync(email_address, null);
        }

        /// <remarks/>
        public void GetStaffAcctNumAsync(string email_address, object userState)
        {
            if ((this.GetStaffAcctNumOperationCompleted == null))
            {
                this.GetStaffAcctNumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStaffAcctNumOperationCompleted);
            }
            this.InvokeAsync("GetStaffAcctNum", new object[] {
                    email_address}, this.GetStaffAcctNumOperationCompleted, userState);
        }

        private void OnGetStaffAcctNumOperationCompleted(object arg)
        {
            if ((this.GetStaffAcctNumCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStaffAcctNumCompleted(this, new GetStaffAcctNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectGapsTokenDetailsPm", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SelectGapsTokenDetailsPm(string serialno)
        {
            object[] results = this.Invoke("SelectGapsTokenDetailsPm", new object[] {
                    serialno});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSelectGapsTokenDetailsPm(string serialno, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SelectGapsTokenDetailsPm", new object[] {
                    serialno}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSelectGapsTokenDetailsPm(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SelectGapsTokenDetailsPmAsync(string serialno)
        {
            this.SelectGapsTokenDetailsPmAsync(serialno, null);
        }

        /// <remarks/>
        public void SelectGapsTokenDetailsPmAsync(string serialno, object userState)
        {
            if ((this.SelectGapsTokenDetailsPmOperationCompleted == null))
            {
                this.SelectGapsTokenDetailsPmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectGapsTokenDetailsPmOperationCompleted);
            }
            this.InvokeAsync("SelectGapsTokenDetailsPm", new object[] {
                    serialno}, this.SelectGapsTokenDetailsPmOperationCompleted, userState);
        }

        private void OnSelectGapsTokenDetailsPmOperationCompleted(object arg)
        {
            if ((this.SelectGapsTokenDetailsPmCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectGapsTokenDetailsPmCompleted(this, new SelectGapsTokenDetailsPmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStaffSubordinates", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStaffSubordinates(string email_address)
        {
            object[] results = this.Invoke("GetStaffSubordinates", new object[] {
                    email_address});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetStaffSubordinates(string email_address, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetStaffSubordinates", new object[] {
                    email_address}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetStaffSubordinates(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetStaffSubordinatesAsync(string email_address)
        {
            this.GetStaffSubordinatesAsync(email_address, null);
        }

        /// <remarks/>
        public void GetStaffSubordinatesAsync(string email_address, object userState)
        {
            if ((this.GetStaffSubordinatesOperationCompleted == null))
            {
                this.GetStaffSubordinatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStaffSubordinatesOperationCompleted);
            }
            this.InvokeAsync("GetStaffSubordinates", new object[] {
                    email_address}, this.GetStaffSubordinatesOperationCompleted, userState);
        }

        private void OnGetStaffSubordinatesOperationCompleted(object arg)
        {
            if ((this.GetStaffSubordinatesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStaffSubordinatesCompleted(this, new GetStaffSubordinatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTeamMembers", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTeamMembers(string email_address)
        {
            object[] results = this.Invoke("GetTeamMembers", new object[] {
                    email_address});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetTeamMembers(string email_address, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetTeamMembers", new object[] {
                    email_address}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetTeamMembers(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetTeamMembersAsync(string email_address)
        {
            this.GetTeamMembersAsync(email_address, null);
        }

        /// <remarks/>
        public void GetTeamMembersAsync(string email_address, object userState)
        {
            if ((this.GetTeamMembersOperationCompleted == null))
            {
                this.GetTeamMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamMembersOperationCompleted);
            }
            this.InvokeAsync("GetTeamMembers", new object[] {
                    email_address}, this.GetTeamMembersOperationCompleted, userState);
        }

        private void OnGetTeamMembersOperationCompleted(object arg)
        {
            if ((this.GetTeamMembersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamMembersCompleted(this, new GetTeamMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStaffAppraisals", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStaffAppraisals(string staff_name)
        {
            object[] results = this.Invoke("GetStaffAppraisals", new object[] {
                    staff_name});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetStaffAppraisals(string staff_name, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetStaffAppraisals", new object[] {
                    staff_name}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetStaffAppraisals(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetStaffAppraisalsAsync(string staff_name)
        {
            this.GetStaffAppraisalsAsync(staff_name, null);
        }

        /// <remarks/>
        public void GetStaffAppraisalsAsync(string staff_name, object userState)
        {
            if ((this.GetStaffAppraisalsOperationCompleted == null))
            {
                this.GetStaffAppraisalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStaffAppraisalsOperationCompleted);
            }
            this.InvokeAsync("GetStaffAppraisals", new object[] {
                    staff_name}, this.GetStaffAppraisalsOperationCompleted, userState);
        }

        private void OnGetStaffAppraisalsOperationCompleted(object arg)
        {
            if ((this.GetStaffAppraisalsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStaffAppraisalsCompleted(this, new GetStaffAppraisalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PMRedeployUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PMRedeployUser(string username, string pmType)
        {
            object[] results = this.Invoke("PMRedeployUser", new object[] {
                    username,
                    pmType});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginPMRedeployUser(string username, string pmType, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("PMRedeployUser", new object[] {
                    username,
                    pmType}, callback, asyncState);
        }

        /// <remarks/>
        public string EndPMRedeployUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void PMRedeployUserAsync(string username, string pmType)
        {
            this.PMRedeployUserAsync(username, pmType, null);
        }

        /// <remarks/>
        public void PMRedeployUserAsync(string username, string pmType, object userState)
        {
            if ((this.PMRedeployUserOperationCompleted == null))
            {
                this.PMRedeployUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPMRedeployUserOperationCompleted);
            }
            this.InvokeAsync("PMRedeployUser", new object[] {
                    username,
                    pmType}, this.PMRedeployUserOperationCompleted, userState);
        }

        private void OnPMRedeployUserOperationCompleted(object arg)
        {
            if ((this.PMRedeployUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PMRedeployUserCompleted(this, new PMRedeployUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePMUserActive", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdatePMUserActive(string username, string pmType)
        {
            object[] results = this.Invoke("UpdatePMUserActive", new object[] {
                    username,
                    pmType});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdatePMUserActive(string username, string pmType, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdatePMUserActive", new object[] {
                    username,
                    pmType}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdatePMUserActive(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdatePMUserActiveAsync(string username, string pmType)
        {
            this.UpdatePMUserActiveAsync(username, pmType, null);
        }

        /// <remarks/>
        public void UpdatePMUserActiveAsync(string username, string pmType, object userState)
        {
            if ((this.UpdatePMUserActiveOperationCompleted == null))
            {
                this.UpdatePMUserActiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePMUserActiveOperationCompleted);
            }
            this.InvokeAsync("UpdatePMUserActive", new object[] {
                    username,
                    pmType}, this.UpdatePMUserActiveOperationCompleted, userState);
        }

        private void OnUpdatePMUserActiveOperationCompleted(object arg)
        {
            if ((this.UpdatePMUserActiveCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePMUserActiveCompleted(this, new UpdatePMUserActiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserDetails(string email)
        {
            object[] results = this.Invoke("GetUserDetails", new object[] {
                    email});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetUserDetails(string email, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetUserDetails", new object[] {
                    email}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetUserDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetUserDetailsAsync(string email)
        {
            this.GetUserDetailsAsync(email, null);
        }

        /// <remarks/>
        public void GetUserDetailsAsync(string email, object userState)
        {
            if ((this.GetUserDetailsOperationCompleted == null))
            {
                this.GetUserDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserDetailsOperationCompleted);
            }
            this.InvokeAsync("GetUserDetails", new object[] {
                    email}, this.GetUserDetailsOperationCompleted, userState);
        }

        private void OnGetUserDetailsOperationCompleted(object arg)
        {
            if ((this.GetUserDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserDetailsCompleted(this, new GetUserDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePMUserInactive", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdatePMUserInactive(string username, string pmType)
        {
            object[] results = this.Invoke("UpdatePMUserInactive", new object[] {
                    username,
                    pmType});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdatePMUserInactive(string username, string pmType, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdatePMUserInactive", new object[] {
                    username,
                    pmType}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdatePMUserInactive(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdatePMUserInactiveAsync(string username, string pmType)
        {
            this.UpdatePMUserInactiveAsync(username, pmType, null);
        }

        /// <remarks/>
        public void UpdatePMUserInactiveAsync(string username, string pmType, object userState)
        {
            if ((this.UpdatePMUserInactiveOperationCompleted == null))
            {
                this.UpdatePMUserInactiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePMUserInactiveOperationCompleted);
            }
            this.InvokeAsync("UpdatePMUserInactive", new object[] {
                    username,
                    pmType}, this.UpdatePMUserInactiveOperationCompleted, userState);
        }

        private void OnUpdatePMUserInactiveOperationCompleted(object arg)
        {
            if ((this.UpdatePMUserInactiveCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePMUserInactiveCompleted(this, new UpdatePMUserInactiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePMUserVacation", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdatePMUserVacation(string username, string replaceby, string pmType)
        {
            object[] results = this.Invoke("UpdatePMUserVacation", new object[] {
                    username,
                    replaceby,
                    pmType});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdatePMUserVacation(string username, string replaceby, string pmType, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdatePMUserVacation", new object[] {
                    username,
                    replaceby,
                    pmType}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdatePMUserVacation(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdatePMUserVacationAsync(string username, string replaceby, string pmType)
        {
            this.UpdatePMUserVacationAsync(username, replaceby, pmType, null);
        }

        /// <remarks/>
        public void UpdatePMUserVacationAsync(string username, string replaceby, string pmType, object userState)
        {
            if ((this.UpdatePMUserVacationOperationCompleted == null))
            {
                this.UpdatePMUserVacationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePMUserVacationOperationCompleted);
            }
            this.InvokeAsync("UpdatePMUserVacation", new object[] {
                    username,
                    replaceby,
                    pmType}, this.UpdatePMUserVacationOperationCompleted, userState);
        }

        private void OnUpdatePMUserVacationOperationCompleted(object arg)
        {
            if ((this.UpdatePMUserVacationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePMUserVacationCompleted(this, new UpdatePMUserVacationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInactiveUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetInactiveUser(string days, string pmType)
        {
            object[] results = this.Invoke("GetInactiveUser", new object[] {
                    days,
                    pmType});
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetInactiveUser(string days, string pmType, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetInactiveUser", new object[] {
                    days,
                    pmType}, callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataSet EndGetInactiveUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public void GetInactiveUserAsync(string days, string pmType)
        {
            this.GetInactiveUserAsync(days, pmType, null);
        }

        /// <remarks/>
        public void GetInactiveUserAsync(string days, string pmType, object userState)
        {
            if ((this.GetInactiveUserOperationCompleted == null))
            {
                this.GetInactiveUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInactiveUserOperationCompleted);
            }
            this.InvokeAsync("GetInactiveUser", new object[] {
                    days,
                    pmType}, this.GetInactiveUserOperationCompleted, userState);
        }

        private void OnGetInactiveUserOperationCompleted(object arg)
        {
            if ((this.GetInactiveUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInactiveUserCompleted(this, new GetInactiveUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTeamName", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTeamName(string bra_code, string team_no)
        {
            object[] results = this.Invoke("GetTeamName", new object[] {
                    bra_code,
                    team_no});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetTeamName(string bra_code, string team_no, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetTeamName", new object[] {
                    bra_code,
                    team_no}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetTeamName(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetTeamNameAsync(string bra_code, string team_no)
        {
            this.GetTeamNameAsync(bra_code, team_no, null);
        }

        /// <remarks/>
        public void GetTeamNameAsync(string bra_code, string team_no, object userState)
        {
            if ((this.GetTeamNameOperationCompleted == null))
            {
                this.GetTeamNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamNameOperationCompleted);
            }
            this.InvokeAsync("GetTeamName", new object[] {
                    bra_code,
                    team_no}, this.GetTeamNameOperationCompleted, userState);
        }

        private void OnGetTeamNameOperationCompleted(object arg)
        {
            if ((this.GetTeamNameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamNameCompleted(this, new GetTeamNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTeamDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTeamDetails(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code)
        {
            object[] results = this.Invoke("GetTeamDetails", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetTeamDetails(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetTeamDetails", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetTeamDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetTeamDetailsAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code)
        {
            this.GetTeamDetailsAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, null);
        }

        /// <remarks/>
        public void GetTeamDetailsAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, object userState)
        {
            if ((this.GetTeamDetailsOperationCompleted == null))
            {
                this.GetTeamDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamDetailsOperationCompleted);
            }
            this.InvokeAsync("GetTeamDetails", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, this.GetTeamDetailsOperationCompleted, userState);
        }

        private void OnGetTeamDetailsOperationCompleted(object arg)
        {
            if ((this.GetTeamDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamDetailsCompleted(this, new GetTeamDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEquvalentAmount", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEquvalentAmount(string sou_cur_code, string tar_cur_code, float sou_amt)
        {
            object[] results = this.Invoke("GetEquvalentAmount", new object[] {
                    sou_cur_code,
                    tar_cur_code,
                    sou_amt});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetEquvalentAmount(string sou_cur_code, string tar_cur_code, float sou_amt, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetEquvalentAmount", new object[] {
                    sou_cur_code,
                    tar_cur_code,
                    sou_amt}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetEquvalentAmount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetEquvalentAmountAsync(string sou_cur_code, string tar_cur_code, float sou_amt)
        {
            this.GetEquvalentAmountAsync(sou_cur_code, tar_cur_code, sou_amt, null);
        }

        /// <remarks/>
        public void GetEquvalentAmountAsync(string sou_cur_code, string tar_cur_code, float sou_amt, object userState)
        {
            if ((this.GetEquvalentAmountOperationCompleted == null))
            {
                this.GetEquvalentAmountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEquvalentAmountOperationCompleted);
            }
            this.InvokeAsync("GetEquvalentAmount", new object[] {
                    sou_cur_code,
                    tar_cur_code,
                    sou_amt}, this.GetEquvalentAmountOperationCompleted, userState);
        }

        private void OnGetEquvalentAmountOperationCompleted(object arg)
        {
            if ((this.GetEquvalentAmountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEquvalentAmountCompleted(this, new GetEquvalentAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelFX_PM", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelFX_PM(int traseq1, int bracode, int tell_id)
        {
            object[] results = this.Invoke("CancelFX_PM", new object[] {
                    traseq1,
                    bracode,
                    tell_id});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCancelFX_PM(int traseq1, int bracode, int tell_id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CancelFX_PM", new object[] {
                    traseq1,
                    bracode,
                    tell_id}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCancelFX_PM(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CancelFX_PMAsync(int traseq1, int bracode, int tell_id)
        {
            this.CancelFX_PMAsync(traseq1, bracode, tell_id, null);
        }

        /// <remarks/>
        public void CancelFX_PMAsync(int traseq1, int bracode, int tell_id, object userState)
        {
            if ((this.CancelFX_PMOperationCompleted == null))
            {
                this.CancelFX_PMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelFX_PMOperationCompleted);
            }
            this.InvokeAsync("CancelFX_PM", new object[] {
                    traseq1,
                    bracode,
                    tell_id}, this.CancelFX_PMOperationCompleted, userState);
        }

        private void OnCancelFX_PMOperationCompleted(object arg)
        {
            if ((this.CancelFX_PMCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelFX_PMCompleted(this, new CancelFX_PMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelFX_PM1", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelFX_PM1(int traseq1, int bracode, int tell_id)
        {
            object[] results = this.Invoke("CancelFX_PM1", new object[] {
                    traseq1,
                    bracode,
                    tell_id});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCancelFX_PM1(int traseq1, int bracode, int tell_id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CancelFX_PM1", new object[] {
                    traseq1,
                    bracode,
                    tell_id}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCancelFX_PM1(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CancelFX_PM1Async(int traseq1, int bracode, int tell_id)
        {
            this.CancelFX_PM1Async(traseq1, bracode, tell_id, null);
        }

        /// <remarks/>
        public void CancelFX_PM1Async(int traseq1, int bracode, int tell_id, object userState)
        {
            if ((this.CancelFX_PM1OperationCompleted == null))
            {
                this.CancelFX_PM1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelFX_PM1OperationCompleted);
            }
            this.InvokeAsync("CancelFX_PM1", new object[] {
                    traseq1,
                    bracode,
                    tell_id}, this.CancelFX_PM1OperationCompleted, userState);
        }

        private void OnCancelFX_PM1OperationCompleted(object arg)
        {
            if ((this.CancelFX_PM1Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelFX_PM1Completed(this, new CancelFX_PM1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchMobile", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchMobile(string mobileNo)
        {
            object[] results = this.Invoke("SearchMobile", new object[] {
                    mobileNo});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSearchMobile(string mobileNo, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SearchMobile", new object[] {
                    mobileNo}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSearchMobile(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SearchMobileAsync(string mobileNo)
        {
            this.SearchMobileAsync(mobileNo, null);
        }

        /// <remarks/>
        public void SearchMobileAsync(string mobileNo, object userState)
        {
            if ((this.SearchMobileOperationCompleted == null))
            {
                this.SearchMobileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchMobileOperationCompleted);
            }
            this.InvokeAsync("SearchMobile", new object[] {
                    mobileNo}, this.SearchMobileOperationCompleted, userState);
        }

        private void OnSearchMobileOperationCompleted(object arg)
        {
            if ((this.SearchMobileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchMobileCompleted(this, new SearchMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCheckBook", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCheckBook(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            object[] results = this.Invoke("GetCheckBook", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCheckBook(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCheckBook", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetCheckBook(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetCheckBookAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            this.GetCheckBookAsync(bracode, cusnum, curcode, ledcode, subacctcode, null);
        }

        /// <remarks/>
        public void GetCheckBookAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, object userState)
        {
            if ((this.GetCheckBookOperationCompleted == null))
            {
                this.GetCheckBookOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCheckBookOperationCompleted);
            }
            this.InvokeAsync("GetCheckBook", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, this.GetCheckBookOperationCompleted, userState);
        }

        private void OnGetCheckBookOperationCompleted(object arg)
        {
            if ((this.GetCheckBookCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCheckBookCompleted(this, new GetCheckBookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDirectors", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getDirectors(int bra_code, int cus_num)
        {
            object[] results = this.Invoke("getDirectors", new object[] {
                    bra_code,
                    cus_num});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetDirectors(int bra_code, int cus_num, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getDirectors", new object[] {
                    bra_code,
                    cus_num}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetDirectors(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getDirectorsAsync(int bra_code, int cus_num)
        {
            this.getDirectorsAsync(bra_code, cus_num, null);
        }

        /// <remarks/>
        public void getDirectorsAsync(int bra_code, int cus_num, object userState)
        {
            if ((this.getDirectorsOperationCompleted == null))
            {
                this.getDirectorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDirectorsOperationCompleted);
            }
            this.InvokeAsync("getDirectors", new object[] {
                    bra_code,
                    cus_num}, this.getDirectorsOperationCompleted, userState);
        }

        private void OngetDirectorsOperationCompleted(object arg)
        {
            if ((this.getDirectorsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDirectorsCompleted(this, new getDirectorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckGTInstantAcc", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckGTInstantAcc(string nubannumber)
        {
            object[] results = this.Invoke("CheckGTInstantAcc", new object[] {
                    nubannumber});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckGTInstantAcc(string nubannumber, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckGTInstantAcc", new object[] {
                    nubannumber}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCheckGTInstantAcc(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckGTInstantAccAsync(string nubannumber)
        {
            this.CheckGTInstantAccAsync(nubannumber, null);
        }

        /// <remarks/>
        public void CheckGTInstantAccAsync(string nubannumber, object userState)
        {
            if ((this.CheckGTInstantAccOperationCompleted == null))
            {
                this.CheckGTInstantAccOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckGTInstantAccOperationCompleted);
            }
            this.InvokeAsync("CheckGTInstantAcc", new object[] {
                    nubannumber}, this.CheckGTInstantAccOperationCompleted, userState);
        }

        private void OnCheckGTInstantAccOperationCompleted(object arg)
        {
            if ((this.CheckGTInstantAccCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckGTInstantAccCompleted(this, new CheckGTInstantAccCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectForm", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SelectForm(string cust_id)
        {
            object[] results = this.Invoke("SelectForm", new object[] {
                    cust_id});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSelectForm(string cust_id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SelectForm", new object[] {
                    cust_id}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSelectForm(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SelectFormAsync(string cust_id)
        {
            this.SelectFormAsync(cust_id, null);
        }

        /// <remarks/>
        public void SelectFormAsync(string cust_id, object userState)
        {
            if ((this.SelectFormOperationCompleted == null))
            {
                this.SelectFormOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectFormOperationCompleted);
            }
            this.InvokeAsync("SelectForm", new object[] {
                    cust_id}, this.SelectFormOperationCompleted, userState);
        }

        private void OnSelectFormOperationCompleted(object arg)
        {
            if ((this.SelectFormCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectFormCompleted(this, new SelectFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectCharge", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SelectCharge(string form_id)
        {
            object[] results = this.Invoke("SelectCharge", new object[] {
                    form_id});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSelectCharge(string form_id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SelectCharge", new object[] {
                    form_id}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSelectCharge(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SelectChargeAsync(string form_id)
        {
            this.SelectChargeAsync(form_id, null);
        }

        /// <remarks/>
        public void SelectChargeAsync(string form_id, object userState)
        {
            if ((this.SelectChargeOperationCompleted == null))
            {
                this.SelectChargeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectChargeOperationCompleted);
            }
            this.InvokeAsync("SelectCharge", new object[] {
                    form_id}, this.SelectChargeOperationCompleted, userState);
        }

        private void OnSelectChargeOperationCompleted(object arg)
        {
            if ((this.SelectChargeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectChargeCompleted(this, new SelectChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getIntAccruedLastPeriod", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getIntAccruedLastPeriod(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code)
        {
            object[] results = this.Invoke("getIntAccruedLastPeriod", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetIntAccruedLastPeriod(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getIntAccruedLastPeriod", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetIntAccruedLastPeriod(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getIntAccruedLastPeriodAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code)
        {
            this.getIntAccruedLastPeriodAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, null);
        }

        /// <remarks/>
        public void getIntAccruedLastPeriodAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, object userState)
        {
            if ((this.getIntAccruedLastPeriodOperationCompleted == null))
            {
                this.getIntAccruedLastPeriodOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetIntAccruedLastPeriodOperationCompleted);
            }
            this.InvokeAsync("getIntAccruedLastPeriod", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, this.getIntAccruedLastPeriodOperationCompleted, userState);
        }

        private void OngetIntAccruedLastPeriodOperationCompleted(object arg)
        {
            if ((this.getIntAccruedLastPeriodCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getIntAccruedLastPeriodCompleted(this, new getIntAccruedLastPeriodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPOSUsersDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPOSUsersDetails()
        {
            object[] results = this.Invoke("GetPOSUsersDetails", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetPOSUsersDetails(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetPOSUsersDetails", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataSet EndGetPOSUsersDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public void GetPOSUsersDetailsAsync()
        {
            this.GetPOSUsersDetailsAsync(null);
        }

        /// <remarks/>
        public void GetPOSUsersDetailsAsync(object userState)
        {
            if ((this.GetPOSUsersDetailsOperationCompleted == null))
            {
                this.GetPOSUsersDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPOSUsersDetailsOperationCompleted);
            }
            this.InvokeAsync("GetPOSUsersDetails", new object[0], this.GetPOSUsersDetailsOperationCompleted, userState);
        }

        private void OnGetPOSUsersDetailsOperationCompleted(object arg)
        {
            if ((this.GetPOSUsersDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPOSUsersDetailsCompleted(this, new GetPOSUsersDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckGTCollectionCustomer", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckGTCollectionCustomer(string accnum)
        {
            object[] results = this.Invoke("CheckGTCollectionCustomer", new object[] {
                    accnum});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckGTCollectionCustomer(string accnum, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckGTCollectionCustomer", new object[] {
                    accnum}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCheckGTCollectionCustomer(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckGTCollectionCustomerAsync(string accnum)
        {
            this.CheckGTCollectionCustomerAsync(accnum, null);
        }

        /// <remarks/>
        public void CheckGTCollectionCustomerAsync(string accnum, object userState)
        {
            if ((this.CheckGTCollectionCustomerOperationCompleted == null))
            {
                this.CheckGTCollectionCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckGTCollectionCustomerOperationCompleted);
            }
            this.InvokeAsync("CheckGTCollectionCustomer", new object[] {
                    accnum}, this.CheckGTCollectionCustomerOperationCompleted, userState);
        }

        private void OnCheckGTCollectionCustomerOperationCompleted(object arg)
        {
            if ((this.CheckGTCollectionCustomerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckGTCollectionCustomerCompleted(this, new CheckGTCollectionCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckGAPSCustomer", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckGAPSCustomer(string bra_code, string cus_num)
        {
            object[] results = this.Invoke("CheckGAPSCustomer", new object[] {
                    bra_code,
                    cus_num});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckGAPSCustomer(string bra_code, string cus_num, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckGAPSCustomer", new object[] {
                    bra_code,
                    cus_num}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCheckGAPSCustomer(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckGAPSCustomerAsync(string bra_code, string cus_num)
        {
            this.CheckGAPSCustomerAsync(bra_code, cus_num, null);
        }

        /// <remarks/>
        public void CheckGAPSCustomerAsync(string bra_code, string cus_num, object userState)
        {
            if ((this.CheckGAPSCustomerOperationCompleted == null))
            {
                this.CheckGAPSCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckGAPSCustomerOperationCompleted);
            }
            this.InvokeAsync("CheckGAPSCustomer", new object[] {
                    bra_code,
                    cus_num}, this.CheckGAPSCustomerOperationCompleted, userState);
        }

        private void OnCheckGAPSCustomerOperationCompleted(object arg)
        {
            if ((this.CheckGAPSCustomerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckGAPSCustomerCompleted(this, new CheckGAPSCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateCodes", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateCodes(int ussdcode, int merchantcode)
        {
            object[] results = this.Invoke("ValidateCodes", new object[] {
                    ussdcode,
                    merchantcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginValidateCodes(int ussdcode, int merchantcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ValidateCodes", new object[] {
                    ussdcode,
                    merchantcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndValidateCodes(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ValidateCodesAsync(int ussdcode, int merchantcode)
        {
            this.ValidateCodesAsync(ussdcode, merchantcode, null);
        }

        /// <remarks/>
        public void ValidateCodesAsync(int ussdcode, int merchantcode, object userState)
        {
            if ((this.ValidateCodesOperationCompleted == null))
            {
                this.ValidateCodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateCodesOperationCompleted);
            }
            this.InvokeAsync("ValidateCodes", new object[] {
                    ussdcode,
                    merchantcode}, this.ValidateCodesOperationCompleted, userState);
        }

        private void OnValidateCodesOperationCompleted(object arg)
        {
            if ((this.ValidateCodesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateCodesCompleted(this, new ValidateCodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExtensionUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExtensionUser(string User_name, int Role_ID, string Role_Name, int Basis_ID, string Act_Start_Date, string Act_End_Date, string Purpose, string Approver, string Approval_Date, int Req_Status)
        {
            object[] results = this.Invoke("ExtensionUser", new object[] {
                    User_name,
                    Role_ID,
                    Role_Name,
                    Basis_ID,
                    Act_Start_Date,
                    Act_End_Date,
                    Purpose,
                    Approver,
                    Approval_Date,
                    Req_Status});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginExtensionUser(string User_name, int Role_ID, string Role_Name, int Basis_ID, string Act_Start_Date, string Act_End_Date, string Purpose, string Approver, string Approval_Date, int Req_Status, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ExtensionUser", new object[] {
                    User_name,
                    Role_ID,
                    Role_Name,
                    Basis_ID,
                    Act_Start_Date,
                    Act_End_Date,
                    Purpose,
                    Approver,
                    Approval_Date,
                    Req_Status}, callback, asyncState);
        }

        /// <remarks/>
        public string EndExtensionUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ExtensionUserAsync(string User_name, int Role_ID, string Role_Name, int Basis_ID, string Act_Start_Date, string Act_End_Date, string Purpose, string Approver, string Approval_Date, int Req_Status)
        {
            this.ExtensionUserAsync(User_name, Role_ID, Role_Name, Basis_ID, Act_Start_Date, Act_End_Date, Purpose, Approver, Approval_Date, Req_Status, null);
        }

        /// <remarks/>
        public void ExtensionUserAsync(string User_name, int Role_ID, string Role_Name, int Basis_ID, string Act_Start_Date, string Act_End_Date, string Purpose, string Approver, string Approval_Date, int Req_Status, object userState)
        {
            if ((this.ExtensionUserOperationCompleted == null))
            {
                this.ExtensionUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExtensionUserOperationCompleted);
            }
            this.InvokeAsync("ExtensionUser", new object[] {
                    User_name,
                    Role_ID,
                    Role_Name,
                    Basis_ID,
                    Act_Start_Date,
                    Act_End_Date,
                    Purpose,
                    Approver,
                    Approval_Date,
                    Req_Status}, this.ExtensionUserOperationCompleted, userState);
        }

        private void OnExtensionUserOperationCompleted(object arg)
        {
            if ((this.ExtensionUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExtensionUserCompleted(this, new ExtensionUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertGTCollectionCus", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertGTCollectionCus(string cus_name, int account_number, string cus_name_sho)
        {
            object[] results = this.Invoke("InsertGTCollectionCus", new object[] {
                    cus_name,
                    account_number,
                    cus_name_sho});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertGTCollectionCus(string cus_name, int account_number, string cus_name_sho, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InsertGTCollectionCus", new object[] {
                    cus_name,
                    account_number,
                    cus_name_sho}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInsertGTCollectionCus(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertGTCollectionCusAsync(string cus_name, int account_number, string cus_name_sho)
        {
            this.InsertGTCollectionCusAsync(cus_name, account_number, cus_name_sho, null);
        }

        /// <remarks/>
        public void InsertGTCollectionCusAsync(string cus_name, int account_number, string cus_name_sho, object userState)
        {
            if ((this.InsertGTCollectionCusOperationCompleted == null))
            {
                this.InsertGTCollectionCusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertGTCollectionCusOperationCompleted);
            }
            this.InvokeAsync("InsertGTCollectionCus", new object[] {
                    cus_name,
                    account_number,
                    cus_name_sho}, this.InsertGTCollectionCusOperationCompleted, userState);
        }

        private void OnInsertGTCollectionCusOperationCompleted(object arg)
        {
            if ((this.InsertGTCollectionCusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertGTCollectionCusCompleted(this, new InsertGTCollectionCusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewAdminUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddNewAdminUser(string UserID, int BASISID, string Username, string staffid, string password, int branch_code, string emailaddress, string roleid, string status)
        {
            object[] results = this.Invoke("AddNewAdminUser", new object[] {
                    UserID,
                    BASISID,
                    Username,
                    staffid,
                    password,
                    branch_code,
                    emailaddress,
                    roleid,
                    status});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddNewAdminUser(string UserID, int BASISID, string Username, string staffid, string password, int branch_code, string emailaddress, string roleid, string status, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddNewAdminUser", new object[] {
                    UserID,
                    BASISID,
                    Username,
                    staffid,
                    password,
                    branch_code,
                    emailaddress,
                    roleid,
                    status}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAddNewAdminUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AddNewAdminUserAsync(string UserID, int BASISID, string Username, string staffid, string password, int branch_code, string emailaddress, string roleid, string status)
        {
            this.AddNewAdminUserAsync(UserID, BASISID, Username, staffid, password, branch_code, emailaddress, roleid, status, null);
        }

        /// <remarks/>
        public void AddNewAdminUserAsync(string UserID, int BASISID, string Username, string staffid, string password, int branch_code, string emailaddress, string roleid, string status, object userState)
        {
            if ((this.AddNewAdminUserOperationCompleted == null))
            {
                this.AddNewAdminUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNewAdminUserOperationCompleted);
            }
            this.InvokeAsync("AddNewAdminUser", new object[] {
                    UserID,
                    BASISID,
                    Username,
                    staffid,
                    password,
                    branch_code,
                    emailaddress,
                    roleid,
                    status}, this.AddNewAdminUserOperationCompleted, userState);
        }

        private void OnAddNewAdminUserOperationCompleted(object arg)
        {
            if ((this.AddNewAdminUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNewAdminUserCompleted(this, new AddNewAdminUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAdminUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateAdminUser(string UserID, int BASISID, string Username, string staffid, int branch_code, string emailaddress, string roleid)
        {
            object[] results = this.Invoke("UpdateAdminUser", new object[] {
                    UserID,
                    BASISID,
                    Username,
                    staffid,
                    branch_code,
                    emailaddress,
                    roleid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateAdminUser(string UserID, int BASISID, string Username, string staffid, int branch_code, string emailaddress, string roleid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateAdminUser", new object[] {
                    UserID,
                    BASISID,
                    Username,
                    staffid,
                    branch_code,
                    emailaddress,
                    roleid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateAdminUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateAdminUserAsync(string UserID, int BASISID, string Username, string staffid, int branch_code, string emailaddress, string roleid)
        {
            this.UpdateAdminUserAsync(UserID, BASISID, Username, staffid, branch_code, emailaddress, roleid, null);
        }

        /// <remarks/>
        public void UpdateAdminUserAsync(string UserID, int BASISID, string Username, string staffid, int branch_code, string emailaddress, string roleid, object userState)
        {
            if ((this.UpdateAdminUserOperationCompleted == null))
            {
                this.UpdateAdminUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAdminUserOperationCompleted);
            }
            this.InvokeAsync("UpdateAdminUser", new object[] {
                    UserID,
                    BASISID,
                    Username,
                    staffid,
                    branch_code,
                    emailaddress,
                    roleid}, this.UpdateAdminUserOperationCompleted, userState);
        }

        private void OnUpdateAdminUserOperationCompleted(object arg)
        {
            if ((this.UpdateAdminUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAdminUserCompleted(this, new UpdateAdminUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAdminUserDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAdminUserDetails(string UserID)
        {
            object[] results = this.Invoke("GetAdminUserDetails", new object[] {
                    UserID});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAdminUserDetails(string UserID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAdminUserDetails", new object[] {
                    UserID}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAdminUserDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAdminUserDetailsAsync(string UserID)
        {
            this.GetAdminUserDetailsAsync(UserID, null);
        }

        /// <remarks/>
        public void GetAdminUserDetailsAsync(string UserID, object userState)
        {
            if ((this.GetAdminUserDetailsOperationCompleted == null))
            {
                this.GetAdminUserDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdminUserDetailsOperationCompleted);
            }
            this.InvokeAsync("GetAdminUserDetails", new object[] {
                    UserID}, this.GetAdminUserDetailsOperationCompleted, userState);
        }

        private void OnGetAdminUserDetailsOperationCompleted(object arg)
        {
            if ((this.GetAdminUserDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdminUserDetailsCompleted(this, new GetAdminUserDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchAdminUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchAdminUser(string str)
        {
            object[] results = this.Invoke("SearchAdminUser", new object[] {
                    str});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSearchAdminUser(string str, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SearchAdminUser", new object[] {
                    str}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSearchAdminUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SearchAdminUserAsync(string str)
        {
            this.SearchAdminUserAsync(str, null);
        }

        /// <remarks/>
        public void SearchAdminUserAsync(string str, object userState)
        {
            if ((this.SearchAdminUserOperationCompleted == null))
            {
                this.SearchAdminUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchAdminUserOperationCompleted);
            }
            this.InvokeAsync("SearchAdminUser", new object[] {
                    str}, this.SearchAdminUserOperationCompleted, userState);
        }

        private void OnSearchAdminUserOperationCompleted(object arg)
        {
            if ((this.SearchAdminUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchAdminUserCompleted(this, new SearchAdminUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllRoles", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllRoles()
        {
            object[] results = this.Invoke("GetAllRoles", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAllRoles(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAllRoles", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAllRoles(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAllRolesAsync()
        {
            this.GetAllRolesAsync(null);
        }

        /// <remarks/>
        public void GetAllRolesAsync(object userState)
        {
            if ((this.GetAllRolesOperationCompleted == null))
            {
                this.GetAllRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllRolesOperationCompleted);
            }
            this.InvokeAsync("GetAllRoles", new object[0], this.GetAllRolesOperationCompleted, userState);
        }

        private void OnGetAllRolesOperationCompleted(object arg)
        {
            if ((this.GetAllRolesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllRolesCompleted(this, new GetAllRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllAdminUsers", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllAdminUsers()
        {
            object[] results = this.Invoke("GetAllAdminUsers", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAllAdminUsers(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAllAdminUsers", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAllAdminUsers(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAllAdminUsersAsync()
        {
            this.GetAllAdminUsersAsync(null);
        }

        /// <remarks/>
        public void GetAllAdminUsersAsync(object userState)
        {
            if ((this.GetAllAdminUsersOperationCompleted == null))
            {
                this.GetAllAdminUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllAdminUsersOperationCompleted);
            }
            this.InvokeAsync("GetAllAdminUsers", new object[0], this.GetAllAdminUsersOperationCompleted, userState);
        }

        private void OnGetAllAdminUsersOperationCompleted(object arg)
        {
            if ((this.GetAllAdminUsersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllAdminUsersCompleted(this, new GetAllAdminUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBasisCustomerMandate", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CustDetRetVal GetBasisCustomerMandate(int bra_code, int cus_num)
        {
            object[] results = this.Invoke("GetBasisCustomerMandate", new object[] {
                    bra_code,
                    cus_num});
            return ((CustDetRetVal)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBasisCustomerMandate(int bra_code, int cus_num, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBasisCustomerMandate", new object[] {
                    bra_code,
                    cus_num}, callback, asyncState);
        }

        /// <remarks/>
        public CustDetRetVal EndGetBasisCustomerMandate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((CustDetRetVal)(results[0]));
        }

        /// <remarks/>
        public void GetBasisCustomerMandateAsync(int bra_code, int cus_num)
        {
            this.GetBasisCustomerMandateAsync(bra_code, cus_num, null);
        }

        /// <remarks/>
        public void GetBasisCustomerMandateAsync(int bra_code, int cus_num, object userState)
        {
            if ((this.GetBasisCustomerMandateOperationCompleted == null))
            {
                this.GetBasisCustomerMandateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasisCustomerMandateOperationCompleted);
            }
            this.InvokeAsync("GetBasisCustomerMandate", new object[] {
                    bra_code,
                    cus_num}, this.GetBasisCustomerMandateOperationCompleted, userState);
        }

        private void OnGetBasisCustomerMandateOperationCompleted(object arg)
        {
            if ((this.GetBasisCustomerMandateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasisCustomerMandateCompleted(this, new GetBasisCustomerMandateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllBranches", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllBranches()
        {
            object[] results = this.Invoke("GetAllBranches", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAllBranches(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAllBranches", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAllBranches(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAllBranchesAsync()
        {
            this.GetAllBranchesAsync(null);
        }

        /// <remarks/>
        public void GetAllBranchesAsync(object userState)
        {
            if ((this.GetAllBranchesOperationCompleted == null))
            {
                this.GetAllBranchesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllBranchesOperationCompleted);
            }
            this.InvokeAsync("GetAllBranches", new object[0], this.GetAllBranchesOperationCompleted, userState);
        }

        private void OnGetAllBranchesOperationCompleted(object arg)
        {
            if ((this.GetAllBranchesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllBranchesCompleted(this, new GetAllBranchesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActivateAdminUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ActivateAdminUser(string userid)
        {
            object[] results = this.Invoke("ActivateAdminUser", new object[] {
                    userid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginActivateAdminUser(string userid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ActivateAdminUser", new object[] {
                    userid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndActivateAdminUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ActivateAdminUserAsync(string userid)
        {
            this.ActivateAdminUserAsync(userid, null);
        }

        /// <remarks/>
        public void ActivateAdminUserAsync(string userid, object userState)
        {
            if ((this.ActivateAdminUserOperationCompleted == null))
            {
                this.ActivateAdminUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateAdminUserOperationCompleted);
            }
            this.InvokeAsync("ActivateAdminUser", new object[] {
                    userid}, this.ActivateAdminUserOperationCompleted, userState);
        }

        private void OnActivateAdminUserOperationCompleted(object arg)
        {
            if ((this.ActivateAdminUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateAdminUserCompleted(this, new ActivateAdminUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeactivateAdminUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeactivateAdminUser(string userid)
        {
            object[] results = this.Invoke("DeactivateAdminUser", new object[] {
                    userid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeactivateAdminUser(string userid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeactivateAdminUser", new object[] {
                    userid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDeactivateAdminUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DeactivateAdminUserAsync(string userid)
        {
            this.DeactivateAdminUserAsync(userid, null);
        }

        /// <remarks/>
        public void DeactivateAdminUserAsync(string userid, object userState)
        {
            if ((this.DeactivateAdminUserOperationCompleted == null))
            {
                this.DeactivateAdminUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeactivateAdminUserOperationCompleted);
            }
            this.InvokeAsync("DeactivateAdminUser", new object[] {
                    userid}, this.DeactivateAdminUserOperationCompleted, userState);
        }

        private void OnDeactivateAdminUserOperationCompleted(object arg)
        {
            if ((this.DeactivateAdminUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeactivateAdminUserCompleted(this, new DeactivateAdminUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTellerTillAcct", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTellerTillAcct(string userid, int appid)
        {
            object[] results = this.Invoke("GetTellerTillAcct", new object[] {
                    userid,
                    appid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetTellerTillAcct(string userid, int appid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetTellerTillAcct", new object[] {
                    userid,
                    appid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetTellerTillAcct(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetTellerTillAcctAsync(string userid, int appid)
        {
            this.GetTellerTillAcctAsync(userid, appid, null);
        }

        /// <remarks/>
        public void GetTellerTillAcctAsync(string userid, int appid, object userState)
        {
            if ((this.GetTellerTillAcctOperationCompleted == null))
            {
                this.GetTellerTillAcctOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTellerTillAcctOperationCompleted);
            }
            this.InvokeAsync("GetTellerTillAcct", new object[] {
                    userid,
                    appid}, this.GetTellerTillAcctOperationCompleted, userState);
        }

        private void OnGetTellerTillAcctOperationCompleted(object arg)
        {
            if ((this.GetTellerTillAcctCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTellerTillAcctCompleted(this, new GetTellerTillAcctCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetZoneAcct", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetZoneAcct(int branch_code, int appid)
        {
            object[] results = this.Invoke("GetZoneAcct", new object[] {
                    branch_code,
                    appid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetZoneAcct(int branch_code, int appid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetZoneAcct", new object[] {
                    branch_code,
                    appid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetZoneAcct(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetZoneAcctAsync(int branch_code, int appid)
        {
            this.GetZoneAcctAsync(branch_code, appid, null);
        }

        /// <remarks/>
        public void GetZoneAcctAsync(int branch_code, int appid, object userState)
        {
            if ((this.GetZoneAcctOperationCompleted == null))
            {
                this.GetZoneAcctOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetZoneAcctOperationCompleted);
            }
            this.InvokeAsync("GetZoneAcct", new object[] {
                    branch_code,
                    appid}, this.GetZoneAcctOperationCompleted, userState);
        }

        private void OnGetZoneAcctOperationCompleted(object arg)
        {
            if ((this.GetZoneAcctCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetZoneAcctCompleted(this, new GetZoneAcctCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBranchAcct", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBranchAcct(string userid, int appid)
        {
            object[] results = this.Invoke("GetBranchAcct", new object[] {
                    userid,
                    appid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBranchAcct(string userid, int appid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBranchAcct", new object[] {
                    userid,
                    appid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetBranchAcct(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetBranchAcctAsync(string userid, int appid)
        {
            this.GetBranchAcctAsync(userid, appid, null);
        }

        /// <remarks/>
        public void GetBranchAcctAsync(string userid, int appid, object userState)
        {
            if ((this.GetBranchAcctOperationCompleted == null))
            {
                this.GetBranchAcctOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBranchAcctOperationCompleted);
            }
            this.InvokeAsync("GetBranchAcct", new object[] {
                    userid,
                    appid}, this.GetBranchAcctOperationCompleted, userState);
        }

        private void OnGetBranchAcctOperationCompleted(object arg)
        {
            if ((this.GetBranchAcctCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBranchAcctCompleted(this, new GetBranchAcctCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerTurnover", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double GetCustomerTurnover(string bracode, string cusnum)
        {
            object[] results = this.Invoke("GetCustomerTurnover", new object[] {
                    bracode,
                    cusnum});
            return ((double)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCustomerTurnover(string bracode, string cusnum, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCustomerTurnover", new object[] {
                    bracode,
                    cusnum}, callback, asyncState);
        }

        /// <remarks/>
        public double EndGetCustomerTurnover(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((double)(results[0]));
        }

        /// <remarks/>
        public void GetCustomerTurnoverAsync(string bracode, string cusnum)
        {
            this.GetCustomerTurnoverAsync(bracode, cusnum, null);
        }

        /// <remarks/>
        public void GetCustomerTurnoverAsync(string bracode, string cusnum, object userState)
        {
            if ((this.GetCustomerTurnoverOperationCompleted == null))
            {
                this.GetCustomerTurnoverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerTurnoverOperationCompleted);
            }
            this.InvokeAsync("GetCustomerTurnover", new object[] {
                    bracode,
                    cusnum}, this.GetCustomerTurnoverOperationCompleted, userState);
        }

        private void OnGetCustomerTurnoverOperationCompleted(object arg)
        {
            if ((this.GetCustomerTurnoverCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerTurnoverCompleted(this, new GetCustomerTurnoverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllBasisRoles", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllBasisRoles()
        {
            object[] results = this.Invoke("GetAllBasisRoles", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAllBasisRoles(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAllBasisRoles", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAllBasisRoles(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAllBasisRolesAsync()
        {
            this.GetAllBasisRolesAsync(null);
        }

        /// <remarks/>
        public void GetAllBasisRolesAsync(object userState)
        {
            if ((this.GetAllBasisRolesOperationCompleted == null))
            {
                this.GetAllBasisRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllBasisRolesOperationCompleted);
            }
            this.InvokeAsync("GetAllBasisRoles", new object[0], this.GetAllBasisRolesOperationCompleted, userState);
        }

        private void OnGetAllBasisRolesOperationCompleted(object arg)
        {
            if ((this.GetAllBasisRolesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllBasisRolesCompleted(this, new GetAllBasisRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBasisCustomerDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CustDetRetVal GetBasisCustomerDetails(int branch_code, int Customer_no)
        {
            object[] results = this.Invoke("GetBasisCustomerDetails", new object[] {
                    branch_code,
                    Customer_no});
            return ((CustDetRetVal)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBasisCustomerDetails(int branch_code, int Customer_no, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBasisCustomerDetails", new object[] {
                    branch_code,
                    Customer_no}, callback, asyncState);
        }

        /// <remarks/>
        public CustDetRetVal EndGetBasisCustomerDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((CustDetRetVal)(results[0]));
        }

        /// <remarks/>
        public void GetBasisCustomerDetailsAsync(int branch_code, int Customer_no)
        {
            this.GetBasisCustomerDetailsAsync(branch_code, Customer_no, null);
        }

        /// <remarks/>
        public void GetBasisCustomerDetailsAsync(int branch_code, int Customer_no, object userState)
        {
            if ((this.GetBasisCustomerDetailsOperationCompleted == null))
            {
                this.GetBasisCustomerDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasisCustomerDetailsOperationCompleted);
            }
            this.InvokeAsync("GetBasisCustomerDetails", new object[] {
                    branch_code,
                    Customer_no}, this.GetBasisCustomerDetailsOperationCompleted, userState);
        }

        private void OnGetBasisCustomerDetailsOperationCompleted(object arg)
        {
            if ((this.GetBasisCustomerDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasisCustomerDetailsCompleted(this, new GetBasisCustomerDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBasisCustomerDetailsForAchival", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CustDetRetVal GetBasisCustomerDetailsForAchival(int branch_code, int Customer_no)
        {
            object[] results = this.Invoke("GetBasisCustomerDetailsForAchival", new object[] {
                    branch_code,
                    Customer_no});
            return ((CustDetRetVal)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBasisCustomerDetailsForAchival(int branch_code, int Customer_no, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBasisCustomerDetailsForAchival", new object[] {
                    branch_code,
                    Customer_no}, callback, asyncState);
        }

        /// <remarks/>
        public CustDetRetVal EndGetBasisCustomerDetailsForAchival(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((CustDetRetVal)(results[0]));
        }

        /// <remarks/>
        public void GetBasisCustomerDetailsForAchivalAsync(int branch_code, int Customer_no)
        {
            this.GetBasisCustomerDetailsForAchivalAsync(branch_code, Customer_no, null);
        }

        /// <remarks/>
        public void GetBasisCustomerDetailsForAchivalAsync(int branch_code, int Customer_no, object userState)
        {
            if ((this.GetBasisCustomerDetailsForAchivalOperationCompleted == null))
            {
                this.GetBasisCustomerDetailsForAchivalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasisCustomerDetailsForAchivalOperationCompleted);
            }
            this.InvokeAsync("GetBasisCustomerDetailsForAchival", new object[] {
                    branch_code,
                    Customer_no}, this.GetBasisCustomerDetailsForAchivalOperationCompleted, userState);
        }

        private void OnGetBasisCustomerDetailsForAchivalOperationCompleted(object arg)
        {
            if ((this.GetBasisCustomerDetailsForAchivalCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasisCustomerDetailsForAchivalCompleted(this, new GetBasisCustomerDetailsForAchivalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetNubanAcctKey", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNubanAcctKey(string nubanacctno)
        {
            object[] results = this.Invoke("GetNubanAcctKey", new object[] {
                    nubanacctno});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetNubanAcctKey(string nubanacctno, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetNubanAcctKey", new object[] {
                    nubanacctno}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetNubanAcctKey(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetNubanAcctKeyAsync(string nubanacctno)
        {
            this.GetNubanAcctKeyAsync(nubanacctno, null);
        }

        /// <remarks/>
        public void GetNubanAcctKeyAsync(string nubanacctno, object userState)
        {
            if ((this.GetNubanAcctKeyOperationCompleted == null))
            {
                this.GetNubanAcctKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNubanAcctKeyOperationCompleted);
            }
            this.InvokeAsync("GetNubanAcctKey", new object[] {
                    nubanacctno}, this.GetNubanAcctKeyOperationCompleted, userState);
        }

        private void OnGetNubanAcctKeyOperationCompleted(object arg)
        {
            if ((this.GetNubanAcctKeyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNubanAcctKeyCompleted(this, new GetNubanAcctKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBasisSignatureAndSequence", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CustSigVal GetBasisSignatureAndSequence(int branch_code, int Customer_no)
        {
            object[] results = this.Invoke("GetBasisSignatureAndSequence", new object[] {
                    branch_code,
                    Customer_no});
            return ((CustSigVal)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBasisSignatureAndSequence(int branch_code, int Customer_no, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBasisSignatureAndSequence", new object[] {
                    branch_code,
                    Customer_no}, callback, asyncState);
        }

        /// <remarks/>
        public CustSigVal EndGetBasisSignatureAndSequence(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((CustSigVal)(results[0]));
        }

        /// <remarks/>
        public void GetBasisSignatureAndSequenceAsync(int branch_code, int Customer_no)
        {
            this.GetBasisSignatureAndSequenceAsync(branch_code, Customer_no, null);
        }

        /// <remarks/>
        public void GetBasisSignatureAndSequenceAsync(int branch_code, int Customer_no, object userState)
        {
            if ((this.GetBasisSignatureAndSequenceOperationCompleted == null))
            {
                this.GetBasisSignatureAndSequenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasisSignatureAndSequenceOperationCompleted);
            }
            this.InvokeAsync("GetBasisSignatureAndSequence", new object[] {
                    branch_code,
                    Customer_no}, this.GetBasisSignatureAndSequenceOperationCompleted, userState);
        }

        private void OnGetBasisSignatureAndSequenceOperationCompleted(object arg)
        {
            if ((this.GetBasisSignatureAndSequenceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasisSignatureAndSequenceCompleted(this, new GetBasisSignatureAndSequenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBVN", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateBVN(
                    string customerID,
                    string bvn,
                    string sig_seq,
                    string bvn_location,
                    string first_name,
                    string last_name,
                    string middle_name,
                    string date_of_birth,
                    string phone_number,
                    string image_file,
                    string signatory_seq,
                    string acct_type,
                    string initiator_id,
                    string initiator_date,
                    string approval_id,
                    string approval_date)
        {
            object[] results = this.Invoke("UpdateBVN", new object[] {
                    customerID,
                    bvn,
                    sig_seq,
                    bvn_location,
                    first_name,
                    last_name,
                    middle_name,
                    date_of_birth,
                    phone_number,
                    image_file,
                    signatory_seq,
                    acct_type,
                    initiator_id,
                    initiator_date,
                    approval_id,
                    approval_date});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateBVN(
                    string customerID,
                    string bvn,
                    string sig_seq,
                    string bvn_location,
                    string first_name,
                    string last_name,
                    string middle_name,
                    string date_of_birth,
                    string phone_number,
                    string image_file,
                    string signatory_seq,
                    string acct_type,
                    string initiator_id,
                    string initiator_date,
                    string approval_id,
                    string approval_date,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("UpdateBVN", new object[] {
                    customerID,
                    bvn,
                    sig_seq,
                    bvn_location,
                    first_name,
                    last_name,
                    middle_name,
                    date_of_birth,
                    phone_number,
                    image_file,
                    signatory_seq,
                    acct_type,
                    initiator_id,
                    initiator_date,
                    approval_id,
                    approval_date}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateBVN(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateBVNAsync(
                    string customerID,
                    string bvn,
                    string sig_seq,
                    string bvn_location,
                    string first_name,
                    string last_name,
                    string middle_name,
                    string date_of_birth,
                    string phone_number,
                    string image_file,
                    string signatory_seq,
                    string acct_type,
                    string initiator_id,
                    string initiator_date,
                    string approval_id,
                    string approval_date)
        {
            this.UpdateBVNAsync(customerID, bvn, sig_seq, bvn_location, first_name, last_name, middle_name, date_of_birth, phone_number, image_file, signatory_seq, acct_type, initiator_id, initiator_date, approval_id, approval_date, null);
        }

        /// <remarks/>
        public void UpdateBVNAsync(
                    string customerID,
                    string bvn,
                    string sig_seq,
                    string bvn_location,
                    string first_name,
                    string last_name,
                    string middle_name,
                    string date_of_birth,
                    string phone_number,
                    string image_file,
                    string signatory_seq,
                    string acct_type,
                    string initiator_id,
                    string initiator_date,
                    string approval_id,
                    string approval_date,
                    object userState)
        {
            if ((this.UpdateBVNOperationCompleted == null))
            {
                this.UpdateBVNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBVNOperationCompleted);
            }
            this.InvokeAsync("UpdateBVN", new object[] {
                    customerID,
                    bvn,
                    sig_seq,
                    bvn_location,
                    first_name,
                    last_name,
                    middle_name,
                    date_of_birth,
                    phone_number,
                    image_file,
                    signatory_seq,
                    acct_type,
                    initiator_id,
                    initiator_date,
                    approval_id,
                    approval_date}, this.UpdateBVNOperationCompleted, userState);
        }

        private void OnUpdateBVNOperationCompleted(object arg)
        {
            if ((this.UpdateBVNCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBVNCompleted(this, new UpdateBVNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBasisSignatureAndSequence1", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CustSigVal GetBasisSignatureAndSequence1(int branch_code, int Customer_no, string approved)
        {
            object[] results = this.Invoke("GetBasisSignatureAndSequence1", new object[] {
                    branch_code,
                    Customer_no,
                    approved});
            return ((CustSigVal)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBasisSignatureAndSequence1(int branch_code, int Customer_no, string approved, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBasisSignatureAndSequence1", new object[] {
                    branch_code,
                    Customer_no,
                    approved}, callback, asyncState);
        }

        /// <remarks/>
        public CustSigVal EndGetBasisSignatureAndSequence1(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((CustSigVal)(results[0]));
        }

        /// <remarks/>
        public void GetBasisSignatureAndSequence1Async(int branch_code, int Customer_no, string approved)
        {
            this.GetBasisSignatureAndSequence1Async(branch_code, Customer_no, approved, null);
        }

        /// <remarks/>
        public void GetBasisSignatureAndSequence1Async(int branch_code, int Customer_no, string approved, object userState)
        {
            if ((this.GetBasisSignatureAndSequence1OperationCompleted == null))
            {
                this.GetBasisSignatureAndSequence1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasisSignatureAndSequence1OperationCompleted);
            }
            this.InvokeAsync("GetBasisSignatureAndSequence1", new object[] {
                    branch_code,
                    Customer_no,
                    approved}, this.GetBasisSignatureAndSequence1OperationCompleted, userState);
        }

        private void OnGetBasisSignatureAndSequence1OperationCompleted(object arg)
        {
            if ((this.GetBasisSignatureAndSequence1Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasisSignatureAndSequence1Completed(this, new GetBasisSignatureAndSequence1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InitiateIRefer", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InitiateIRefer(int braCode, int cusnum, string Referred_name, string Referred_mobileno, string Referred_email, string Channel, string initiator, string nubannumber)
        {
            object[] results = this.Invoke("InitiateIRefer", new object[] {
                    braCode,
                    cusnum,
                    Referred_name,
                    Referred_mobileno,
                    Referred_email,
                    Channel,
                    initiator,
                    nubannumber});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInitiateIRefer(int braCode, int cusnum, string Referred_name, string Referred_mobileno, string Referred_email, string Channel, string initiator, string nubannumber, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InitiateIRefer", new object[] {
                    braCode,
                    cusnum,
                    Referred_name,
                    Referred_mobileno,
                    Referred_email,
                    Channel,
                    initiator,
                    nubannumber}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInitiateIRefer(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InitiateIReferAsync(int braCode, int cusnum, string Referred_name, string Referred_mobileno, string Referred_email, string Channel, string initiator, string nubannumber)
        {
            this.InitiateIReferAsync(braCode, cusnum, Referred_name, Referred_mobileno, Referred_email, Channel, initiator, nubannumber, null);
        }

        /// <remarks/>
        public void InitiateIReferAsync(int braCode, int cusnum, string Referred_name, string Referred_mobileno, string Referred_email, string Channel, string initiator, string nubannumber, object userState)
        {
            if ((this.InitiateIReferOperationCompleted == null))
            {
                this.InitiateIReferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateIReferOperationCompleted);
            }
            this.InvokeAsync("InitiateIRefer", new object[] {
                    braCode,
                    cusnum,
                    Referred_name,
                    Referred_mobileno,
                    Referred_email,
                    Channel,
                    initiator,
                    nubannumber}, this.InitiateIReferOperationCompleted, userState);
        }

        private void OnInitiateIReferOperationCompleted(object arg)
        {
            if ((this.InitiateIReferCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateIReferCompleted(this, new InitiateIReferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllRestrictions", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getAllRestrictions(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code)
        {
            object[] results = this.Invoke("getAllRestrictions", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetAllRestrictions(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getAllRestrictions", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetAllRestrictions(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getAllRestrictionsAsync(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code)
        {
            this.getAllRestrictionsAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, null);
        }

        /// <remarks/>
        public void getAllRestrictionsAsync(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, object userState)
        {
            if ((this.getAllRestrictionsOperationCompleted == null))
            {
                this.getAllRestrictionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllRestrictionsOperationCompleted);
            }
            this.InvokeAsync("getAllRestrictions", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, this.getAllRestrictionsOperationCompleted, userState);
        }

        private void OngetAllRestrictionsOperationCompleted(object arg)
        {
            if ((this.getAllRestrictionsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllRestrictionsCompleted(this, new getAllRestrictionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getTransactFromBasis", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getTransactFromBasis(int bra_codefrm, int cus_numfrm, int cur_codefrm, int led_codefrm, int sub_acct_codefrm, int bra_codeto, int cus_numto, int cur_codeto, int led_codeto, int sub_acct_codeto, double amt)
        {
            object[] results = this.Invoke("getTransactFromBasis", new object[] {
                    bra_codefrm,
                    cus_numfrm,
                    cur_codefrm,
                    led_codefrm,
                    sub_acct_codefrm,
                    bra_codeto,
                    cus_numto,
                    cur_codeto,
                    led_codeto,
                    sub_acct_codeto,
                    amt});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetTransactFromBasis(int bra_codefrm, int cus_numfrm, int cur_codefrm, int led_codefrm, int sub_acct_codefrm, int bra_codeto, int cus_numto, int cur_codeto, int led_codeto, int sub_acct_codeto, double amt, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getTransactFromBasis", new object[] {
                    bra_codefrm,
                    cus_numfrm,
                    cur_codefrm,
                    led_codefrm,
                    sub_acct_codefrm,
                    bra_codeto,
                    cus_numto,
                    cur_codeto,
                    led_codeto,
                    sub_acct_codeto,
                    amt}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetTransactFromBasis(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getTransactFromBasisAsync(int bra_codefrm, int cus_numfrm, int cur_codefrm, int led_codefrm, int sub_acct_codefrm, int bra_codeto, int cus_numto, int cur_codeto, int led_codeto, int sub_acct_codeto, double amt)
        {
            this.getTransactFromBasisAsync(bra_codefrm, cus_numfrm, cur_codefrm, led_codefrm, sub_acct_codefrm, bra_codeto, cus_numto, cur_codeto, led_codeto, sub_acct_codeto, amt, null);
        }

        /// <remarks/>
        public void getTransactFromBasisAsync(int bra_codefrm, int cus_numfrm, int cur_codefrm, int led_codefrm, int sub_acct_codefrm, int bra_codeto, int cus_numto, int cur_codeto, int led_codeto, int sub_acct_codeto, double amt, object userState)
        {
            if ((this.getTransactFromBasisOperationCompleted == null))
            {
                this.getTransactFromBasisOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTransactFromBasisOperationCompleted);
            }
            this.InvokeAsync("getTransactFromBasis", new object[] {
                    bra_codefrm,
                    cus_numfrm,
                    cur_codefrm,
                    led_codefrm,
                    sub_acct_codefrm,
                    bra_codeto,
                    cus_numto,
                    cur_codeto,
                    led_codeto,
                    sub_acct_codeto,
                    amt}, this.getTransactFromBasisOperationCompleted, userState);
        }

        private void OngetTransactFromBasisOperationCompleted(object arg)
        {
            if ((this.getTransactFromBasisCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTransactFromBasisCompleted(this, new getTransactFromBasisCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getbalLimit", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getbalLimit(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code)
        {
            object[] results = this.Invoke("getbalLimit", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetbalLimit(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getbalLimit", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetbalLimit(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getbalLimitAsync(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code)
        {
            this.getbalLimitAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, null);
        }

        /// <remarks/>
        public void getbalLimitAsync(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, object userState)
        {
            if ((this.getbalLimitOperationCompleted == null))
            {
                this.getbalLimitOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetbalLimitOperationCompleted);
            }
            this.InvokeAsync("getbalLimit", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, this.getbalLimitOperationCompleted, userState);
        }

        private void OngetbalLimitOperationCompleted(object arg)
        {
            if ((this.getbalLimitCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getbalLimitCompleted(this, new getbalLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getRestrictions1314", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getRestrictions1314(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code)
        {
            object[] results = this.Invoke("getRestrictions1314", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetRestrictions1314(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getRestrictions1314", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetRestrictions1314(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getRestrictions1314Async(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code)
        {
            this.getRestrictions1314Async(bra_code, cus_num, cur_code, led_code, sub_acct_code, null);
        }

        /// <remarks/>
        public void getRestrictions1314Async(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, object userState)
        {
            if ((this.getRestrictions1314OperationCompleted == null))
            {
                this.getRestrictions1314OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRestrictions1314OperationCompleted);
            }
            this.InvokeAsync("getRestrictions1314", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, this.getRestrictions1314OperationCompleted, userState);
        }

        private void OngetRestrictions1314OperationCompleted(object arg)
        {
            if ((this.getRestrictions1314Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRestrictions1314Completed(this, new getRestrictions1314CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllRestrictionsForBVN", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getAllRestrictionsForBVN(int bra_code, int cus_num)
        {
            object[] results = this.Invoke("getAllRestrictionsForBVN", new object[] {
                    bra_code,
                    cus_num});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetAllRestrictionsForBVN(int bra_code, int cus_num, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getAllRestrictionsForBVN", new object[] {
                    bra_code,
                    cus_num}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetAllRestrictionsForBVN(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getAllRestrictionsForBVNAsync(int bra_code, int cus_num)
        {
            this.getAllRestrictionsForBVNAsync(bra_code, cus_num, null);
        }

        /// <remarks/>
        public void getAllRestrictionsForBVNAsync(int bra_code, int cus_num, object userState)
        {
            if ((this.getAllRestrictionsForBVNOperationCompleted == null))
            {
                this.getAllRestrictionsForBVNOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllRestrictionsForBVNOperationCompleted);
            }
            this.InvokeAsync("getAllRestrictionsForBVN", new object[] {
                    bra_code,
                    cus_num}, this.getAllRestrictionsForBVNOperationCompleted, userState);
        }

        private void OngetAllRestrictionsForBVNOperationCompleted(object arg)
        {
            if ((this.getAllRestrictionsForBVNCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllRestrictionsForBVNCompleted(this, new getAllRestrictionsForBVNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddRestrictionbvn", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddRestrictionbvn(int bra_code, int cus_num)
        {
            object[] results = this.Invoke("AddRestrictionbvn", new object[] {
                    bra_code,
                    cus_num});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddRestrictionbvn(int bra_code, int cus_num, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddRestrictionbvn", new object[] {
                    bra_code,
                    cus_num}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAddRestrictionbvn(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AddRestrictionbvnAsync(int bra_code, int cus_num)
        {
            this.AddRestrictionbvnAsync(bra_code, cus_num, null);
        }

        /// <remarks/>
        public void AddRestrictionbvnAsync(int bra_code, int cus_num, object userState)
        {
            if ((this.AddRestrictionbvnOperationCompleted == null))
            {
                this.AddRestrictionbvnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRestrictionbvnOperationCompleted);
            }
            this.InvokeAsync("AddRestrictionbvn", new object[] {
                    bra_code,
                    cus_num}, this.AddRestrictionbvnOperationCompleted, userState);
        }

        private void OnAddRestrictionbvnOperationCompleted(object arg)
        {
            if ((this.AddRestrictionbvnCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRestrictionbvnCompleted(this, new AddRestrictionbvnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddRestriction", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddRestriction(int tell_id, int branchcode, int customernum, int currencycode, int ledgercode, int subacctcode, int restrictcode, string restricttext)
        {
            object[] results = this.Invoke("AddRestriction", new object[] {
                    tell_id,
                    branchcode,
                    customernum,
                    currencycode,
                    ledgercode,
                    subacctcode,
                    restrictcode,
                    restricttext});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddRestriction(int tell_id, int branchcode, int customernum, int currencycode, int ledgercode, int subacctcode, int restrictcode, string restricttext, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddRestriction", new object[] {
                    tell_id,
                    branchcode,
                    customernum,
                    currencycode,
                    ledgercode,
                    subacctcode,
                    restrictcode,
                    restricttext}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAddRestriction(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AddRestrictionAsync(int tell_id, int branchcode, int customernum, int currencycode, int ledgercode, int subacctcode, int restrictcode, string restricttext)
        {
            this.AddRestrictionAsync(tell_id, branchcode, customernum, currencycode, ledgercode, subacctcode, restrictcode, restricttext, null);
        }

        /// <remarks/>
        public void AddRestrictionAsync(int tell_id, int branchcode, int customernum, int currencycode, int ledgercode, int subacctcode, int restrictcode, string restricttext, object userState)
        {
            if ((this.AddRestrictionOperationCompleted == null))
            {
                this.AddRestrictionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRestrictionOperationCompleted);
            }
            this.InvokeAsync("AddRestriction", new object[] {
                    tell_id,
                    branchcode,
                    customernum,
                    currencycode,
                    ledgercode,
                    subacctcode,
                    restrictcode,
                    restricttext}, this.AddRestrictionOperationCompleted, userState);
        }

        private void OnAddRestrictionOperationCompleted(object arg)
        {
            if ((this.AddRestrictionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRestrictionCompleted(this, new AddRestrictionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddRelationship", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddRelationship(
                    int braCode,
                    int cusNum,
                    string idType,
                    string idNum,
                    string issLoc,
                    string issDate,
                    string expDate,
                    string fullName,
                    string birDate,
                    string birLoc,
                    string nationality,
                    string jobPos,
                    string jobDesc,
                    string polPos,
                    string telNum,
                    string mobNum,
                    string homePrv,
                    string homeCity,
                    string homeStrt,
                    string workPrv,
                    string workCity,
                    string workStrt,
                    string rea,
                    string rel,
                    string othBraCode,
                    string othCusNum,
                    int tellId)
        {
            object[] results = this.Invoke("AddRelationship", new object[] {
                    braCode,
                    cusNum,
                    idType,
                    idNum,
                    issLoc,
                    issDate,
                    expDate,
                    fullName,
                    birDate,
                    birLoc,
                    nationality,
                    jobPos,
                    jobDesc,
                    polPos,
                    telNum,
                    mobNum,
                    homePrv,
                    homeCity,
                    homeStrt,
                    workPrv,
                    workCity,
                    workStrt,
                    rea,
                    rel,
                    othBraCode,
                    othCusNum,
                    tellId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddRelationship(
                    int braCode,
                    int cusNum,
                    string idType,
                    string idNum,
                    string issLoc,
                    string issDate,
                    string expDate,
                    string fullName,
                    string birDate,
                    string birLoc,
                    string nationality,
                    string jobPos,
                    string jobDesc,
                    string polPos,
                    string telNum,
                    string mobNum,
                    string homePrv,
                    string homeCity,
                    string homeStrt,
                    string workPrv,
                    string workCity,
                    string workStrt,
                    string rea,
                    string rel,
                    string othBraCode,
                    string othCusNum,
                    int tellId,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("AddRelationship", new object[] {
                    braCode,
                    cusNum,
                    idType,
                    idNum,
                    issLoc,
                    issDate,
                    expDate,
                    fullName,
                    birDate,
                    birLoc,
                    nationality,
                    jobPos,
                    jobDesc,
                    polPos,
                    telNum,
                    mobNum,
                    homePrv,
                    homeCity,
                    homeStrt,
                    workPrv,
                    workCity,
                    workStrt,
                    rea,
                    rel,
                    othBraCode,
                    othCusNum,
                    tellId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAddRelationship(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AddRelationshipAsync(
                    int braCode,
                    int cusNum,
                    string idType,
                    string idNum,
                    string issLoc,
                    string issDate,
                    string expDate,
                    string fullName,
                    string birDate,
                    string birLoc,
                    string nationality,
                    string jobPos,
                    string jobDesc,
                    string polPos,
                    string telNum,
                    string mobNum,
                    string homePrv,
                    string homeCity,
                    string homeStrt,
                    string workPrv,
                    string workCity,
                    string workStrt,
                    string rea,
                    string rel,
                    string othBraCode,
                    string othCusNum,
                    int tellId)
        {
            this.AddRelationshipAsync(braCode, cusNum, idType, idNum, issLoc, issDate, expDate, fullName, birDate, birLoc, nationality, jobPos, jobDesc, polPos, telNum, mobNum, homePrv, homeCity, homeStrt, workPrv, workCity, workStrt, rea, rel, othBraCode, othCusNum, tellId, null);
        }

        /// <remarks/>
        public void AddRelationshipAsync(
                    int braCode,
                    int cusNum,
                    string idType,
                    string idNum,
                    string issLoc,
                    string issDate,
                    string expDate,
                    string fullName,
                    string birDate,
                    string birLoc,
                    string nationality,
                    string jobPos,
                    string jobDesc,
                    string polPos,
                    string telNum,
                    string mobNum,
                    string homePrv,
                    string homeCity,
                    string homeStrt,
                    string workPrv,
                    string workCity,
                    string workStrt,
                    string rea,
                    string rel,
                    string othBraCode,
                    string othCusNum,
                    int tellId,
                    object userState)
        {
            if ((this.AddRelationshipOperationCompleted == null))
            {
                this.AddRelationshipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRelationshipOperationCompleted);
            }
            this.InvokeAsync("AddRelationship", new object[] {
                    braCode,
                    cusNum,
                    idType,
                    idNum,
                    issLoc,
                    issDate,
                    expDate,
                    fullName,
                    birDate,
                    birLoc,
                    nationality,
                    jobPos,
                    jobDesc,
                    polPos,
                    telNum,
                    mobNum,
                    homePrv,
                    homeCity,
                    homeStrt,
                    workPrv,
                    workCity,
                    workStrt,
                    rea,
                    rel,
                    othBraCode,
                    othCusNum,
                    tellId}, this.AddRelationshipOperationCompleted, userState);
        }

        private void OnAddRelationshipOperationCompleted(object arg)
        {
            if ((this.AddRelationshipCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRelationshipCompleted(this, new AddRelationshipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TbillsDeal", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TbillsDeal(int braCode, int tra_seq, int tra_seq1, string ori_tra_date, int orig_braCode, int tra_seq_dis, string tra_date_disc, string deb_acc, string cre_acc, string deal_val_date, int tellId)
        {
            object[] results = this.Invoke("TbillsDeal", new object[] {
                    braCode,
                    tra_seq,
                    tra_seq1,
                    ori_tra_date,
                    orig_braCode,
                    tra_seq_dis,
                    tra_date_disc,
                    deb_acc,
                    cre_acc,
                    deal_val_date,
                    tellId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTbillsDeal(int braCode, int tra_seq, int tra_seq1, string ori_tra_date, int orig_braCode, int tra_seq_dis, string tra_date_disc, string deb_acc, string cre_acc, string deal_val_date, int tellId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("TbillsDeal", new object[] {
                    braCode,
                    tra_seq,
                    tra_seq1,
                    ori_tra_date,
                    orig_braCode,
                    tra_seq_dis,
                    tra_date_disc,
                    deb_acc,
                    cre_acc,
                    deal_val_date,
                    tellId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTbillsDeal(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TbillsDealAsync(int braCode, int tra_seq, int tra_seq1, string ori_tra_date, int orig_braCode, int tra_seq_dis, string tra_date_disc, string deb_acc, string cre_acc, string deal_val_date, int tellId)
        {
            this.TbillsDealAsync(braCode, tra_seq, tra_seq1, ori_tra_date, orig_braCode, tra_seq_dis, tra_date_disc, deb_acc, cre_acc, deal_val_date, tellId, null);
        }

        /// <remarks/>
        public void TbillsDealAsync(int braCode, int tra_seq, int tra_seq1, string ori_tra_date, int orig_braCode, int tra_seq_dis, string tra_date_disc, string deb_acc, string cre_acc, string deal_val_date, int tellId, object userState)
        {
            if ((this.TbillsDealOperationCompleted == null))
            {
                this.TbillsDealOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTbillsDealOperationCompleted);
            }
            this.InvokeAsync("TbillsDeal", new object[] {
                    braCode,
                    tra_seq,
                    tra_seq1,
                    ori_tra_date,
                    orig_braCode,
                    tra_seq_dis,
                    tra_date_disc,
                    deb_acc,
                    cre_acc,
                    deal_val_date,
                    tellId}, this.TbillsDealOperationCompleted, userState);
        }

        private void OnTbillsDealOperationCompleted(object arg)
        {
            if ((this.TbillsDealCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TbillsDealCompleted(this, new TbillsDealCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddDirectorInfo", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddDirectorInfo(
                    int braCode,
                    int cusNum,
                    int titlecode,
                    string mob_num,
                    string email,
                    string occapation,
                    string birDate,
                    int nationality,
                    string idType,
                    string idNum,
                    int tellId,
                    int coun_res,
                    string FirstName,
                    string LastName,
                    string MiddleName,
                    string id_issue_date,
                    string id_exp_date,
                    string residence)
        {
            object[] results = this.Invoke("AddDirectorInfo", new object[] {
                    braCode,
                    cusNum,
                    titlecode,
                    mob_num,
                    email,
                    occapation,
                    birDate,
                    nationality,
                    idType,
                    idNum,
                    tellId,
                    coun_res,
                    FirstName,
                    LastName,
                    MiddleName,
                    id_issue_date,
                    id_exp_date,
                    residence});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddDirectorInfo(
                    int braCode,
                    int cusNum,
                    int titlecode,
                    string mob_num,
                    string email,
                    string occapation,
                    string birDate,
                    int nationality,
                    string idType,
                    string idNum,
                    int tellId,
                    int coun_res,
                    string FirstName,
                    string LastName,
                    string MiddleName,
                    string id_issue_date,
                    string id_exp_date,
                    string residence,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("AddDirectorInfo", new object[] {
                    braCode,
                    cusNum,
                    titlecode,
                    mob_num,
                    email,
                    occapation,
                    birDate,
                    nationality,
                    idType,
                    idNum,
                    tellId,
                    coun_res,
                    FirstName,
                    LastName,
                    MiddleName,
                    id_issue_date,
                    id_exp_date,
                    residence}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAddDirectorInfo(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AddDirectorInfoAsync(
                    int braCode,
                    int cusNum,
                    int titlecode,
                    string mob_num,
                    string email,
                    string occapation,
                    string birDate,
                    int nationality,
                    string idType,
                    string idNum,
                    int tellId,
                    int coun_res,
                    string FirstName,
                    string LastName,
                    string MiddleName,
                    string id_issue_date,
                    string id_exp_date,
                    string residence)
        {
            this.AddDirectorInfoAsync(braCode, cusNum, titlecode, mob_num, email, occapation, birDate, nationality, idType, idNum, tellId, coun_res, FirstName, LastName, MiddleName, id_issue_date, id_exp_date, residence, null);
        }

        /// <remarks/>
        public void AddDirectorInfoAsync(
                    int braCode,
                    int cusNum,
                    int titlecode,
                    string mob_num,
                    string email,
                    string occapation,
                    string birDate,
                    int nationality,
                    string idType,
                    string idNum,
                    int tellId,
                    int coun_res,
                    string FirstName,
                    string LastName,
                    string MiddleName,
                    string id_issue_date,
                    string id_exp_date,
                    string residence,
                    object userState)
        {
            if ((this.AddDirectorInfoOperationCompleted == null))
            {
                this.AddDirectorInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDirectorInfoOperationCompleted);
            }
            this.InvokeAsync("AddDirectorInfo", new object[] {
                    braCode,
                    cusNum,
                    titlecode,
                    mob_num,
                    email,
                    occapation,
                    birDate,
                    nationality,
                    idType,
                    idNum,
                    tellId,
                    coun_res,
                    FirstName,
                    LastName,
                    MiddleName,
                    id_issue_date,
                    id_exp_date,
                    residence}, this.AddDirectorInfoOperationCompleted, userState);
        }

        private void OnAddDirectorInfoOperationCompleted(object arg)
        {
            if ((this.AddDirectorInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDirectorInfoCompleted(this, new AddDirectorInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CarVehicle", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CarVehicle(string CaseId, string CaseNumber, string VehicleType, string RegistrationNumber, string NameOfDriver, string PhoneNumber, string TakeOffTime, string TakeOffDate, string ReturnTime, string ReturnDate)
        {
            object[] results = this.Invoke("CarVehicle", new object[] {
                    CaseId,
                    CaseNumber,
                    VehicleType,
                    RegistrationNumber,
                    NameOfDriver,
                    PhoneNumber,
                    TakeOffTime,
                    TakeOffDate,
                    ReturnTime,
                    ReturnDate});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCarVehicle(string CaseId, string CaseNumber, string VehicleType, string RegistrationNumber, string NameOfDriver, string PhoneNumber, string TakeOffTime, string TakeOffDate, string ReturnTime, string ReturnDate, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CarVehicle", new object[] {
                    CaseId,
                    CaseNumber,
                    VehicleType,
                    RegistrationNumber,
                    NameOfDriver,
                    PhoneNumber,
                    TakeOffTime,
                    TakeOffDate,
                    ReturnTime,
                    ReturnDate}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCarVehicle(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CarVehicleAsync(string CaseId, string CaseNumber, string VehicleType, string RegistrationNumber, string NameOfDriver, string PhoneNumber, string TakeOffTime, string TakeOffDate, string ReturnTime, string ReturnDate)
        {
            this.CarVehicleAsync(CaseId, CaseNumber, VehicleType, RegistrationNumber, NameOfDriver, PhoneNumber, TakeOffTime, TakeOffDate, ReturnTime, ReturnDate, null);
        }

        /// <remarks/>
        public void CarVehicleAsync(string CaseId, string CaseNumber, string VehicleType, string RegistrationNumber, string NameOfDriver, string PhoneNumber, string TakeOffTime, string TakeOffDate, string ReturnTime, string ReturnDate, object userState)
        {
            if ((this.CarVehicleOperationCompleted == null))
            {
                this.CarVehicleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCarVehicleOperationCompleted);
            }
            this.InvokeAsync("CarVehicle", new object[] {
                    CaseId,
                    CaseNumber,
                    VehicleType,
                    RegistrationNumber,
                    NameOfDriver,
                    PhoneNumber,
                    TakeOffTime,
                    TakeOffDate,
                    ReturnTime,
                    ReturnDate}, this.CarVehicleOperationCompleted, userState);
        }

        private void OnCarVehicleOperationCompleted(object arg)
        {
            if ((this.CarVehicleCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CarVehicleCompleted(this, new CarVehicleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CarReturn", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CarReturn(string CaseId)
        {
            object[] results = this.Invoke("CarReturn", new object[] {
                    CaseId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCarReturn(string CaseId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CarReturn", new object[] {
                    CaseId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCarReturn(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CarReturnAsync(string CaseId)
        {
            this.CarReturnAsync(CaseId, null);
        }

        /// <remarks/>
        public void CarReturnAsync(string CaseId, object userState)
        {
            if ((this.CarReturnOperationCompleted == null))
            {
                this.CarReturnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCarReturnOperationCompleted);
            }
            this.InvokeAsync("CarReturn", new object[] {
                    CaseId}, this.CarReturnOperationCompleted, userState);
        }

        private void OnCarReturnOperationCompleted(object arg)
        {
            if ((this.CarReturnCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CarReturnCompleted(this, new CarReturnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveRestrictionbvn", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemoveRestrictionbvn(int bra_code, int cus_num)
        {
            object[] results = this.Invoke("RemoveRestrictionbvn", new object[] {
                    bra_code,
                    cus_num});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveRestrictionbvn(int bra_code, int cus_num, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RemoveRestrictionbvn", new object[] {
                    bra_code,
                    cus_num}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRemoveRestrictionbvn(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RemoveRestrictionbvnAsync(int bra_code, int cus_num)
        {
            this.RemoveRestrictionbvnAsync(bra_code, cus_num, null);
        }

        /// <remarks/>
        public void RemoveRestrictionbvnAsync(int bra_code, int cus_num, object userState)
        {
            if ((this.RemoveRestrictionbvnOperationCompleted == null))
            {
                this.RemoveRestrictionbvnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRestrictionbvnOperationCompleted);
            }
            this.InvokeAsync("RemoveRestrictionbvn", new object[] {
                    bra_code,
                    cus_num}, this.RemoveRestrictionbvnOperationCompleted, userState);
        }

        private void OnRemoveRestrictionbvnOperationCompleted(object arg)
        {
            if ((this.RemoveRestrictionbvnCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRestrictionbvnCompleted(this, new RemoveRestrictionbvnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveRestriction", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemoveRestriction(int tell_id, int branchcode, int customernum, int currencycode, int ledgercode, int subacctcode, int restrictcode, string restricttext, int restrictionseq, int opetype)
        {
            object[] results = this.Invoke("RemoveRestriction", new object[] {
                    tell_id,
                    branchcode,
                    customernum,
                    currencycode,
                    ledgercode,
                    subacctcode,
                    restrictcode,
                    restricttext,
                    restrictionseq,
                    opetype});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveRestriction(int tell_id, int branchcode, int customernum, int currencycode, int ledgercode, int subacctcode, int restrictcode, string restricttext, int restrictionseq, int opetype, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RemoveRestriction", new object[] {
                    tell_id,
                    branchcode,
                    customernum,
                    currencycode,
                    ledgercode,
                    subacctcode,
                    restrictcode,
                    restricttext,
                    restrictionseq,
                    opetype}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRemoveRestriction(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RemoveRestrictionAsync(int tell_id, int branchcode, int customernum, int currencycode, int ledgercode, int subacctcode, int restrictcode, string restricttext, int restrictionseq, int opetype)
        {
            this.RemoveRestrictionAsync(tell_id, branchcode, customernum, currencycode, ledgercode, subacctcode, restrictcode, restricttext, restrictionseq, opetype, null);
        }

        /// <remarks/>
        public void RemoveRestrictionAsync(int tell_id, int branchcode, int customernum, int currencycode, int ledgercode, int subacctcode, int restrictcode, string restricttext, int restrictionseq, int opetype, object userState)
        {
            if ((this.RemoveRestrictionOperationCompleted == null))
            {
                this.RemoveRestrictionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRestrictionOperationCompleted);
            }
            this.InvokeAsync("RemoveRestriction", new object[] {
                    tell_id,
                    branchcode,
                    customernum,
                    currencycode,
                    ledgercode,
                    subacctcode,
                    restrictcode,
                    restricttext,
                    restrictionseq,
                    opetype}, this.RemoveRestrictionOperationCompleted, userState);
        }

        private void OnRemoveRestrictionOperationCompleted(object arg)
        {
            if ((this.RemoveRestrictionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRestrictionCompleted(this, new RemoveRestrictionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBasisCustomerSignature", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] GetBasisCustomerSignature(int branch_code, int Customer_no)
        {
            object[] results = this.Invoke("GetBasisCustomerSignature", new object[] {
                    branch_code,
                    Customer_no});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBasisCustomerSignature(int branch_code, int Customer_no, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBasisCustomerSignature", new object[] {
                    branch_code,
                    Customer_no}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndGetBasisCustomerSignature(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void GetBasisCustomerSignatureAsync(int branch_code, int Customer_no)
        {
            this.GetBasisCustomerSignatureAsync(branch_code, Customer_no, null);
        }

        /// <remarks/>
        public void GetBasisCustomerSignatureAsync(int branch_code, int Customer_no, object userState)
        {
            if ((this.GetBasisCustomerSignatureOperationCompleted == null))
            {
                this.GetBasisCustomerSignatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasisCustomerSignatureOperationCompleted);
            }
            this.InvokeAsync("GetBasisCustomerSignature", new object[] {
                    branch_code,
                    Customer_no}, this.GetBasisCustomerSignatureOperationCompleted, userState);
        }

        private void OnGetBasisCustomerSignatureOperationCompleted(object arg)
        {
            if ((this.GetBasisCustomerSignatureCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasisCustomerSignatureCompleted(this, new GetBasisCustomerSignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBasisSignatures", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetBasisSignatures(int branch_code, int Customer_no)
        {
            object[] results = this.Invoke("GetBasisSignatures", new object[] {
                    branch_code,
                    Customer_no});
            return ((object[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBasisSignatures(int branch_code, int Customer_no, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBasisSignatures", new object[] {
                    branch_code,
                    Customer_no}, callback, asyncState);
        }

        /// <remarks/>
        public object[] EndGetBasisSignatures(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }

        /// <remarks/>
        public void GetBasisSignaturesAsync(int branch_code, int Customer_no)
        {
            this.GetBasisSignaturesAsync(branch_code, Customer_no, null);
        }

        /// <remarks/>
        public void GetBasisSignaturesAsync(int branch_code, int Customer_no, object userState)
        {
            if ((this.GetBasisSignaturesOperationCompleted == null))
            {
                this.GetBasisSignaturesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasisSignaturesOperationCompleted);
            }
            this.InvokeAsync("GetBasisSignatures", new object[] {
                    branch_code,
                    Customer_no}, this.GetBasisSignaturesOperationCompleted, userState);
        }

        private void OnGetBasisSignaturesOperationCompleted(object arg)
        {
            if ((this.GetBasisSignaturesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasisSignaturesCompleted(this, new GetBasisSignaturesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateVersionDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateVersionDetails(string appid, int mainNo, int moduleNo, int featureNo, int bugNo, string releaseBy, string deployedBy, int caseId)
        {
            object[] results = this.Invoke("UpdateVersionDetails", new object[] {
                    appid,
                    mainNo,
                    moduleNo,
                    featureNo,
                    bugNo,
                    releaseBy,
                    deployedBy,
                    caseId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateVersionDetails(string appid, int mainNo, int moduleNo, int featureNo, int bugNo, string releaseBy, string deployedBy, int caseId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateVersionDetails", new object[] {
                    appid,
                    mainNo,
                    moduleNo,
                    featureNo,
                    bugNo,
                    releaseBy,
                    deployedBy,
                    caseId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateVersionDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateVersionDetailsAsync(string appid, int mainNo, int moduleNo, int featureNo, int bugNo, string releaseBy, string deployedBy, int caseId)
        {
            this.UpdateVersionDetailsAsync(appid, mainNo, moduleNo, featureNo, bugNo, releaseBy, deployedBy, caseId, null);
        }

        /// <remarks/>
        public void UpdateVersionDetailsAsync(string appid, int mainNo, int moduleNo, int featureNo, int bugNo, string releaseBy, string deployedBy, int caseId, object userState)
        {
            if ((this.UpdateVersionDetailsOperationCompleted == null))
            {
                this.UpdateVersionDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateVersionDetailsOperationCompleted);
            }
            this.InvokeAsync("UpdateVersionDetails", new object[] {
                    appid,
                    mainNo,
                    moduleNo,
                    featureNo,
                    bugNo,
                    releaseBy,
                    deployedBy,
                    caseId}, this.UpdateVersionDetailsOperationCompleted, userState);
        }

        private void OnUpdateVersionDetailsOperationCompleted(object arg)
        {
            if ((this.UpdateVersionDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateVersionDetailsCompleted(this, new UpdateVersionDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SoftTokenSerialNo", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SoftTokenSerialNo()
        {
            object[] results = this.Invoke("SoftTokenSerialNo", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSoftTokenSerialNo(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SoftTokenSerialNo", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndSoftTokenSerialNo(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SoftTokenSerialNoAsync()
        {
            this.SoftTokenSerialNoAsync(null);
        }

        /// <remarks/>
        public void SoftTokenSerialNoAsync(object userState)
        {
            if ((this.SoftTokenSerialNoOperationCompleted == null))
            {
                this.SoftTokenSerialNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSoftTokenSerialNoOperationCompleted);
            }
            this.InvokeAsync("SoftTokenSerialNo", new object[0], this.SoftTokenSerialNoOperationCompleted, userState);
        }

        private void OnSoftTokenSerialNoOperationCompleted(object arg)
        {
            if ((this.SoftTokenSerialNoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SoftTokenSerialNoCompleted(this, new SoftTokenSerialNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBasisTellerTillAcct", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBasisTellerTillAcct(string bracode, string tellerid, string curcode)
        {
            object[] results = this.Invoke("GetBasisTellerTillAcct", new object[] {
                    bracode,
                    tellerid,
                    curcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBasisTellerTillAcct(string bracode, string tellerid, string curcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBasisTellerTillAcct", new object[] {
                    bracode,
                    tellerid,
                    curcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetBasisTellerTillAcct(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetBasisTellerTillAcctAsync(string bracode, string tellerid, string curcode)
        {
            this.GetBasisTellerTillAcctAsync(bracode, tellerid, curcode, null);
        }

        /// <remarks/>
        public void GetBasisTellerTillAcctAsync(string bracode, string tellerid, string curcode, object userState)
        {
            if ((this.GetBasisTellerTillAcctOperationCompleted == null))
            {
                this.GetBasisTellerTillAcctOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasisTellerTillAcctOperationCompleted);
            }
            this.InvokeAsync("GetBasisTellerTillAcct", new object[] {
                    bracode,
                    tellerid,
                    curcode}, this.GetBasisTellerTillAcctOperationCompleted, userState);
        }

        private void OnGetBasisTellerTillAcctOperationCompleted(object arg)
        {
            if ((this.GetBasisTellerTillAcctCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasisTellerTillAcctCompleted(this, new GetBasisTellerTillAcctCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getTellerLimit", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getTellerLimit(string tellerId, string bracode)
        {
            object[] results = this.Invoke("getTellerLimit", new object[] {
                    tellerId,
                    bracode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetTellerLimit(string tellerId, string bracode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getTellerLimit", new object[] {
                    tellerId,
                    bracode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetTellerLimit(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getTellerLimitAsync(string tellerId, string bracode)
        {
            this.getTellerLimitAsync(tellerId, bracode, null);
        }

        /// <remarks/>
        public void getTellerLimitAsync(string tellerId, string bracode, object userState)
        {
            if ((this.getTellerLimitOperationCompleted == null))
            {
                this.getTellerLimitOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTellerLimitOperationCompleted);
            }
            this.InvokeAsync("getTellerLimit", new object[] {
                    tellerId,
                    bracode}, this.getTellerLimitOperationCompleted, userState);
        }

        private void OngetTellerLimitOperationCompleted(object arg)
        {
            if ((this.getTellerLimitCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTellerLimitCompleted(this, new getTellerLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getTellerLimitPinPad", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getTellerLimitPinPad()
        {
            object[] results = this.Invoke("getTellerLimitPinPad", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetTellerLimitPinPad(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getTellerLimitPinPad", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndgetTellerLimitPinPad(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getTellerLimitPinPadAsync()
        {
            this.getTellerLimitPinPadAsync(null);
        }

        /// <remarks/>
        public void getTellerLimitPinPadAsync(object userState)
        {
            if ((this.getTellerLimitPinPadOperationCompleted == null))
            {
                this.getTellerLimitPinPadOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTellerLimitPinPadOperationCompleted);
            }
            this.InvokeAsync("getTellerLimitPinPad", new object[0], this.getTellerLimitPinPadOperationCompleted, userState);
        }

        private void OngetTellerLimitPinPadOperationCompleted(object arg)
        {
            if ((this.getTellerLimitPinPadCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTellerLimitPinPadCompleted(this, new getTellerLimitPinPadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTellerID", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTellerID(string user_id)
        {
            object[] results = this.Invoke("GetTellerID", new object[] {
                    user_id});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetTellerID(string user_id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetTellerID", new object[] {
                    user_id}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetTellerID(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetTellerIDAsync(string user_id)
        {
            this.GetTellerIDAsync(user_id, null);
        }

        /// <remarks/>
        public void GetTellerIDAsync(string user_id, object userState)
        {
            if ((this.GetTellerIDOperationCompleted == null))
            {
                this.GetTellerIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTellerIDOperationCompleted);
            }
            this.InvokeAsync("GetTellerID", new object[] {
                    user_id}, this.GetTellerIDOperationCompleted, userState);
        }

        private void OnGetTellerIDOperationCompleted(object arg)
        {
            if ((this.GetTellerIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTellerIDCompleted(this, new GetTellerIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTellerdetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTellerdetails(string user_id)
        {
            object[] results = this.Invoke("GetTellerdetails", new object[] {
                    user_id});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetTellerdetails(string user_id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetTellerdetails", new object[] {
                    user_id}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetTellerdetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetTellerdetailsAsync(string user_id)
        {
            this.GetTellerdetailsAsync(user_id, null);
        }

        /// <remarks/>
        public void GetTellerdetailsAsync(string user_id, object userState)
        {
            if ((this.GetTellerdetailsOperationCompleted == null))
            {
                this.GetTellerdetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTellerdetailsOperationCompleted);
            }
            this.InvokeAsync("GetTellerdetails", new object[] {
                    user_id}, this.GetTellerdetailsOperationCompleted, userState);
        }

        private void OnGetTellerdetailsOperationCompleted(object arg)
        {
            if ((this.GetTellerdetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTellerdetailsCompleted(this, new GetTellerdetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGAPSPM", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetGAPSPM(string bra_code, string cus_num)
        {
            object[] results = this.Invoke("GetGAPSPM", new object[] {
                    bra_code,
                    cus_num});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetGAPSPM(string bra_code, string cus_num, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetGAPSPM", new object[] {
                    bra_code,
                    cus_num}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetGAPSPM(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetGAPSPMAsync(string bra_code, string cus_num)
        {
            this.GetGAPSPMAsync(bra_code, cus_num, null);
        }

        /// <remarks/>
        public void GetGAPSPMAsync(string bra_code, string cus_num, object userState)
        {
            if ((this.GetGAPSPMOperationCompleted == null))
            {
                this.GetGAPSPMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGAPSPMOperationCompleted);
            }
            this.InvokeAsync("GetGAPSPM", new object[] {
                    bra_code,
                    cus_num}, this.GetGAPSPMOperationCompleted, userState);
        }

        private void OnGetGAPSPMOperationCompleted(object arg)
        {
            if ((this.GetGAPSPMCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGAPSPMCompleted(this, new GetGAPSPMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getPinPadValues", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] getPinPadValues()
        {
            object[] results = this.Invoke("getPinPadValues", new object[0]);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetPinPadValues(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getPinPadValues", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string[] EndgetPinPadValues(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void getPinPadValuesAsync()
        {
            this.getPinPadValuesAsync(null);
        }

        /// <remarks/>
        public void getPinPadValuesAsync(object userState)
        {
            if ((this.getPinPadValuesOperationCompleted == null))
            {
                this.getPinPadValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPinPadValuesOperationCompleted);
            }
            this.InvokeAsync("getPinPadValues", new object[0], this.getPinPadValuesOperationCompleted, userState);
        }

        private void OngetPinPadValuesOperationCompleted(object arg)
        {
            if ((this.getPinPadValuesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPinPadValuesCompleted(this, new getPinPadValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getTransactionHistory", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getTransactionHistory(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string startdate, string enddate)
        {
            object[] results = this.Invoke("getTransactionHistory", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    startdate,
                    enddate});
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetTransactionHistory(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string startdate, string enddate, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getTransactionHistory", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    startdate,
                    enddate}, callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataTable EndgetTransactionHistory(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public void getTransactionHistoryAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string startdate, string enddate)
        {
            this.getTransactionHistoryAsync(bracode, cusnum, curcode, ledcode, subacctcode, startdate, enddate, null);
        }

        /// <remarks/>
        public void getTransactionHistoryAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string startdate, string enddate, object userState)
        {
            if ((this.getTransactionHistoryOperationCompleted == null))
            {
                this.getTransactionHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTransactionHistoryOperationCompleted);
            }
            this.InvokeAsync("getTransactionHistory", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    startdate,
                    enddate}, this.getTransactionHistoryOperationCompleted, userState);
        }

        private void OngetTransactionHistoryOperationCompleted(object arg)
        {
            if ((this.getTransactionHistoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTransactionHistoryCompleted(this, new getTransactionHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getTranSeq", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getTranSeq(string origbracode, string accountno, string remark, string expl_code)
        {
            object[] results = this.Invoke("getTranSeq", new object[] {
                    origbracode,
                    accountno,
                    remark,
                    expl_code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetTranSeq(string origbracode, string accountno, string remark, string expl_code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getTranSeq", new object[] {
                    origbracode,
                    accountno,
                    remark,
                    expl_code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetTranSeq(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getTranSeqAsync(string origbracode, string accountno, string remark, string expl_code)
        {
            this.getTranSeqAsync(origbracode, accountno, remark, expl_code, null);
        }

        /// <remarks/>
        public void getTranSeqAsync(string origbracode, string accountno, string remark, string expl_code, object userState)
        {
            if ((this.getTranSeqOperationCompleted == null))
            {
                this.getTranSeqOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTranSeqOperationCompleted);
            }
            this.InvokeAsync("getTranSeq", new object[] {
                    origbracode,
                    accountno,
                    remark,
                    expl_code}, this.getTranSeqOperationCompleted, userState);
        }

        private void OngetTranSeqOperationCompleted(object arg)
        {
            if ((this.getTranSeqCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTranSeqCompleted(this, new getTranSeqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getcusDepositDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] getcusDepositDetails(string nubanaccount)
        {
            object[] results = this.Invoke("getcusDepositDetails", new object[] {
                    nubanaccount});
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetcusDepositDetails(string nubanaccount, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getcusDepositDetails", new object[] {
                    nubanaccount}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndgetcusDepositDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void getcusDepositDetailsAsync(string nubanaccount)
        {
            this.getcusDepositDetailsAsync(nubanaccount, null);
        }

        /// <remarks/>
        public void getcusDepositDetailsAsync(string nubanaccount, object userState)
        {
            if ((this.getcusDepositDetailsOperationCompleted == null))
            {
                this.getcusDepositDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetcusDepositDetailsOperationCompleted);
            }
            this.InvokeAsync("getcusDepositDetails", new object[] {
                    nubanaccount}, this.getcusDepositDetailsOperationCompleted, userState);
        }

        private void OngetcusDepositDetailsOperationCompleted(object arg)
        {
            if ((this.getcusDepositDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getcusDepositDetailsCompleted(this, new getcusDepositDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallOver", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CallOver(string lan_ind, string req_date, string bra_code, string teller_id)
        {
            object[] results = this.Invoke("CallOver", new object[] {
                    lan_ind,
                    req_date,
                    bra_code,
                    teller_id});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCallOver(string lan_ind, string req_date, string bra_code, string teller_id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CallOver", new object[] {
                    lan_ind,
                    req_date,
                    bra_code,
                    teller_id}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCallOver(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CallOverAsync(string lan_ind, string req_date, string bra_code, string teller_id)
        {
            this.CallOverAsync(lan_ind, req_date, bra_code, teller_id, null);
        }

        /// <remarks/>
        public void CallOverAsync(string lan_ind, string req_date, string bra_code, string teller_id, object userState)
        {
            if ((this.CallOverOperationCompleted == null))
            {
                this.CallOverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallOverOperationCompleted);
            }
            this.InvokeAsync("CallOver", new object[] {
                    lan_ind,
                    req_date,
                    bra_code,
                    teller_id}, this.CallOverOperationCompleted, userState);
        }

        private void OnCallOverOperationCompleted(object arg)
        {
            if ((this.CallOverCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallOverCompleted(this, new CallOverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallOver2", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CallOver2(string req_date, string teller_id, int start_seq, int end_seq)
        {
            object[] results = this.Invoke("CallOver2", new object[] {
                    req_date,
                    teller_id,
                    start_seq,
                    end_seq});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCallOver2(string req_date, string teller_id, int start_seq, int end_seq, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CallOver2", new object[] {
                    req_date,
                    teller_id,
                    start_seq,
                    end_seq}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCallOver2(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CallOver2Async(string req_date, string teller_id, int start_seq, int end_seq)
        {
            this.CallOver2Async(req_date, teller_id, start_seq, end_seq, null);
        }

        /// <remarks/>
        public void CallOver2Async(string req_date, string teller_id, int start_seq, int end_seq, object userState)
        {
            if ((this.CallOver2OperationCompleted == null))
            {
                this.CallOver2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallOver2OperationCompleted);
            }
            this.InvokeAsync("CallOver2", new object[] {
                    req_date,
                    teller_id,
                    start_seq,
                    end_seq}, this.CallOver2OperationCompleted, userState);
        }

        private void OnCallOver2OperationCompleted(object arg)
        {
            if ((this.CallOver2Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallOver2Completed(this, new CallOver2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallOverSummary", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CallOverSummary(string req_date, string teller_id, int start_seq, int end_seq)
        {
            object[] results = this.Invoke("CallOverSummary", new object[] {
                    req_date,
                    teller_id,
                    start_seq,
                    end_seq});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCallOverSummary(string req_date, string teller_id, int start_seq, int end_seq, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CallOverSummary", new object[] {
                    req_date,
                    teller_id,
                    start_seq,
                    end_seq}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCallOverSummary(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CallOverSummaryAsync(string req_date, string teller_id, int start_seq, int end_seq)
        {
            this.CallOverSummaryAsync(req_date, teller_id, start_seq, end_seq, null);
        }

        /// <remarks/>
        public void CallOverSummaryAsync(string req_date, string teller_id, int start_seq, int end_seq, object userState)
        {
            if ((this.CallOverSummaryOperationCompleted == null))
            {
                this.CallOverSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallOverSummaryOperationCompleted);
            }
            this.InvokeAsync("CallOverSummary", new object[] {
                    req_date,
                    teller_id,
                    start_seq,
                    end_seq}, this.CallOverSummaryOperationCompleted, userState);
        }

        private void OnCallOverSummaryOperationCompleted(object arg)
        {
            if ((this.CallOverSummaryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallOverSummaryCompleted(this, new CallOverSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getcusDepositDetailsOldAccount", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] getcusDepositDetailsOldAccount(string OldAccountNumber)
        {
            object[] results = this.Invoke("getcusDepositDetailsOldAccount", new object[] {
                    OldAccountNumber});
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetcusDepositDetailsOldAccount(string OldAccountNumber, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getcusDepositDetailsOldAccount", new object[] {
                    OldAccountNumber}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndgetcusDepositDetailsOldAccount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void getcusDepositDetailsOldAccountAsync(string OldAccountNumber)
        {
            this.getcusDepositDetailsOldAccountAsync(OldAccountNumber, null);
        }

        /// <remarks/>
        public void getcusDepositDetailsOldAccountAsync(string OldAccountNumber, object userState)
        {
            if ((this.getcusDepositDetailsOldAccountOperationCompleted == null))
            {
                this.getcusDepositDetailsOldAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetcusDepositDetailsOldAccountOperationCompleted);
            }
            this.InvokeAsync("getcusDepositDetailsOldAccount", new object[] {
                    OldAccountNumber}, this.getcusDepositDetailsOldAccountOperationCompleted, userState);
        }

        private void OngetcusDepositDetailsOldAccountOperationCompleted(object arg)
        {
            if ((this.getcusDepositDetailsOldAccountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getcusDepositDetailsOldAccountCompleted(this, new getcusDepositDetailsOldAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BlockFunds_PM", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BlockFunds_PM(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string remarks, string tra_amount, string expdate, string tellerid, string blkType, string blkTypeCode)
        {
            object[] results = this.Invoke("BlockFunds_PM", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    remarks,
                    tra_amount,
                    expdate,
                    tellerid,
                    blkType,
                    blkTypeCode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginBlockFunds_PM(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string remarks, string tra_amount, string expdate, string tellerid, string blkType, string blkTypeCode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("BlockFunds_PM", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    remarks,
                    tra_amount,
                    expdate,
                    tellerid,
                    blkType,
                    blkTypeCode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndBlockFunds_PM(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void BlockFunds_PMAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string remarks, string tra_amount, string expdate, string tellerid, string blkType, string blkTypeCode)
        {
            this.BlockFunds_PMAsync(bracode, cusnum, curcode, ledcode, subacctcode, remarks, tra_amount, expdate, tellerid, blkType, blkTypeCode, null);
        }

        /// <remarks/>
        public void BlockFunds_PMAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string remarks, string tra_amount, string expdate, string tellerid, string blkType, string blkTypeCode, object userState)
        {
            if ((this.BlockFunds_PMOperationCompleted == null))
            {
                this.BlockFunds_PMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBlockFunds_PMOperationCompleted);
            }
            this.InvokeAsync("BlockFunds_PM", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    remarks,
                    tra_amount,
                    expdate,
                    tellerid,
                    blkType,
                    blkTypeCode}, this.BlockFunds_PMOperationCompleted, userState);
        }

        private void OnBlockFunds_PMOperationCompleted(object arg)
        {
            if ((this.BlockFunds_PMCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BlockFunds_PMCompleted(this, new BlockFunds_PMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveBlockFunds_PM", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemoveBlockFunds_PM(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string tra_amount, string blocksequence, string tellerid)
        {
            object[] results = this.Invoke("RemoveBlockFunds_PM", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    tra_amount,
                    blocksequence,
                    tellerid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveBlockFunds_PM(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string tra_amount, string blocksequence, string tellerid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RemoveBlockFunds_PM", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    tra_amount,
                    blocksequence,
                    tellerid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRemoveBlockFunds_PM(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RemoveBlockFunds_PMAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string tra_amount, string blocksequence, string tellerid)
        {
            this.RemoveBlockFunds_PMAsync(bracode, cusnum, curcode, ledcode, subacctcode, tra_amount, blocksequence, tellerid, null);
        }

        /// <remarks/>
        public void RemoveBlockFunds_PMAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string tra_amount, string blocksequence, string tellerid, object userState)
        {
            if ((this.RemoveBlockFunds_PMOperationCompleted == null))
            {
                this.RemoveBlockFunds_PMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveBlockFunds_PMOperationCompleted);
            }
            this.InvokeAsync("RemoveBlockFunds_PM", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    tra_amount,
                    blocksequence,
                    tellerid}, this.RemoveBlockFunds_PMOperationCompleted, userState);
        }

        private void OnRemoveBlockFunds_PMOperationCompleted(object arg)
        {
            if ((this.RemoveBlockFunds_PMCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveBlockFunds_PMCompleted(this, new RemoveBlockFunds_PMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateBVN", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateBVN(string bvn)
        {
            object[] results = this.Invoke("ValidateBVN", new object[] {
                    bvn});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginValidateBVN(string bvn, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ValidateBVN", new object[] {
                    bvn}, callback, asyncState);
        }

        /// <remarks/>
        public string EndValidateBVN(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ValidateBVNAsync(string bvn)
        {
            this.ValidateBVNAsync(bvn, null);
        }

        /// <remarks/>
        public void ValidateBVNAsync(string bvn, object userState)
        {
            if ((this.ValidateBVNOperationCompleted == null))
            {
                this.ValidateBVNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateBVNOperationCompleted);
            }
            this.InvokeAsync("ValidateBVN", new object[] {
                    bvn}, this.ValidateBVNOperationCompleted, userState);
        }

        private void OnValidateBVNOperationCompleted(object arg)
        {
            if ((this.ValidateBVNCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateBVNCompleted(this, new ValidateBVNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectBVN", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SelectBVN(string customerID)
        {
            object[] results = this.Invoke("SelectBVN", new object[] {
                    customerID});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSelectBVN(string customerID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SelectBVN", new object[] {
                    customerID}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSelectBVN(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SelectBVNAsync(string customerID)
        {
            this.SelectBVNAsync(customerID, null);
        }

        /// <remarks/>
        public void SelectBVNAsync(string customerID, object userState)
        {
            if ((this.SelectBVNOperationCompleted == null))
            {
                this.SelectBVNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectBVNOperationCompleted);
            }
            this.InvokeAsync("SelectBVN", new object[] {
                    customerID}, this.SelectBVNOperationCompleted, userState);
        }

        private void OnSelectBVNOperationCompleted(object arg)
        {
            if ((this.SelectBVNCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectBVNCompleted(this, new SelectBVNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectBVNMlt", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SelectBVNMlt(string customerID)
        {
            object[] results = this.Invoke("SelectBVNMlt", new object[] {
                    customerID});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSelectBVNMlt(string customerID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SelectBVNMlt", new object[] {
                    customerID}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSelectBVNMlt(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SelectBVNMltAsync(string customerID)
        {
            this.SelectBVNMltAsync(customerID, null);
        }

        /// <remarks/>
        public void SelectBVNMltAsync(string customerID, object userState)
        {
            if ((this.SelectBVNMltOperationCompleted == null))
            {
                this.SelectBVNMltOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectBVNMltOperationCompleted);
            }
            this.InvokeAsync("SelectBVNMlt", new object[] {
                    customerID}, this.SelectBVNMltOperationCompleted, userState);
        }

        private void OnSelectBVNMltOperationCompleted(object arg)
        {
            if ((this.SelectBVNMltCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectBVNMltCompleted(this, new SelectBVNMltCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectBlkamt", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SelectBlkamt(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string blo_seq)
        {
            object[] results = this.Invoke("SelectBlkamt", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    blo_seq});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSelectBlkamt(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string blo_seq, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SelectBlkamt", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    blo_seq}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSelectBlkamt(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SelectBlkamtAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string blo_seq)
        {
            this.SelectBlkamtAsync(bracode, cusnum, curcode, ledcode, subacctcode, blo_seq, null);
        }

        /// <remarks/>
        public void SelectBlkamtAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string blo_seq, object userState)
        {
            if ((this.SelectBlkamtOperationCompleted == null))
            {
                this.SelectBlkamtOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectBlkamtOperationCompleted);
            }
            this.InvokeAsync("SelectBlkamt", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    blo_seq}, this.SelectBlkamtOperationCompleted, userState);
        }

        private void OnSelectBlkamtOperationCompleted(object arg)
        {
            if ((this.SelectBlkamtCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectBlkamtCompleted(this, new SelectBlkamtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectRepaSch", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SelectRepaSch(string bracode, string ref_type, string ref_year, string ref_num)
        {
            object[] results = this.Invoke("SelectRepaSch", new object[] {
                    bracode,
                    ref_type,
                    ref_year,
                    ref_num});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSelectRepaSch(string bracode, string ref_type, string ref_year, string ref_num, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SelectRepaSch", new object[] {
                    bracode,
                    ref_type,
                    ref_year,
                    ref_num}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSelectRepaSch(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SelectRepaSchAsync(string bracode, string ref_type, string ref_year, string ref_num)
        {
            this.SelectRepaSchAsync(bracode, ref_type, ref_year, ref_num, null);
        }

        /// <remarks/>
        public void SelectRepaSchAsync(string bracode, string ref_type, string ref_year, string ref_num, object userState)
        {
            if ((this.SelectRepaSchOperationCompleted == null))
            {
                this.SelectRepaSchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectRepaSchOperationCompleted);
            }
            this.InvokeAsync("SelectRepaSch", new object[] {
                    bracode,
                    ref_type,
                    ref_year,
                    ref_num}, this.SelectRepaSchOperationCompleted, userState);
        }

        private void OnSelectRepaSchOperationCompleted(object arg)
        {
            if ((this.SelectRepaSchCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectRepaSchCompleted(this, new SelectRepaSchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertToNuban", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConvertToNuban(string OldAccountNumber)
        {
            object[] results = this.Invoke("ConvertToNuban", new object[] {
                    OldAccountNumber});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginConvertToNuban(string OldAccountNumber, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ConvertToNuban", new object[] {
                    OldAccountNumber}, callback, asyncState);
        }

        /// <remarks/>
        public string EndConvertToNuban(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ConvertToNubanAsync(string OldAccountNumber)
        {
            this.ConvertToNubanAsync(OldAccountNumber, null);
        }

        /// <remarks/>
        public void ConvertToNubanAsync(string OldAccountNumber, object userState)
        {
            if ((this.ConvertToNubanOperationCompleted == null))
            {
                this.ConvertToNubanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertToNubanOperationCompleted);
            }
            this.InvokeAsync("ConvertToNuban", new object[] {
                    OldAccountNumber}, this.ConvertToNubanOperationCompleted, userState);
        }

        private void OnConvertToNubanOperationCompleted(object arg)
        {
            if ((this.ConvertToNubanCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertToNubanCompleted(this, new ConvertToNubanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertToOldAccountNumber", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConvertToOldAccountNumber(string NubanAccountNumber)
        {
            object[] results = this.Invoke("ConvertToOldAccountNumber", new object[] {
                    NubanAccountNumber});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginConvertToOldAccountNumber(string NubanAccountNumber, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ConvertToOldAccountNumber", new object[] {
                    NubanAccountNumber}, callback, asyncState);
        }

        /// <remarks/>
        public string EndConvertToOldAccountNumber(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ConvertToOldAccountNumberAsync(string NubanAccountNumber)
        {
            this.ConvertToOldAccountNumberAsync(NubanAccountNumber, null);
        }

        /// <remarks/>
        public void ConvertToOldAccountNumberAsync(string NubanAccountNumber, object userState)
        {
            if ((this.ConvertToOldAccountNumberOperationCompleted == null))
            {
                this.ConvertToOldAccountNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertToOldAccountNumberOperationCompleted);
            }
            this.InvokeAsync("ConvertToOldAccountNumber", new object[] {
                    NubanAccountNumber}, this.ConvertToOldAccountNumberOperationCompleted, userState);
        }

        private void OnConvertToOldAccountNumberOperationCompleted(object arg)
        {
            if ((this.ConvertToOldAccountNumberCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertToOldAccountNumberCompleted(this, new ConvertToOldAccountNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllBasisUsers", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllBasisUsers()
        {
            object[] results = this.Invoke("GetAllBasisUsers", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAllBasisUsers(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAllBasisUsers", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAllBasisUsers(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAllBasisUsersAsync()
        {
            this.GetAllBasisUsersAsync(null);
        }

        /// <remarks/>
        public void GetAllBasisUsersAsync(object userState)
        {
            if ((this.GetAllBasisUsersOperationCompleted == null))
            {
                this.GetAllBasisUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllBasisUsersOperationCompleted);
            }
            this.InvokeAsync("GetAllBasisUsers", new object[0], this.GetAllBasisUsersOperationCompleted, userState);
        }

        private void OnGetAllBasisUsersOperationCompleted(object arg)
        {
            if ((this.GetAllBasisUsersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllBasisUsersCompleted(this, new GetAllBasisUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConfirmSignature", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConfirmSignature(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int sigseq, int tellerid)
        {
            object[] results = this.Invoke("ConfirmSignature", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    sigseq,
                    tellerid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginConfirmSignature(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int sigseq, int tellerid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ConfirmSignature", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    sigseq,
                    tellerid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndConfirmSignature(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ConfirmSignatureAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int sigseq, int tellerid)
        {
            this.ConfirmSignatureAsync(bracode, cusnum, curcode, ledcode, subacctcode, sigseq, tellerid, null);
        }

        /// <remarks/>
        public void ConfirmSignatureAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int sigseq, int tellerid, object userState)
        {
            if ((this.ConfirmSignatureOperationCompleted == null))
            {
                this.ConfirmSignatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfirmSignatureOperationCompleted);
            }
            this.InvokeAsync("ConfirmSignature", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    sigseq,
                    tellerid}, this.ConfirmSignatureOperationCompleted, userState);
        }

        private void OnConfirmSignatureOperationCompleted(object arg)
        {
            if ((this.ConfirmSignatureCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfirmSignatureCompleted(this, new ConfirmSignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTimeDepDetailsForProcessMaker", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTimeDepDetailsForProcessMaker(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            object[] results = this.Invoke("GetTimeDepDetailsForProcessMaker", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetTimeDepDetailsForProcessMaker(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetTimeDepDetailsForProcessMaker", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetTimeDepDetailsForProcessMaker(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetTimeDepDetailsForProcessMakerAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            this.GetTimeDepDetailsForProcessMakerAsync(bracode, cusnum, curcode, ledcode, subacctcode, null);
        }

        /// <remarks/>
        public void GetTimeDepDetailsForProcessMakerAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, object userState)
        {
            if ((this.GetTimeDepDetailsForProcessMakerOperationCompleted == null))
            {
                this.GetTimeDepDetailsForProcessMakerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTimeDepDetailsForProcessMakerOperationCompleted);
            }
            this.InvokeAsync("GetTimeDepDetailsForProcessMaker", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, this.GetTimeDepDetailsForProcessMakerOperationCompleted, userState);
        }

        private void OnGetTimeDepDetailsForProcessMakerOperationCompleted(object arg)
        {
            if ((this.GetTimeDepDetailsForProcessMakerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTimeDepDetailsForProcessMakerCompleted(this, new GetTimeDepDetailsForProcessMakerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRateForProcessMaker", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRateForProcessMaker(string cur_code)
        {
            object[] results = this.Invoke("GetRateForProcessMaker", new object[] {
                    cur_code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetRateForProcessMaker(string cur_code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetRateForProcessMaker", new object[] {
                    cur_code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetRateForProcessMaker(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetRateForProcessMakerAsync(string cur_code)
        {
            this.GetRateForProcessMakerAsync(cur_code, null);
        }

        /// <remarks/>
        public void GetRateForProcessMakerAsync(string cur_code, object userState)
        {
            if ((this.GetRateForProcessMakerOperationCompleted == null))
            {
                this.GetRateForProcessMakerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRateForProcessMakerOperationCompleted);
            }
            this.InvokeAsync("GetRateForProcessMaker", new object[] {
                    cur_code}, this.GetRateForProcessMakerOperationCompleted, userState);
        }

        private void OnGetRateForProcessMakerOperationCompleted(object arg)
        {
            if ((this.GetRateForProcessMakerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRateForProcessMakerCompleted(this, new GetRateForProcessMakerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBasisDetailsForProcessMaker", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBasisDetailsForProcessMaker(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            object[] results = this.Invoke("GetBasisDetailsForProcessMaker", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBasisDetailsForProcessMaker(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBasisDetailsForProcessMaker", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetBasisDetailsForProcessMaker(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetBasisDetailsForProcessMakerAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            this.GetBasisDetailsForProcessMakerAsync(bracode, cusnum, curcode, ledcode, subacctcode, null);
        }

        /// <remarks/>
        public void GetBasisDetailsForProcessMakerAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, object userState)
        {
            if ((this.GetBasisDetailsForProcessMakerOperationCompleted == null))
            {
                this.GetBasisDetailsForProcessMakerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasisDetailsForProcessMakerOperationCompleted);
            }
            this.InvokeAsync("GetBasisDetailsForProcessMaker", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, this.GetBasisDetailsForProcessMakerOperationCompleted, userState);
        }

        private void OnGetBasisDetailsForProcessMakerOperationCompleted(object arg)
        {
            if ((this.GetBasisDetailsForProcessMakerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasisDetailsForProcessMakerCompleted(this, new GetBasisDetailsForProcessMakerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBasisDetailsForProcessMaker4", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBasisDetailsForProcessMaker4(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            object[] results = this.Invoke("GetBasisDetailsForProcessMaker4", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBasisDetailsForProcessMaker4(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBasisDetailsForProcessMaker4", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetBasisDetailsForProcessMaker4(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetBasisDetailsForProcessMaker4Async(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            this.GetBasisDetailsForProcessMaker4Async(bracode, cusnum, curcode, ledcode, subacctcode, null);
        }

        /// <remarks/>
        public void GetBasisDetailsForProcessMaker4Async(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, object userState)
        {
            if ((this.GetBasisDetailsForProcessMaker4OperationCompleted == null))
            {
                this.GetBasisDetailsForProcessMaker4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasisDetailsForProcessMaker4OperationCompleted);
            }
            this.InvokeAsync("GetBasisDetailsForProcessMaker4", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, this.GetBasisDetailsForProcessMaker4OperationCompleted, userState);
        }

        private void OnGetBasisDetailsForProcessMaker4OperationCompleted(object arg)
        {
            if ((this.GetBasisDetailsForProcessMaker4Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasisDetailsForProcessMaker4Completed(this, new GetBasisDetailsForProcessMaker4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSignature", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteSignature(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int sigseq, int tellerid)
        {
            object[] results = this.Invoke("DeleteSignature", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    sigseq,
                    tellerid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteSignature(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int sigseq, int tellerid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteSignature", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    sigseq,
                    tellerid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDeleteSignature(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DeleteSignatureAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int sigseq, int tellerid)
        {
            this.DeleteSignatureAsync(bracode, cusnum, curcode, ledcode, subacctcode, sigseq, tellerid, null);
        }

        /// <remarks/>
        public void DeleteSignatureAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int sigseq, int tellerid, object userState)
        {
            if ((this.DeleteSignatureOperationCompleted == null))
            {
                this.DeleteSignatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSignatureOperationCompleted);
            }
            this.InvokeAsync("DeleteSignature", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    sigseq,
                    tellerid}, this.DeleteSignatureOperationCompleted, userState);
        }

        private void OnDeleteSignatureOperationCompleted(object arg)
        {
            if ((this.DeleteSignatureCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSignatureCompleted(this, new DeleteSignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBasisDetailsForProcessMaker3", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBasisDetailsForProcessMaker3(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            object[] results = this.Invoke("GetBasisDetailsForProcessMaker3", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBasisDetailsForProcessMaker3(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBasisDetailsForProcessMaker3", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetBasisDetailsForProcessMaker3(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetBasisDetailsForProcessMaker3Async(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            this.GetBasisDetailsForProcessMaker3Async(bracode, cusnum, curcode, ledcode, subacctcode, null);
        }

        /// <remarks/>
        public void GetBasisDetailsForProcessMaker3Async(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, object userState)
        {
            if ((this.GetBasisDetailsForProcessMaker3OperationCompleted == null))
            {
                this.GetBasisDetailsForProcessMaker3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasisDetailsForProcessMaker3OperationCompleted);
            }
            this.InvokeAsync("GetBasisDetailsForProcessMaker3", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, this.GetBasisDetailsForProcessMaker3OperationCompleted, userState);
        }

        private void OnGetBasisDetailsForProcessMaker3OperationCompleted(object arg)
        {
            if ((this.GetBasisDetailsForProcessMaker3Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasisDetailsForProcessMaker3Completed(this, new GetBasisDetailsForProcessMaker3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchBlackCust", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchBlackCust(string cus_sho_name)
        {
            object[] results = this.Invoke("SearchBlackCust", new object[] {
                    cus_sho_name});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSearchBlackCust(string cus_sho_name, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SearchBlackCust", new object[] {
                    cus_sho_name}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSearchBlackCust(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SearchBlackCustAsync(string cus_sho_name)
        {
            this.SearchBlackCustAsync(cus_sho_name, null);
        }

        /// <remarks/>
        public void SearchBlackCustAsync(string cus_sho_name, object userState)
        {
            if ((this.SearchBlackCustOperationCompleted == null))
            {
                this.SearchBlackCustOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchBlackCustOperationCompleted);
            }
            this.InvokeAsync("SearchBlackCust", new object[] {
                    cus_sho_name}, this.SearchBlackCustOperationCompleted, userState);
        }

        private void OnSearchBlackCustOperationCompleted(object arg)
        {
            if ((this.SearchBlackCustCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchBlackCustCompleted(this, new SearchBlackCustCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertToWords", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConvertToWords(string amount, string currency, string subcurrency)
        {
            object[] results = this.Invoke("ConvertToWords", new object[] {
                    amount,
                    currency,
                    subcurrency});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginConvertToWords(string amount, string currency, string subcurrency, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ConvertToWords", new object[] {
                    amount,
                    currency,
                    subcurrency}, callback, asyncState);
        }

        /// <remarks/>
        public string EndConvertToWords(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ConvertToWordsAsync(string amount, string currency, string subcurrency)
        {
            this.ConvertToWordsAsync(amount, currency, subcurrency, null);
        }

        /// <remarks/>
        public void ConvertToWordsAsync(string amount, string currency, string subcurrency, object userState)
        {
            if ((this.ConvertToWordsOperationCompleted == null))
            {
                this.ConvertToWordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertToWordsOperationCompleted);
            }
            this.InvokeAsync("ConvertToWords", new object[] {
                    amount,
                    currency,
                    subcurrency}, this.ConvertToWordsOperationCompleted, userState);
        }

        private void OnConvertToWordsOperationCompleted(object arg)
        {
            if ((this.ConvertToWordsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertToWordsCompleted(this, new ConvertToWordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertDigit", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConvertDigit(string MyDigit)
        {
            object[] results = this.Invoke("ConvertDigit", new object[] {
                    MyDigit});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginConvertDigit(string MyDigit, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ConvertDigit", new object[] {
                    MyDigit}, callback, asyncState);
        }

        /// <remarks/>
        public string EndConvertDigit(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ConvertDigitAsync(string MyDigit)
        {
            this.ConvertDigitAsync(MyDigit, null);
        }

        /// <remarks/>
        public void ConvertDigitAsync(string MyDigit, object userState)
        {
            if ((this.ConvertDigitOperationCompleted == null))
            {
                this.ConvertDigitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertDigitOperationCompleted);
            }
            this.InvokeAsync("ConvertDigit", new object[] {
                    MyDigit}, this.ConvertDigitOperationCompleted, userState);
        }

        private void OnConvertDigitOperationCompleted(object arg)
        {
            if ((this.ConvertDigitCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertDigitCompleted(this, new ConvertDigitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProcessMakerSlipNo", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcessMakerSlipNo(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string docnum, string deb_cred_ind, string traseq)
        {
            object[] results = this.Invoke("ProcessMakerSlipNo", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    docnum,
                    deb_cred_ind,
                    traseq});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginProcessMakerSlipNo(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string docnum, string deb_cred_ind, string traseq, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ProcessMakerSlipNo", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    docnum,
                    deb_cred_ind,
                    traseq}, callback, asyncState);
        }

        /// <remarks/>
        public string EndProcessMakerSlipNo(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ProcessMakerSlipNoAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string docnum, string deb_cred_ind, string traseq)
        {
            this.ProcessMakerSlipNoAsync(bracode, cusnum, curcode, ledcode, subacctcode, docnum, deb_cred_ind, traseq, null);
        }

        /// <remarks/>
        public void ProcessMakerSlipNoAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string docnum, string deb_cred_ind, string traseq, object userState)
        {
            if ((this.ProcessMakerSlipNoOperationCompleted == null))
            {
                this.ProcessMakerSlipNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessMakerSlipNoOperationCompleted);
            }
            this.InvokeAsync("ProcessMakerSlipNo", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    docnum,
                    deb_cred_ind,
                    traseq}, this.ProcessMakerSlipNoOperationCompleted, userState);
        }

        private void OnProcessMakerSlipNoOperationCompleted(object arg)
        {
            if ((this.ProcessMakerSlipNoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessMakerSlipNoCompleted(this, new ProcessMakerSlipNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCurrRate", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getCurrRate(string curcode, string period, string band_val_upp)
        {
            object[] results = this.Invoke("getCurrRate", new object[] {
                    curcode,
                    period,
                    band_val_upp});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetCurrRate(string curcode, string period, string band_val_upp, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getCurrRate", new object[] {
                    curcode,
                    period,
                    band_val_upp}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetCurrRate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getCurrRateAsync(string curcode, string period, string band_val_upp)
        {
            this.getCurrRateAsync(curcode, period, band_val_upp, null);
        }

        /// <remarks/>
        public void getCurrRateAsync(string curcode, string period, string band_val_upp, object userState)
        {
            if ((this.getCurrRateOperationCompleted == null))
            {
                this.getCurrRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCurrRateOperationCompleted);
            }
            this.InvokeAsync("getCurrRate", new object[] {
                    curcode,
                    period,
                    band_val_upp}, this.getCurrRateOperationCompleted, userState);
        }

        private void OngetCurrRateOperationCompleted(object arg)
        {
            if ((this.getCurrRateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCurrRateCompleted(this, new getCurrRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BlockUnblockFunds", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BlockUnblockFunds(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string blocksequence, string tra_amount, string expdate, string tellerid, string operationflag)
        {
            object[] results = this.Invoke("BlockUnblockFunds", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    blocksequence,
                    tra_amount,
                    expdate,
                    tellerid,
                    operationflag});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginBlockUnblockFunds(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string blocksequence, string tra_amount, string expdate, string tellerid, string operationflag, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("BlockUnblockFunds", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    blocksequence,
                    tra_amount,
                    expdate,
                    tellerid,
                    operationflag}, callback, asyncState);
        }

        /// <remarks/>
        public string EndBlockUnblockFunds(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void BlockUnblockFundsAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string blocksequence, string tra_amount, string expdate, string tellerid, string operationflag)
        {
            this.BlockUnblockFundsAsync(bracode, cusnum, curcode, ledcode, subacctcode, blocksequence, tra_amount, expdate, tellerid, operationflag, null);
        }

        /// <remarks/>
        public void BlockUnblockFundsAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string blocksequence, string tra_amount, string expdate, string tellerid, string operationflag, object userState)
        {
            if ((this.BlockUnblockFundsOperationCompleted == null))
            {
                this.BlockUnblockFundsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBlockUnblockFundsOperationCompleted);
            }
            this.InvokeAsync("BlockUnblockFunds", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    blocksequence,
                    tra_amount,
                    expdate,
                    tellerid,
                    operationflag}, this.BlockUnblockFundsOperationCompleted, userState);
        }

        private void OnBlockUnblockFundsOperationCompleted(object arg)
        {
            if ((this.BlockUnblockFundsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BlockUnblockFundsCompleted(this, new BlockUnblockFundsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MoveAcctMgr", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MoveAcctMgr(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int tellerid, int newacctmgr)
        {
            object[] results = this.Invoke("MoveAcctMgr", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    tellerid,
                    newacctmgr});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginMoveAcctMgr(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int tellerid, int newacctmgr, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("MoveAcctMgr", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    tellerid,
                    newacctmgr}, callback, asyncState);
        }

        /// <remarks/>
        public string EndMoveAcctMgr(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void MoveAcctMgrAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int tellerid, int newacctmgr)
        {
            this.MoveAcctMgrAsync(bracode, cusnum, curcode, ledcode, subacctcode, tellerid, newacctmgr, null);
        }

        /// <remarks/>
        public void MoveAcctMgrAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int tellerid, int newacctmgr, object userState)
        {
            if ((this.MoveAcctMgrOperationCompleted == null))
            {
                this.MoveAcctMgrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveAcctMgrOperationCompleted);
            }
            this.InvokeAsync("MoveAcctMgr", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    tellerid,
                    newacctmgr}, this.MoveAcctMgrOperationCompleted, userState);
        }

        private void OnMoveAcctMgrOperationCompleted(object arg)
        {
            if ((this.MoveAcctMgrCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveAcctMgrCompleted(this, new MoveAcctMgrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PMAccountReactivation", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PMAccountReactivation(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string operationflag, string inp_teller)
        {
            object[] results = this.Invoke("PMAccountReactivation", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    operationflag,
                    inp_teller});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginPMAccountReactivation(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string operationflag, string inp_teller, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("PMAccountReactivation", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    operationflag,
                    inp_teller}, callback, asyncState);
        }

        /// <remarks/>
        public string EndPMAccountReactivation(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void PMAccountReactivationAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string operationflag, string inp_teller)
        {
            this.PMAccountReactivationAsync(bracode, cusnum, curcode, ledcode, subacctcode, operationflag, inp_teller, null);
        }

        /// <remarks/>
        public void PMAccountReactivationAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string operationflag, string inp_teller, object userState)
        {
            if ((this.PMAccountReactivationOperationCompleted == null))
            {
                this.PMAccountReactivationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPMAccountReactivationOperationCompleted);
            }
            this.InvokeAsync("PMAccountReactivation", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    operationflag,
                    inp_teller}, this.PMAccountReactivationOperationCompleted, userState);
        }

        private void OnPMAccountReactivationOperationCompleted(object arg)
        {
            if ((this.PMAccountReactivationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PMAccountReactivationCompleted(this, new PMAccountReactivationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateNewBasisAccount2", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateNewBasisAccount2(
                    int bra,
                    int cur,
                    int led,
                    int tell_id,
                    string cusname,
                    int acctmgr,
                    int resflag,
                    string restext1,
                    int restind1,
                    string restext2,
                    int restind2,
                    string dirname1,
                    string diradd1,
                    string dirname2,
                    string diradd2,
                    string dirname3,
                    string diradd3,
                    string dirname4,
                    string diradd4,
                    string dirname5,
                    string diradd5,
                    string dirname6,
                    string diradd6,
                    int acctnat,
                    string addr1,
                    string addr2,
                    string email,
                    string mobnum,
                    string telnum1,
                    string telnum2,
                    string citycode,
                    string postcode,
                    string titlecode,
                    string countres,
                    string natnum,
                    string ecosec,
                    string cusclass,
                    string deptype,
                    string birdate,
                    string mothname,
                    string nationality,
                    string regnum,
                    string statecode,
                    string lga,
                    string empname,
                    string empdate,
                    string prevemp,
                    string emptype,
                    string empstat,
                    string indcorp,
                    string taxid,
                    string edulevel,
                    string gender,
                    string delcha,
                    string acctreq,
                    string custgrade,
                    string idtype,
                    string iddate,
                    string acctoff,
                    string swicode,
                    string resident,
                    string name1,
                    string name2,
                    string regid,
                    string empaddr,
                    string marital,
                    string spousedate,
                    string childname,
                    string childdate,
                    string platinum,
                    string graddate,
                    string spousename,
                    string def_expiry_date,
                    string legalsearch,
                    string newecosec,
                    int cust_type,
                    int cre_flag,
                    decimal ttAmt,
                    string id_expiry_date,
                    int cust_overview)
        {
            object[] results = this.Invoke("CreateNewBasisAccount2", new object[] {
                    bra,
                    cur,
                    led,
                    tell_id,
                    cusname,
                    acctmgr,
                    resflag,
                    restext1,
                    restind1,
                    restext2,
                    restind2,
                    dirname1,
                    diradd1,
                    dirname2,
                    diradd2,
                    dirname3,
                    diradd3,
                    dirname4,
                    diradd4,
                    dirname5,
                    diradd5,
                    dirname6,
                    diradd6,
                    acctnat,
                    addr1,
                    addr2,
                    email,
                    mobnum,
                    telnum1,
                    telnum2,
                    citycode,
                    postcode,
                    titlecode,
                    countres,
                    natnum,
                    ecosec,
                    cusclass,
                    deptype,
                    birdate,
                    mothname,
                    nationality,
                    regnum,
                    statecode,
                    lga,
                    empname,
                    empdate,
                    prevemp,
                    emptype,
                    empstat,
                    indcorp,
                    taxid,
                    edulevel,
                    gender,
                    delcha,
                    acctreq,
                    custgrade,
                    idtype,
                    iddate,
                    acctoff,
                    swicode,
                    resident,
                    name1,
                    name2,
                    regid,
                    empaddr,
                    marital,
                    spousedate,
                    childname,
                    childdate,
                    platinum,
                    graddate,
                    spousename,
                    def_expiry_date,
                    legalsearch,
                    newecosec,
                    cust_type,
                    cre_flag,
                    ttAmt,
                    id_expiry_date,
                    cust_overview});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateNewBasisAccount2(
                    int bra,
                    int cur,
                    int led,
                    int tell_id,
                    string cusname,
                    int acctmgr,
                    int resflag,
                    string restext1,
                    int restind1,
                    string restext2,
                    int restind2,
                    string dirname1,
                    string diradd1,
                    string dirname2,
                    string diradd2,
                    string dirname3,
                    string diradd3,
                    string dirname4,
                    string diradd4,
                    string dirname5,
                    string diradd5,
                    string dirname6,
                    string diradd6,
                    int acctnat,
                    string addr1,
                    string addr2,
                    string email,
                    string mobnum,
                    string telnum1,
                    string telnum2,
                    string citycode,
                    string postcode,
                    string titlecode,
                    string countres,
                    string natnum,
                    string ecosec,
                    string cusclass,
                    string deptype,
                    string birdate,
                    string mothname,
                    string nationality,
                    string regnum,
                    string statecode,
                    string lga,
                    string empname,
                    string empdate,
                    string prevemp,
                    string emptype,
                    string empstat,
                    string indcorp,
                    string taxid,
                    string edulevel,
                    string gender,
                    string delcha,
                    string acctreq,
                    string custgrade,
                    string idtype,
                    string iddate,
                    string acctoff,
                    string swicode,
                    string resident,
                    string name1,
                    string name2,
                    string regid,
                    string empaddr,
                    string marital,
                    string spousedate,
                    string childname,
                    string childdate,
                    string platinum,
                    string graddate,
                    string spousename,
                    string def_expiry_date,
                    string legalsearch,
                    string newecosec,
                    int cust_type,
                    int cre_flag,
                    decimal ttAmt,
                    string id_expiry_date,
                    int cust_overview,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("CreateNewBasisAccount2", new object[] {
                    bra,
                    cur,
                    led,
                    tell_id,
                    cusname,
                    acctmgr,
                    resflag,
                    restext1,
                    restind1,
                    restext2,
                    restind2,
                    dirname1,
                    diradd1,
                    dirname2,
                    diradd2,
                    dirname3,
                    diradd3,
                    dirname4,
                    diradd4,
                    dirname5,
                    diradd5,
                    dirname6,
                    diradd6,
                    acctnat,
                    addr1,
                    addr2,
                    email,
                    mobnum,
                    telnum1,
                    telnum2,
                    citycode,
                    postcode,
                    titlecode,
                    countres,
                    natnum,
                    ecosec,
                    cusclass,
                    deptype,
                    birdate,
                    mothname,
                    nationality,
                    regnum,
                    statecode,
                    lga,
                    empname,
                    empdate,
                    prevemp,
                    emptype,
                    empstat,
                    indcorp,
                    taxid,
                    edulevel,
                    gender,
                    delcha,
                    acctreq,
                    custgrade,
                    idtype,
                    iddate,
                    acctoff,
                    swicode,
                    resident,
                    name1,
                    name2,
                    regid,
                    empaddr,
                    marital,
                    spousedate,
                    childname,
                    childdate,
                    platinum,
                    graddate,
                    spousename,
                    def_expiry_date,
                    legalsearch,
                    newecosec,
                    cust_type,
                    cre_flag,
                    ttAmt,
                    id_expiry_date,
                    cust_overview}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateNewBasisAccount2(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CreateNewBasisAccount2Async(
                    int bra,
                    int cur,
                    int led,
                    int tell_id,
                    string cusname,
                    int acctmgr,
                    int resflag,
                    string restext1,
                    int restind1,
                    string restext2,
                    int restind2,
                    string dirname1,
                    string diradd1,
                    string dirname2,
                    string diradd2,
                    string dirname3,
                    string diradd3,
                    string dirname4,
                    string diradd4,
                    string dirname5,
                    string diradd5,
                    string dirname6,
                    string diradd6,
                    int acctnat,
                    string addr1,
                    string addr2,
                    string email,
                    string mobnum,
                    string telnum1,
                    string telnum2,
                    string citycode,
                    string postcode,
                    string titlecode,
                    string countres,
                    string natnum,
                    string ecosec,
                    string cusclass,
                    string deptype,
                    string birdate,
                    string mothname,
                    string nationality,
                    string regnum,
                    string statecode,
                    string lga,
                    string empname,
                    string empdate,
                    string prevemp,
                    string emptype,
                    string empstat,
                    string indcorp,
                    string taxid,
                    string edulevel,
                    string gender,
                    string delcha,
                    string acctreq,
                    string custgrade,
                    string idtype,
                    string iddate,
                    string acctoff,
                    string swicode,
                    string resident,
                    string name1,
                    string name2,
                    string regid,
                    string empaddr,
                    string marital,
                    string spousedate,
                    string childname,
                    string childdate,
                    string platinum,
                    string graddate,
                    string spousename,
                    string def_expiry_date,
                    string legalsearch,
                    string newecosec,
                    int cust_type,
                    int cre_flag,
                    decimal ttAmt,
                    string id_expiry_date,
                    int cust_overview)
        {
            this.CreateNewBasisAccount2Async(bra, cur, led, tell_id, cusname, acctmgr, resflag, restext1, restind1, restext2, restind2, dirname1, diradd1, dirname2, diradd2, dirname3, diradd3, dirname4, diradd4, dirname5, diradd5, dirname6, diradd6, acctnat, addr1, addr2, email, mobnum, telnum1, telnum2, citycode, postcode, titlecode, countres, natnum, ecosec, cusclass, deptype, birdate, mothname, nationality, regnum, statecode, lga, empname, empdate, prevemp, emptype, empstat, indcorp, taxid, edulevel, gender, delcha, acctreq, custgrade, idtype, iddate, acctoff, swicode, resident, name1, name2, regid, empaddr, marital, spousedate, childname, childdate, platinum, graddate, spousename, def_expiry_date, legalsearch, newecosec, cust_type, cre_flag, ttAmt, id_expiry_date, cust_overview, null);
        }

        /// <remarks/>
        public void CreateNewBasisAccount2Async(
                    int bra,
                    int cur,
                    int led,
                    int tell_id,
                    string cusname,
                    int acctmgr,
                    int resflag,
                    string restext1,
                    int restind1,
                    string restext2,
                    int restind2,
                    string dirname1,
                    string diradd1,
                    string dirname2,
                    string diradd2,
                    string dirname3,
                    string diradd3,
                    string dirname4,
                    string diradd4,
                    string dirname5,
                    string diradd5,
                    string dirname6,
                    string diradd6,
                    int acctnat,
                    string addr1,
                    string addr2,
                    string email,
                    string mobnum,
                    string telnum1,
                    string telnum2,
                    string citycode,
                    string postcode,
                    string titlecode,
                    string countres,
                    string natnum,
                    string ecosec,
                    string cusclass,
                    string deptype,
                    string birdate,
                    string mothname,
                    string nationality,
                    string regnum,
                    string statecode,
                    string lga,
                    string empname,
                    string empdate,
                    string prevemp,
                    string emptype,
                    string empstat,
                    string indcorp,
                    string taxid,
                    string edulevel,
                    string gender,
                    string delcha,
                    string acctreq,
                    string custgrade,
                    string idtype,
                    string iddate,
                    string acctoff,
                    string swicode,
                    string resident,
                    string name1,
                    string name2,
                    string regid,
                    string empaddr,
                    string marital,
                    string spousedate,
                    string childname,
                    string childdate,
                    string platinum,
                    string graddate,
                    string spousename,
                    string def_expiry_date,
                    string legalsearch,
                    string newecosec,
                    int cust_type,
                    int cre_flag,
                    decimal ttAmt,
                    string id_expiry_date,
                    int cust_overview,
                    object userState)
        {
            if ((this.CreateNewBasisAccount2OperationCompleted == null))
            {
                this.CreateNewBasisAccount2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewBasisAccount2OperationCompleted);
            }
            this.InvokeAsync("CreateNewBasisAccount2", new object[] {
                    bra,
                    cur,
                    led,
                    tell_id,
                    cusname,
                    acctmgr,
                    resflag,
                    restext1,
                    restind1,
                    restext2,
                    restind2,
                    dirname1,
                    diradd1,
                    dirname2,
                    diradd2,
                    dirname3,
                    diradd3,
                    dirname4,
                    diradd4,
                    dirname5,
                    diradd5,
                    dirname6,
                    diradd6,
                    acctnat,
                    addr1,
                    addr2,
                    email,
                    mobnum,
                    telnum1,
                    telnum2,
                    citycode,
                    postcode,
                    titlecode,
                    countres,
                    natnum,
                    ecosec,
                    cusclass,
                    deptype,
                    birdate,
                    mothname,
                    nationality,
                    regnum,
                    statecode,
                    lga,
                    empname,
                    empdate,
                    prevemp,
                    emptype,
                    empstat,
                    indcorp,
                    taxid,
                    edulevel,
                    gender,
                    delcha,
                    acctreq,
                    custgrade,
                    idtype,
                    iddate,
                    acctoff,
                    swicode,
                    resident,
                    name1,
                    name2,
                    regid,
                    empaddr,
                    marital,
                    spousedate,
                    childname,
                    childdate,
                    platinum,
                    graddate,
                    spousename,
                    def_expiry_date,
                    legalsearch,
                    newecosec,
                    cust_type,
                    cre_flag,
                    ttAmt,
                    id_expiry_date,
                    cust_overview}, this.CreateNewBasisAccount2OperationCompleted, userState);
        }

        private void OnCreateNewBasisAccount2OperationCompleted(object arg)
        {
            if ((this.CreateNewBasisAccount2Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewBasisAccount2Completed(this, new CreateNewBasisAccount2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateNewBasisAccount3", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateNewBasisAccount3(
                    int bra,
                    int cur,
                    int led,
                    int tell_id,
                    string cusname,
                    int acctmgr,
                    int resflag,
                    string restext1,
                    int restind1,
                    string restext2,
                    int restind2,
                    string dirname1,
                    string diradd1,
                    string dirname2,
                    string diradd2,
                    string dirname3,
                    string diradd3,
                    string dirname4,
                    string diradd4,
                    string dirname5,
                    string diradd5,
                    string dirname6,
                    string diradd6,
                    int acctnat,
                    string addr1,
                    string addr2,
                    string email,
                    string mobnum,
                    string telnum1,
                    string telnum2,
                    string citycode,
                    string postcode,
                    string titlecode,
                    string countres,
                    string natnum,
                    string ecosec,
                    string cusclass,
                    string deptype,
                    string birdate,
                    string mothname,
                    string nationality,
                    string regnum,
                    string statecode,
                    string lga,
                    string empname,
                    string empdate,
                    string prevemp,
                    string emptype,
                    string empstat,
                    string indcorp,
                    string taxid,
                    string edulevel,
                    string gender,
                    string delcha,
                    string acctreq,
                    string custgrade,
                    string idtype,
                    string iddate,
                    string acctoff,
                    string swicode,
                    string resident,
                    string name1,
                    string name2,
                    string regid,
                    string empaddr,
                    string marital,
                    string spousedate,
                    string childname,
                    string childdate,
                    string platinum,
                    string graddate,
                    string spousename,
                    string def_expiry_date,
                    string legalsearch,
                    string newecosec,
                    int cust_type,
                    int cre_flag,
                    decimal ttAmt,
                    string id_expiry_date,
                    int cust_overview,
                    string scmul,
                    string source_fund,
                    string oblig_rate)
        {
            object[] results = this.Invoke("CreateNewBasisAccount3", new object[] {
                    bra,
                    cur,
                    led,
                    tell_id,
                    cusname,
                    acctmgr,
                    resflag,
                    restext1,
                    restind1,
                    restext2,
                    restind2,
                    dirname1,
                    diradd1,
                    dirname2,
                    diradd2,
                    dirname3,
                    diradd3,
                    dirname4,
                    diradd4,
                    dirname5,
                    diradd5,
                    dirname6,
                    diradd6,
                    acctnat,
                    addr1,
                    addr2,
                    email,
                    mobnum,
                    telnum1,
                    telnum2,
                    citycode,
                    postcode,
                    titlecode,
                    countres,
                    natnum,
                    ecosec,
                    cusclass,
                    deptype,
                    birdate,
                    mothname,
                    nationality,
                    regnum,
                    statecode,
                    lga,
                    empname,
                    empdate,
                    prevemp,
                    emptype,
                    empstat,
                    indcorp,
                    taxid,
                    edulevel,
                    gender,
                    delcha,
                    acctreq,
                    custgrade,
                    idtype,
                    iddate,
                    acctoff,
                    swicode,
                    resident,
                    name1,
                    name2,
                    regid,
                    empaddr,
                    marital,
                    spousedate,
                    childname,
                    childdate,
                    platinum,
                    graddate,
                    spousename,
                    def_expiry_date,
                    legalsearch,
                    newecosec,
                    cust_type,
                    cre_flag,
                    ttAmt,
                    id_expiry_date,
                    cust_overview,
                    scmul,
                    source_fund,
                    oblig_rate});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateNewBasisAccount3(
                    int bra,
                    int cur,
                    int led,
                    int tell_id,
                    string cusname,
                    int acctmgr,
                    int resflag,
                    string restext1,
                    int restind1,
                    string restext2,
                    int restind2,
                    string dirname1,
                    string diradd1,
                    string dirname2,
                    string diradd2,
                    string dirname3,
                    string diradd3,
                    string dirname4,
                    string diradd4,
                    string dirname5,
                    string diradd5,
                    string dirname6,
                    string diradd6,
                    int acctnat,
                    string addr1,
                    string addr2,
                    string email,
                    string mobnum,
                    string telnum1,
                    string telnum2,
                    string citycode,
                    string postcode,
                    string titlecode,
                    string countres,
                    string natnum,
                    string ecosec,
                    string cusclass,
                    string deptype,
                    string birdate,
                    string mothname,
                    string nationality,
                    string regnum,
                    string statecode,
                    string lga,
                    string empname,
                    string empdate,
                    string prevemp,
                    string emptype,
                    string empstat,
                    string indcorp,
                    string taxid,
                    string edulevel,
                    string gender,
                    string delcha,
                    string acctreq,
                    string custgrade,
                    string idtype,
                    string iddate,
                    string acctoff,
                    string swicode,
                    string resident,
                    string name1,
                    string name2,
                    string regid,
                    string empaddr,
                    string marital,
                    string spousedate,
                    string childname,
                    string childdate,
                    string platinum,
                    string graddate,
                    string spousename,
                    string def_expiry_date,
                    string legalsearch,
                    string newecosec,
                    int cust_type,
                    int cre_flag,
                    decimal ttAmt,
                    string id_expiry_date,
                    int cust_overview,
                    string scmul,
                    string source_fund,
                    string oblig_rate,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("CreateNewBasisAccount3", new object[] {
                    bra,
                    cur,
                    led,
                    tell_id,
                    cusname,
                    acctmgr,
                    resflag,
                    restext1,
                    restind1,
                    restext2,
                    restind2,
                    dirname1,
                    diradd1,
                    dirname2,
                    diradd2,
                    dirname3,
                    diradd3,
                    dirname4,
                    diradd4,
                    dirname5,
                    diradd5,
                    dirname6,
                    diradd6,
                    acctnat,
                    addr1,
                    addr2,
                    email,
                    mobnum,
                    telnum1,
                    telnum2,
                    citycode,
                    postcode,
                    titlecode,
                    countres,
                    natnum,
                    ecosec,
                    cusclass,
                    deptype,
                    birdate,
                    mothname,
                    nationality,
                    regnum,
                    statecode,
                    lga,
                    empname,
                    empdate,
                    prevemp,
                    emptype,
                    empstat,
                    indcorp,
                    taxid,
                    edulevel,
                    gender,
                    delcha,
                    acctreq,
                    custgrade,
                    idtype,
                    iddate,
                    acctoff,
                    swicode,
                    resident,
                    name1,
                    name2,
                    regid,
                    empaddr,
                    marital,
                    spousedate,
                    childname,
                    childdate,
                    platinum,
                    graddate,
                    spousename,
                    def_expiry_date,
                    legalsearch,
                    newecosec,
                    cust_type,
                    cre_flag,
                    ttAmt,
                    id_expiry_date,
                    cust_overview,
                    scmul,
                    source_fund,
                    oblig_rate}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateNewBasisAccount3(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CreateNewBasisAccount3Async(
                    int bra,
                    int cur,
                    int led,
                    int tell_id,
                    string cusname,
                    int acctmgr,
                    int resflag,
                    string restext1,
                    int restind1,
                    string restext2,
                    int restind2,
                    string dirname1,
                    string diradd1,
                    string dirname2,
                    string diradd2,
                    string dirname3,
                    string diradd3,
                    string dirname4,
                    string diradd4,
                    string dirname5,
                    string diradd5,
                    string dirname6,
                    string diradd6,
                    int acctnat,
                    string addr1,
                    string addr2,
                    string email,
                    string mobnum,
                    string telnum1,
                    string telnum2,
                    string citycode,
                    string postcode,
                    string titlecode,
                    string countres,
                    string natnum,
                    string ecosec,
                    string cusclass,
                    string deptype,
                    string birdate,
                    string mothname,
                    string nationality,
                    string regnum,
                    string statecode,
                    string lga,
                    string empname,
                    string empdate,
                    string prevemp,
                    string emptype,
                    string empstat,
                    string indcorp,
                    string taxid,
                    string edulevel,
                    string gender,
                    string delcha,
                    string acctreq,
                    string custgrade,
                    string idtype,
                    string iddate,
                    string acctoff,
                    string swicode,
                    string resident,
                    string name1,
                    string name2,
                    string regid,
                    string empaddr,
                    string marital,
                    string spousedate,
                    string childname,
                    string childdate,
                    string platinum,
                    string graddate,
                    string spousename,
                    string def_expiry_date,
                    string legalsearch,
                    string newecosec,
                    int cust_type,
                    int cre_flag,
                    decimal ttAmt,
                    string id_expiry_date,
                    int cust_overview,
                    string scmul,
                    string source_fund,
                    string oblig_rate)
        {
            this.CreateNewBasisAccount3Async(bra, cur, led, tell_id, cusname, acctmgr, resflag, restext1, restind1, restext2, restind2, dirname1, diradd1, dirname2, diradd2, dirname3, diradd3, dirname4, diradd4, dirname5, diradd5, dirname6, diradd6, acctnat, addr1, addr2, email, mobnum, telnum1, telnum2, citycode, postcode, titlecode, countres, natnum, ecosec, cusclass, deptype, birdate, mothname, nationality, regnum, statecode, lga, empname, empdate, prevemp, emptype, empstat, indcorp, taxid, edulevel, gender, delcha, acctreq, custgrade, idtype, iddate, acctoff, swicode, resident, name1, name2, regid, empaddr, marital, spousedate, childname, childdate, platinum, graddate, spousename, def_expiry_date, legalsearch, newecosec, cust_type, cre_flag, ttAmt, id_expiry_date, cust_overview, scmul, source_fund, oblig_rate, null);
        }

        /// <remarks/>
        public void CreateNewBasisAccount3Async(
                    int bra,
                    int cur,
                    int led,
                    int tell_id,
                    string cusname,
                    int acctmgr,
                    int resflag,
                    string restext1,
                    int restind1,
                    string restext2,
                    int restind2,
                    string dirname1,
                    string diradd1,
                    string dirname2,
                    string diradd2,
                    string dirname3,
                    string diradd3,
                    string dirname4,
                    string diradd4,
                    string dirname5,
                    string diradd5,
                    string dirname6,
                    string diradd6,
                    int acctnat,
                    string addr1,
                    string addr2,
                    string email,
                    string mobnum,
                    string telnum1,
                    string telnum2,
                    string citycode,
                    string postcode,
                    string titlecode,
                    string countres,
                    string natnum,
                    string ecosec,
                    string cusclass,
                    string deptype,
                    string birdate,
                    string mothname,
                    string nationality,
                    string regnum,
                    string statecode,
                    string lga,
                    string empname,
                    string empdate,
                    string prevemp,
                    string emptype,
                    string empstat,
                    string indcorp,
                    string taxid,
                    string edulevel,
                    string gender,
                    string delcha,
                    string acctreq,
                    string custgrade,
                    string idtype,
                    string iddate,
                    string acctoff,
                    string swicode,
                    string resident,
                    string name1,
                    string name2,
                    string regid,
                    string empaddr,
                    string marital,
                    string spousedate,
                    string childname,
                    string childdate,
                    string platinum,
                    string graddate,
                    string spousename,
                    string def_expiry_date,
                    string legalsearch,
                    string newecosec,
                    int cust_type,
                    int cre_flag,
                    decimal ttAmt,
                    string id_expiry_date,
                    int cust_overview,
                    string scmul,
                    string source_fund,
                    string oblig_rate,
                    object userState)
        {
            if ((this.CreateNewBasisAccount3OperationCompleted == null))
            {
                this.CreateNewBasisAccount3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewBasisAccount3OperationCompleted);
            }
            this.InvokeAsync("CreateNewBasisAccount3", new object[] {
                    bra,
                    cur,
                    led,
                    tell_id,
                    cusname,
                    acctmgr,
                    resflag,
                    restext1,
                    restind1,
                    restext2,
                    restind2,
                    dirname1,
                    diradd1,
                    dirname2,
                    diradd2,
                    dirname3,
                    diradd3,
                    dirname4,
                    diradd4,
                    dirname5,
                    diradd5,
                    dirname6,
                    diradd6,
                    acctnat,
                    addr1,
                    addr2,
                    email,
                    mobnum,
                    telnum1,
                    telnum2,
                    citycode,
                    postcode,
                    titlecode,
                    countres,
                    natnum,
                    ecosec,
                    cusclass,
                    deptype,
                    birdate,
                    mothname,
                    nationality,
                    regnum,
                    statecode,
                    lga,
                    empname,
                    empdate,
                    prevemp,
                    emptype,
                    empstat,
                    indcorp,
                    taxid,
                    edulevel,
                    gender,
                    delcha,
                    acctreq,
                    custgrade,
                    idtype,
                    iddate,
                    acctoff,
                    swicode,
                    resident,
                    name1,
                    name2,
                    regid,
                    empaddr,
                    marital,
                    spousedate,
                    childname,
                    childdate,
                    platinum,
                    graddate,
                    spousename,
                    def_expiry_date,
                    legalsearch,
                    newecosec,
                    cust_type,
                    cre_flag,
                    ttAmt,
                    id_expiry_date,
                    cust_overview,
                    scmul,
                    source_fund,
                    oblig_rate}, this.CreateNewBasisAccount3OperationCompleted, userState);
        }

        private void OnCreateNewBasisAccount3OperationCompleted(object arg)
        {
            if ((this.CreateNewBasisAccount3Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewBasisAccount3Completed(this, new CreateNewBasisAccount3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateNewBasisAccount2Kiosk", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateNewBasisAccount2Kiosk(
                    int bra,
                    int cur,
                    int led,
                    int tell_id,
                    string cusname,
                    int acctmgr,
                    int resflag,
                    string restext1,
                    int restind1,
                    string restext2,
                    int restind2,
                    string dirname1,
                    string diradd1,
                    string dirname2,
                    string diradd2,
                    string dirname3,
                    string diradd3,
                    string dirname4,
                    string diradd4,
                    string dirname5,
                    string diradd5,
                    string dirname6,
                    string diradd6,
                    int acctnat,
                    string addr1,
                    string addr2,
                    string email,
                    string mobnum,
                    string telnum1,
                    string telnum2,
                    int citycode,
                    int postcode,
                    int titlecode,
                    int countres,
                    string natnum,
                    int ecosec,
                    int cusclass,
                    int deptype,
                    string birdate,
                    string mothname,
                    int nationality,
                    string regnum,
                    int statecode,
                    int lga,
                    string empname,
                    string empdate,
                    string prevemp,
                    int emptype,
                    int empstat,
                    int indcorp,
                    string taxid,
                    int edulevel,
                    int gender,
                    int delcha,
                    int acctreq,
                    int custgrade,
                    int idtype,
                    string iddate,
                    int acctoff,
                    string swicode,
                    int resident,
                    string name1,
                    string name2,
                    int regid,
                    string empaddr,
                    int marital,
                    string spousedate,
                    string childname,
                    string childdate,
                    string platinum,
                    string graddate,
                    string spousename,
                    int legalsearch,
                    int newecosec,
                    int cust_type,
                    int cre_flag,
                    int ttAmt)
        {
            object[] results = this.Invoke("CreateNewBasisAccount2Kiosk", new object[] {
                    bra,
                    cur,
                    led,
                    tell_id,
                    cusname,
                    acctmgr,
                    resflag,
                    restext1,
                    restind1,
                    restext2,
                    restind2,
                    dirname1,
                    diradd1,
                    dirname2,
                    diradd2,
                    dirname3,
                    diradd3,
                    dirname4,
                    diradd4,
                    dirname5,
                    diradd5,
                    dirname6,
                    diradd6,
                    acctnat,
                    addr1,
                    addr2,
                    email,
                    mobnum,
                    telnum1,
                    telnum2,
                    citycode,
                    postcode,
                    titlecode,
                    countres,
                    natnum,
                    ecosec,
                    cusclass,
                    deptype,
                    birdate,
                    mothname,
                    nationality,
                    regnum,
                    statecode,
                    lga,
                    empname,
                    empdate,
                    prevemp,
                    emptype,
                    empstat,
                    indcorp,
                    taxid,
                    edulevel,
                    gender,
                    delcha,
                    acctreq,
                    custgrade,
                    idtype,
                    iddate,
                    acctoff,
                    swicode,
                    resident,
                    name1,
                    name2,
                    regid,
                    empaddr,
                    marital,
                    spousedate,
                    childname,
                    childdate,
                    platinum,
                    graddate,
                    spousename,
                    legalsearch,
                    newecosec,
                    cust_type,
                    cre_flag,
                    ttAmt});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateNewBasisAccount2Kiosk(
                    int bra,
                    int cur,
                    int led,
                    int tell_id,
                    string cusname,
                    int acctmgr,
                    int resflag,
                    string restext1,
                    int restind1,
                    string restext2,
                    int restind2,
                    string dirname1,
                    string diradd1,
                    string dirname2,
                    string diradd2,
                    string dirname3,
                    string diradd3,
                    string dirname4,
                    string diradd4,
                    string dirname5,
                    string diradd5,
                    string dirname6,
                    string diradd6,
                    int acctnat,
                    string addr1,
                    string addr2,
                    string email,
                    string mobnum,
                    string telnum1,
                    string telnum2,
                    int citycode,
                    int postcode,
                    int titlecode,
                    int countres,
                    string natnum,
                    int ecosec,
                    int cusclass,
                    int deptype,
                    string birdate,
                    string mothname,
                    int nationality,
                    string regnum,
                    int statecode,
                    int lga,
                    string empname,
                    string empdate,
                    string prevemp,
                    int emptype,
                    int empstat,
                    int indcorp,
                    string taxid,
                    int edulevel,
                    int gender,
                    int delcha,
                    int acctreq,
                    int custgrade,
                    int idtype,
                    string iddate,
                    int acctoff,
                    string swicode,
                    int resident,
                    string name1,
                    string name2,
                    int regid,
                    string empaddr,
                    int marital,
                    string spousedate,
                    string childname,
                    string childdate,
                    string platinum,
                    string graddate,
                    string spousename,
                    int legalsearch,
                    int newecosec,
                    int cust_type,
                    int cre_flag,
                    int ttAmt,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("CreateNewBasisAccount2Kiosk", new object[] {
                    bra,
                    cur,
                    led,
                    tell_id,
                    cusname,
                    acctmgr,
                    resflag,
                    restext1,
                    restind1,
                    restext2,
                    restind2,
                    dirname1,
                    diradd1,
                    dirname2,
                    diradd2,
                    dirname3,
                    diradd3,
                    dirname4,
                    diradd4,
                    dirname5,
                    diradd5,
                    dirname6,
                    diradd6,
                    acctnat,
                    addr1,
                    addr2,
                    email,
                    mobnum,
                    telnum1,
                    telnum2,
                    citycode,
                    postcode,
                    titlecode,
                    countres,
                    natnum,
                    ecosec,
                    cusclass,
                    deptype,
                    birdate,
                    mothname,
                    nationality,
                    regnum,
                    statecode,
                    lga,
                    empname,
                    empdate,
                    prevemp,
                    emptype,
                    empstat,
                    indcorp,
                    taxid,
                    edulevel,
                    gender,
                    delcha,
                    acctreq,
                    custgrade,
                    idtype,
                    iddate,
                    acctoff,
                    swicode,
                    resident,
                    name1,
                    name2,
                    regid,
                    empaddr,
                    marital,
                    spousedate,
                    childname,
                    childdate,
                    platinum,
                    graddate,
                    spousename,
                    legalsearch,
                    newecosec,
                    cust_type,
                    cre_flag,
                    ttAmt}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateNewBasisAccount2Kiosk(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CreateNewBasisAccount2KioskAsync(
                    int bra,
                    int cur,
                    int led,
                    int tell_id,
                    string cusname,
                    int acctmgr,
                    int resflag,
                    string restext1,
                    int restind1,
                    string restext2,
                    int restind2,
                    string dirname1,
                    string diradd1,
                    string dirname2,
                    string diradd2,
                    string dirname3,
                    string diradd3,
                    string dirname4,
                    string diradd4,
                    string dirname5,
                    string diradd5,
                    string dirname6,
                    string diradd6,
                    int acctnat,
                    string addr1,
                    string addr2,
                    string email,
                    string mobnum,
                    string telnum1,
                    string telnum2,
                    int citycode,
                    int postcode,
                    int titlecode,
                    int countres,
                    string natnum,
                    int ecosec,
                    int cusclass,
                    int deptype,
                    string birdate,
                    string mothname,
                    int nationality,
                    string regnum,
                    int statecode,
                    int lga,
                    string empname,
                    string empdate,
                    string prevemp,
                    int emptype,
                    int empstat,
                    int indcorp,
                    string taxid,
                    int edulevel,
                    int gender,
                    int delcha,
                    int acctreq,
                    int custgrade,
                    int idtype,
                    string iddate,
                    int acctoff,
                    string swicode,
                    int resident,
                    string name1,
                    string name2,
                    int regid,
                    string empaddr,
                    int marital,
                    string spousedate,
                    string childname,
                    string childdate,
                    string platinum,
                    string graddate,
                    string spousename,
                    int legalsearch,
                    int newecosec,
                    int cust_type,
                    int cre_flag,
                    int ttAmt)
        {
            this.CreateNewBasisAccount2KioskAsync(bra, cur, led, tell_id, cusname, acctmgr, resflag, restext1, restind1, restext2, restind2, dirname1, diradd1, dirname2, diradd2, dirname3, diradd3, dirname4, diradd4, dirname5, diradd5, dirname6, diradd6, acctnat, addr1, addr2, email, mobnum, telnum1, telnum2, citycode, postcode, titlecode, countres, natnum, ecosec, cusclass, deptype, birdate, mothname, nationality, regnum, statecode, lga, empname, empdate, prevemp, emptype, empstat, indcorp, taxid, edulevel, gender, delcha, acctreq, custgrade, idtype, iddate, acctoff, swicode, resident, name1, name2, regid, empaddr, marital, spousedate, childname, childdate, platinum, graddate, spousename, legalsearch, newecosec, cust_type, cre_flag, ttAmt, null);
        }

        /// <remarks/>
        public void CreateNewBasisAccount2KioskAsync(
                    int bra,
                    int cur,
                    int led,
                    int tell_id,
                    string cusname,
                    int acctmgr,
                    int resflag,
                    string restext1,
                    int restind1,
                    string restext2,
                    int restind2,
                    string dirname1,
                    string diradd1,
                    string dirname2,
                    string diradd2,
                    string dirname3,
                    string diradd3,
                    string dirname4,
                    string diradd4,
                    string dirname5,
                    string diradd5,
                    string dirname6,
                    string diradd6,
                    int acctnat,
                    string addr1,
                    string addr2,
                    string email,
                    string mobnum,
                    string telnum1,
                    string telnum2,
                    int citycode,
                    int postcode,
                    int titlecode,
                    int countres,
                    string natnum,
                    int ecosec,
                    int cusclass,
                    int deptype,
                    string birdate,
                    string mothname,
                    int nationality,
                    string regnum,
                    int statecode,
                    int lga,
                    string empname,
                    string empdate,
                    string prevemp,
                    int emptype,
                    int empstat,
                    int indcorp,
                    string taxid,
                    int edulevel,
                    int gender,
                    int delcha,
                    int acctreq,
                    int custgrade,
                    int idtype,
                    string iddate,
                    int acctoff,
                    string swicode,
                    int resident,
                    string name1,
                    string name2,
                    int regid,
                    string empaddr,
                    int marital,
                    string spousedate,
                    string childname,
                    string childdate,
                    string platinum,
                    string graddate,
                    string spousename,
                    int legalsearch,
                    int newecosec,
                    int cust_type,
                    int cre_flag,
                    int ttAmt,
                    object userState)
        {
            if ((this.CreateNewBasisAccount2KioskOperationCompleted == null))
            {
                this.CreateNewBasisAccount2KioskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewBasisAccount2KioskOperationCompleted);
            }
            this.InvokeAsync("CreateNewBasisAccount2Kiosk", new object[] {
                    bra,
                    cur,
                    led,
                    tell_id,
                    cusname,
                    acctmgr,
                    resflag,
                    restext1,
                    restind1,
                    restext2,
                    restind2,
                    dirname1,
                    diradd1,
                    dirname2,
                    diradd2,
                    dirname3,
                    diradd3,
                    dirname4,
                    diradd4,
                    dirname5,
                    diradd5,
                    dirname6,
                    diradd6,
                    acctnat,
                    addr1,
                    addr2,
                    email,
                    mobnum,
                    telnum1,
                    telnum2,
                    citycode,
                    postcode,
                    titlecode,
                    countres,
                    natnum,
                    ecosec,
                    cusclass,
                    deptype,
                    birdate,
                    mothname,
                    nationality,
                    regnum,
                    statecode,
                    lga,
                    empname,
                    empdate,
                    prevemp,
                    emptype,
                    empstat,
                    indcorp,
                    taxid,
                    edulevel,
                    gender,
                    delcha,
                    acctreq,
                    custgrade,
                    idtype,
                    iddate,
                    acctoff,
                    swicode,
                    resident,
                    name1,
                    name2,
                    regid,
                    empaddr,
                    marital,
                    spousedate,
                    childname,
                    childdate,
                    platinum,
                    graddate,
                    spousename,
                    legalsearch,
                    newecosec,
                    cust_type,
                    cre_flag,
                    ttAmt}, this.CreateNewBasisAccount2KioskOperationCompleted, userState);
        }

        private void OnCreateNewBasisAccount2KioskOperationCompleted(object arg)
        {
            if ((this.CreateNewBasisAccount2KioskCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewBasisAccount2KioskCompleted(this, new CreateNewBasisAccount2KioskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CloseAccount", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CloseAccount(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string tellerid)
        {
            object[] results = this.Invoke("CloseAccount", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    tellerid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCloseAccount(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string tellerid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CloseAccount", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    tellerid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCloseAccount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CloseAccountAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string tellerid)
        {
            this.CloseAccountAsync(bracode, cusnum, curcode, ledcode, subacctcode, tellerid, null);
        }

        /// <remarks/>
        public void CloseAccountAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, string tellerid, object userState)
        {
            if ((this.CloseAccountOperationCompleted == null))
            {
                this.CloseAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseAccountOperationCompleted);
            }
            this.InvokeAsync("CloseAccount", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    tellerid}, this.CloseAccountOperationCompleted, userState);
        }

        private void OnCloseAccountOperationCompleted(object arg)
        {
            if ((this.CloseAccountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseAccountCompleted(this, new CloseAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AvailRevolvingCredit", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AvailRevolvingCredit(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, int tell_id, double rate, double bal_lim, string mat_date, string channel, string docAlp, string transUniqIndenf)
        {
            object[] results = this.Invoke("AvailRevolvingCredit", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    tell_id,
                    rate,
                    bal_lim,
                    mat_date,
                    channel,
                    docAlp,
                    transUniqIndenf});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAvailRevolvingCredit(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, int tell_id, double rate, double bal_lim, string mat_date, string channel, string docAlp, string transUniqIndenf, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AvailRevolvingCredit", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    tell_id,
                    rate,
                    bal_lim,
                    mat_date,
                    channel,
                    docAlp,
                    transUniqIndenf}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAvailRevolvingCredit(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AvailRevolvingCreditAsync(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, int tell_id, double rate, double bal_lim, string mat_date, string channel, string docAlp, string transUniqIndenf)
        {
            this.AvailRevolvingCreditAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, tell_id, rate, bal_lim, mat_date, channel, docAlp, transUniqIndenf, null);
        }

        /// <remarks/>
        public void AvailRevolvingCreditAsync(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, int tell_id, double rate, double bal_lim, string mat_date, string channel, string docAlp, string transUniqIndenf, object userState)
        {
            if ((this.AvailRevolvingCreditOperationCompleted == null))
            {
                this.AvailRevolvingCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAvailRevolvingCreditOperationCompleted);
            }
            this.InvokeAsync("AvailRevolvingCredit", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    tell_id,
                    rate,
                    bal_lim,
                    mat_date,
                    channel,
                    docAlp,
                    transUniqIndenf}, this.AvailRevolvingCreditOperationCompleted, userState);
        }

        private void OnAvailRevolvingCreditOperationCompleted(object arg)
        {
            if ((this.AvailRevolvingCreditCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AvailRevolvingCreditCompleted(this, new AvailRevolvingCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertMT103", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertMT103(
                    string case_num,
                    string InterBICName,
                    string currency,
                    decimal tra_amt,
                    string bra_code,
                    string cus_num,
                    string cur_code,
                    string led_code,
                    string sub_acct_code,
                    string cus_name,
                    string address1,
                    string address2,
                    string acctnofx,
                    string beneAccountNumber,
                    string ben_name,
                    string beneAddress,
                    string purpose_fx,
                    string offshoreChargeflag,
                    string benebankBIC,
                    string intermediarybankBIC,
                    string SWIFTBIC,
                    string intermidiaryBankFlag,
                    string Email,
                    string ccEmail,
                    string Telex_Message,
                    string Status,
                    string Narrative)
        {
            object[] results = this.Invoke("InsertMT103", new object[] {
                    case_num,
                    InterBICName,
                    currency,
                    tra_amt,
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    cus_name,
                    address1,
                    address2,
                    acctnofx,
                    beneAccountNumber,
                    ben_name,
                    beneAddress,
                    purpose_fx,
                    offshoreChargeflag,
                    benebankBIC,
                    intermediarybankBIC,
                    SWIFTBIC,
                    intermidiaryBankFlag,
                    Email,
                    ccEmail,
                    Telex_Message,
                    Status,
                    Narrative});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertMT103(
                    string case_num,
                    string InterBICName,
                    string currency,
                    decimal tra_amt,
                    string bra_code,
                    string cus_num,
                    string cur_code,
                    string led_code,
                    string sub_acct_code,
                    string cus_name,
                    string address1,
                    string address2,
                    string acctnofx,
                    string beneAccountNumber,
                    string ben_name,
                    string beneAddress,
                    string purpose_fx,
                    string offshoreChargeflag,
                    string benebankBIC,
                    string intermediarybankBIC,
                    string SWIFTBIC,
                    string intermidiaryBankFlag,
                    string Email,
                    string ccEmail,
                    string Telex_Message,
                    string Status,
                    string Narrative,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("InsertMT103", new object[] {
                    case_num,
                    InterBICName,
                    currency,
                    tra_amt,
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    cus_name,
                    address1,
                    address2,
                    acctnofx,
                    beneAccountNumber,
                    ben_name,
                    beneAddress,
                    purpose_fx,
                    offshoreChargeflag,
                    benebankBIC,
                    intermediarybankBIC,
                    SWIFTBIC,
                    intermidiaryBankFlag,
                    Email,
                    ccEmail,
                    Telex_Message,
                    Status,
                    Narrative}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInsertMT103(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertMT103Async(
                    string case_num,
                    string InterBICName,
                    string currency,
                    decimal tra_amt,
                    string bra_code,
                    string cus_num,
                    string cur_code,
                    string led_code,
                    string sub_acct_code,
                    string cus_name,
                    string address1,
                    string address2,
                    string acctnofx,
                    string beneAccountNumber,
                    string ben_name,
                    string beneAddress,
                    string purpose_fx,
                    string offshoreChargeflag,
                    string benebankBIC,
                    string intermediarybankBIC,
                    string SWIFTBIC,
                    string intermidiaryBankFlag,
                    string Email,
                    string ccEmail,
                    string Telex_Message,
                    string Status,
                    string Narrative)
        {
            this.InsertMT103Async(case_num, InterBICName, currency, tra_amt, bra_code, cus_num, cur_code, led_code, sub_acct_code, cus_name, address1, address2, acctnofx, beneAccountNumber, ben_name, beneAddress, purpose_fx, offshoreChargeflag, benebankBIC, intermediarybankBIC, SWIFTBIC, intermidiaryBankFlag, Email, ccEmail, Telex_Message, Status, Narrative, null);
        }

        /// <remarks/>
        public void InsertMT103Async(
                    string case_num,
                    string InterBICName,
                    string currency,
                    decimal tra_amt,
                    string bra_code,
                    string cus_num,
                    string cur_code,
                    string led_code,
                    string sub_acct_code,
                    string cus_name,
                    string address1,
                    string address2,
                    string acctnofx,
                    string beneAccountNumber,
                    string ben_name,
                    string beneAddress,
                    string purpose_fx,
                    string offshoreChargeflag,
                    string benebankBIC,
                    string intermediarybankBIC,
                    string SWIFTBIC,
                    string intermidiaryBankFlag,
                    string Email,
                    string ccEmail,
                    string Telex_Message,
                    string Status,
                    string Narrative,
                    object userState)
        {
            if ((this.InsertMT103OperationCompleted == null))
            {
                this.InsertMT103OperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMT103OperationCompleted);
            }
            this.InvokeAsync("InsertMT103", new object[] {
                    case_num,
                    InterBICName,
                    currency,
                    tra_amt,
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    cus_name,
                    address1,
                    address2,
                    acctnofx,
                    beneAccountNumber,
                    ben_name,
                    beneAddress,
                    purpose_fx,
                    offshoreChargeflag,
                    benebankBIC,
                    intermediarybankBIC,
                    SWIFTBIC,
                    intermidiaryBankFlag,
                    Email,
                    ccEmail,
                    Telex_Message,
                    Status,
                    Narrative}, this.InsertMT103OperationCompleted, userState);
        }

        private void OnInsertMT103OperationCompleted(object arg)
        {
            if ((this.InsertMT103Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMT103Completed(this, new InsertMT103CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateUserToken", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateUserToken(string userid, string tokenvalue)
        {
            object[] results = this.Invoke("ValidateUserToken", new object[] {
                    userid,
                    tokenvalue});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginValidateUserToken(string userid, string tokenvalue, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ValidateUserToken", new object[] {
                    userid,
                    tokenvalue}, callback, asyncState);
        }

        /// <remarks/>
        public string EndValidateUserToken(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ValidateUserTokenAsync(string userid, string tokenvalue)
        {
            this.ValidateUserTokenAsync(userid, tokenvalue, null);
        }

        /// <remarks/>
        public void ValidateUserTokenAsync(string userid, string tokenvalue, object userState)
        {
            if ((this.ValidateUserTokenOperationCompleted == null))
            {
                this.ValidateUserTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserTokenOperationCompleted);
            }
            this.InvokeAsync("ValidateUserToken", new object[] {
                    userid,
                    tokenvalue}, this.ValidateUserTokenOperationCompleted, userState);
        }

        private void OnValidateUserTokenOperationCompleted(object arg)
        {
            if ((this.ValidateUserTokenCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateUserTokenCompleted(this, new ValidateUserTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpsertCalypsoMonitor", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpsertCalypsoMonitor(int picked, int pushed, string channel)
        {
            object[] results = this.Invoke("UpsertCalypsoMonitor", new object[] {
                    picked,
                    pushed,
                    channel});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpsertCalypsoMonitor(int picked, int pushed, string channel, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpsertCalypsoMonitor", new object[] {
                    picked,
                    pushed,
                    channel}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpsertCalypsoMonitor(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpsertCalypsoMonitorAsync(int picked, int pushed, string channel)
        {
            this.UpsertCalypsoMonitorAsync(picked, pushed, channel, null);
        }

        /// <remarks/>
        public void UpsertCalypsoMonitorAsync(int picked, int pushed, string channel, object userState)
        {
            if ((this.UpsertCalypsoMonitorOperationCompleted == null))
            {
                this.UpsertCalypsoMonitorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpsertCalypsoMonitorOperationCompleted);
            }
            this.InvokeAsync("UpsertCalypsoMonitor", new object[] {
                    picked,
                    pushed,
                    channel}, this.UpsertCalypsoMonitorOperationCompleted, userState);
        }

        private void OnUpsertCalypsoMonitorOperationCompleted(object arg)
        {
            if ((this.UpsertCalypsoMonitorCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpsertCalypsoMonitorCompleted(this, new UpsertCalypsoMonitorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteBVN", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteBVN(string bvn, string customerID)
        {
            object[] results = this.Invoke("DeleteBVN", new object[] {
                    bvn,
                    customerID});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteBVN(string bvn, string customerID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteBVN", new object[] {
                    bvn,
                    customerID}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDeleteBVN(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DeleteBVNAsync(string bvn, string customerID)
        {
            this.DeleteBVNAsync(bvn, customerID, null);
        }

        /// <remarks/>
        public void DeleteBVNAsync(string bvn, string customerID, object userState)
        {
            if ((this.DeleteBVNOperationCompleted == null))
            {
                this.DeleteBVNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteBVNOperationCompleted);
            }
            this.InvokeAsync("DeleteBVN", new object[] {
                    bvn,
                    customerID}, this.DeleteBVNOperationCompleted, userState);
        }

        private void OnDeleteBVNOperationCompleted(object arg)
        {
            if ((this.DeleteBVNCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteBVNCompleted(this, new DeleteBVNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ApproveBASISChequeBook", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ApproveBASISChequeBook(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, int tell_id)
        {
            object[] results = this.Invoke("ApproveBASISChequeBook", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    tell_id});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginApproveBASISChequeBook(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, int tell_id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ApproveBASISChequeBook", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    tell_id}, callback, asyncState);
        }

        /// <remarks/>
        public string EndApproveBASISChequeBook(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ApproveBASISChequeBookAsync(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, int tell_id)
        {
            this.ApproveBASISChequeBookAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, tell_id, null);
        }

        /// <remarks/>
        public void ApproveBASISChequeBookAsync(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, int tell_id, object userState)
        {
            if ((this.ApproveBASISChequeBookOperationCompleted == null))
            {
                this.ApproveBASISChequeBookOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApproveBASISChequeBookOperationCompleted);
            }
            this.InvokeAsync("ApproveBASISChequeBook", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    tell_id}, this.ApproveBASISChequeBookOperationCompleted, userState);
        }

        private void OnApproveBASISChequeBookOperationCompleted(object arg)
        {
            if ((this.ApproveBASISChequeBookCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApproveBASISChequeBookCompleted(this, new ApproveBASISChequeBookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RequestBASISChequeBook", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RequestBASISChequeBook(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, int NoOfCheque, int PickUpBranch)
        {
            object[] results = this.Invoke("RequestBASISChequeBook", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    NoOfCheque,
                    PickUpBranch});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRequestBASISChequeBook(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, int NoOfCheque, int PickUpBranch, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RequestBASISChequeBook", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    NoOfCheque,
                    PickUpBranch}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRequestBASISChequeBook(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RequestBASISChequeBookAsync(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, int NoOfCheque, int PickUpBranch)
        {
            this.RequestBASISChequeBookAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, NoOfCheque, PickUpBranch, null);
        }

        /// <remarks/>
        public void RequestBASISChequeBookAsync(int bra_code, int cus_num, int cur_code, int led_code, int sub_acct_code, int NoOfCheque, int PickUpBranch, object userState)
        {
            if ((this.RequestBASISChequeBookOperationCompleted == null))
            {
                this.RequestBASISChequeBookOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestBASISChequeBookOperationCompleted);
            }
            this.InvokeAsync("RequestBASISChequeBook", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    NoOfCheque,
                    PickUpBranch}, this.RequestBASISChequeBookOperationCompleted, userState);
        }

        private void OnRequestBASISChequeBookOperationCompleted(object arg)
        {
            if ((this.RequestBASISChequeBookCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestBASISChequeBookCompleted(this, new RequestBASISChequeBookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PMUpdateBankCard", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PMUpdateBankCard(int bra_code, int acctMgr, int numAcct, string req_officer, string req_date, string ops_head, string card_type, string app_officer, string status, string caseNum)
        {
            object[] results = this.Invoke("PMUpdateBankCard", new object[] {
                    bra_code,
                    acctMgr,
                    numAcct,
                    req_officer,
                    req_date,
                    ops_head,
                    card_type,
                    app_officer,
                    status,
                    caseNum});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginPMUpdateBankCard(int bra_code, int acctMgr, int numAcct, string req_officer, string req_date, string ops_head, string card_type, string app_officer, string status, string caseNum, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("PMUpdateBankCard", new object[] {
                    bra_code,
                    acctMgr,
                    numAcct,
                    req_officer,
                    req_date,
                    ops_head,
                    card_type,
                    app_officer,
                    status,
                    caseNum}, callback, asyncState);
        }

        /// <remarks/>
        public string EndPMUpdateBankCard(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void PMUpdateBankCardAsync(int bra_code, int acctMgr, int numAcct, string req_officer, string req_date, string ops_head, string card_type, string app_officer, string status, string caseNum)
        {
            this.PMUpdateBankCardAsync(bra_code, acctMgr, numAcct, req_officer, req_date, ops_head, card_type, app_officer, status, caseNum, null);
        }

        /// <remarks/>
        public void PMUpdateBankCardAsync(int bra_code, int acctMgr, int numAcct, string req_officer, string req_date, string ops_head, string card_type, string app_officer, string status, string caseNum, object userState)
        {
            if ((this.PMUpdateBankCardOperationCompleted == null))
            {
                this.PMUpdateBankCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPMUpdateBankCardOperationCompleted);
            }
            this.InvokeAsync("PMUpdateBankCard", new object[] {
                    bra_code,
                    acctMgr,
                    numAcct,
                    req_officer,
                    req_date,
                    ops_head,
                    card_type,
                    app_officer,
                    status,
                    caseNum}, this.PMUpdateBankCardOperationCompleted, userState);
        }

        private void OnPMUpdateBankCardOperationCompleted(object arg)
        {
            if ((this.PMUpdateBankCardCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PMUpdateBankCardCompleted(this, new PMUpdateBankCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PM_FundingNewAccounts", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PM_FundingNewAccounts(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, string tellerid, string expl_code, string doc_num, int status, string tra_date)
        {
            object[] results = this.Invoke("PM_FundingNewAccounts", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    tellerid,
                    expl_code,
                    doc_num,
                    status,
                    tra_date});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginPM_FundingNewAccounts(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, string tellerid, string expl_code, string doc_num, int status, string tra_date, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("PM_FundingNewAccounts", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    tellerid,
                    expl_code,
                    doc_num,
                    status,
                    tra_date}, callback, asyncState);
        }

        /// <remarks/>
        public string EndPM_FundingNewAccounts(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void PM_FundingNewAccountsAsync(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, string tellerid, string expl_code, string doc_num, int status, string tra_date)
        {
            this.PM_FundingNewAccountsAsync(Acct_fro, Acct_to, Amount, type, channel, Remarks, tellerid, expl_code, doc_num, status, tra_date, null);
        }

        /// <remarks/>
        public void PM_FundingNewAccountsAsync(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, string tellerid, string expl_code, string doc_num, int status, string tra_date, object userState)
        {
            if ((this.PM_FundingNewAccountsOperationCompleted == null))
            {
                this.PM_FundingNewAccountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPM_FundingNewAccountsOperationCompleted);
            }
            this.InvokeAsync("PM_FundingNewAccounts", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    tellerid,
                    expl_code,
                    doc_num,
                    status,
                    tra_date}, this.PM_FundingNewAccountsOperationCompleted, userState);
        }

        private void OnPM_FundingNewAccountsOperationCompleted(object arg)
        {
            if ((this.PM_FundingNewAccountsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PM_FundingNewAccountsCompleted(this, new PM_FundingNewAccountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckActiveUsance", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckActiveUsance(string bra_code, string cus_num, string cur_code, string sub_acct_code)
        {
            object[] results = this.Invoke("CheckActiveUsance", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    sub_acct_code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckActiveUsance(string bra_code, string cus_num, string cur_code, string sub_acct_code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckActiveUsance", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    sub_acct_code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCheckActiveUsance(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckActiveUsanceAsync(string bra_code, string cus_num, string cur_code, string sub_acct_code)
        {
            this.CheckActiveUsanceAsync(bra_code, cus_num, cur_code, sub_acct_code, null);
        }

        /// <remarks/>
        public void CheckActiveUsanceAsync(string bra_code, string cus_num, string cur_code, string sub_acct_code, object userState)
        {
            if ((this.CheckActiveUsanceOperationCompleted == null))
            {
                this.CheckActiveUsanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckActiveUsanceOperationCompleted);
            }
            this.InvokeAsync("CheckActiveUsance", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    sub_acct_code}, this.CheckActiveUsanceOperationCompleted, userState);
        }

        private void OnCheckActiveUsanceOperationCompleted(object arg)
        {
            if ((this.CheckActiveUsanceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckActiveUsanceCompleted(this, new CheckActiveUsanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateBeneficiaryAccount", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateBeneficiaryAccount(string userid, string benacctno, string type)
        {
            object[] results = this.Invoke("ValidateBeneficiaryAccount", new object[] {
                    userid,
                    benacctno,
                    type});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginValidateBeneficiaryAccount(string userid, string benacctno, string type, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ValidateBeneficiaryAccount", new object[] {
                    userid,
                    benacctno,
                    type}, callback, asyncState);
        }

        /// <remarks/>
        public string EndValidateBeneficiaryAccount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ValidateBeneficiaryAccountAsync(string userid, string benacctno, string type)
        {
            this.ValidateBeneficiaryAccountAsync(userid, benacctno, type, null);
        }

        /// <remarks/>
        public void ValidateBeneficiaryAccountAsync(string userid, string benacctno, string type, object userState)
        {
            if ((this.ValidateBeneficiaryAccountOperationCompleted == null))
            {
                this.ValidateBeneficiaryAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateBeneficiaryAccountOperationCompleted);
            }
            this.InvokeAsync("ValidateBeneficiaryAccount", new object[] {
                    userid,
                    benacctno,
                    type}, this.ValidateBeneficiaryAccountOperationCompleted, userState);
        }

        private void OnValidateBeneficiaryAccountOperationCompleted(object arg)
        {
            if ((this.ValidateBeneficiaryAccountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateBeneficiaryAccountCompleted(this, new ValidateBeneficiaryAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferFundsPMFX", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TransferFundsPMFX(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, double cross_rate, int supervisorid, int tell_id, int origtbracode)
        {
            object[] results = this.Invoke("TransferFundsPMFX", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    cross_rate,
                    supervisorid,
                    tell_id,
                    origtbracode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTransferFundsPMFX(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, double cross_rate, int supervisorid, int tell_id, int origtbracode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("TransferFundsPMFX", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    cross_rate,
                    supervisorid,
                    tell_id,
                    origtbracode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTransferFundsPMFX(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TransferFundsPMFXAsync(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, double cross_rate, int supervisorid, int tell_id, int origtbracode)
        {
            this.TransferFundsPMFXAsync(Acct_fro, Acct_to, Amount, type, channel, Remarks, cross_rate, supervisorid, tell_id, origtbracode, null);
        }

        /// <remarks/>
        public void TransferFundsPMFXAsync(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, double cross_rate, int supervisorid, int tell_id, int origtbracode, object userState)
        {
            if ((this.TransferFundsPMFXOperationCompleted == null))
            {
                this.TransferFundsPMFXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferFundsPMFXOperationCompleted);
            }
            this.InvokeAsync("TransferFundsPMFX", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    cross_rate,
                    supervisorid,
                    tell_id,
                    origtbracode}, this.TransferFundsPMFXOperationCompleted, userState);
        }

        private void OnTransferFundsPMFXOperationCompleted(object arg)
        {
            if ((this.TransferFundsPMFXCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferFundsPMFXCompleted(this, new TransferFundsPMFXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PostToBASISDoc", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PostToBASISDoc(
                    string Acct_from1,
                    string Acct_to1,
                    double Tra_amt1,
                    int Expl_code1,
                    string Remark1,
                    string Reqcode,
                    string Acct_from2,
                    string Acct_to2,
                    double Tra_amt2,
                    int Expl_code2,
                    string Remark2,
                    string Acct_from3,
                    string Acct_to3,
                    double Tra_amt3,
                    int Expl_code3,
                    string Remark3,
                    string DocAlp)
        {
            object[] results = this.Invoke("PostToBASISDoc", new object[] {
                    Acct_from1,
                    Acct_to1,
                    Tra_amt1,
                    Expl_code1,
                    Remark1,
                    Reqcode,
                    Acct_from2,
                    Acct_to2,
                    Tra_amt2,
                    Expl_code2,
                    Remark2,
                    Acct_from3,
                    Acct_to3,
                    Tra_amt3,
                    Expl_code3,
                    Remark3,
                    DocAlp});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginPostToBASISDoc(
                    string Acct_from1,
                    string Acct_to1,
                    double Tra_amt1,
                    int Expl_code1,
                    string Remark1,
                    string Reqcode,
                    string Acct_from2,
                    string Acct_to2,
                    double Tra_amt2,
                    int Expl_code2,
                    string Remark2,
                    string Acct_from3,
                    string Acct_to3,
                    double Tra_amt3,
                    int Expl_code3,
                    string Remark3,
                    string DocAlp,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("PostToBASISDoc", new object[] {
                    Acct_from1,
                    Acct_to1,
                    Tra_amt1,
                    Expl_code1,
                    Remark1,
                    Reqcode,
                    Acct_from2,
                    Acct_to2,
                    Tra_amt2,
                    Expl_code2,
                    Remark2,
                    Acct_from3,
                    Acct_to3,
                    Tra_amt3,
                    Expl_code3,
                    Remark3,
                    DocAlp}, callback, asyncState);
        }

        /// <remarks/>
        public string EndPostToBASISDoc(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void PostToBASISDocAsync(
                    string Acct_from1,
                    string Acct_to1,
                    double Tra_amt1,
                    int Expl_code1,
                    string Remark1,
                    string Reqcode,
                    string Acct_from2,
                    string Acct_to2,
                    double Tra_amt2,
                    int Expl_code2,
                    string Remark2,
                    string Acct_from3,
                    string Acct_to3,
                    double Tra_amt3,
                    int Expl_code3,
                    string Remark3,
                    string DocAlp)
        {
            this.PostToBASISDocAsync(Acct_from1, Acct_to1, Tra_amt1, Expl_code1, Remark1, Reqcode, Acct_from2, Acct_to2, Tra_amt2, Expl_code2, Remark2, Acct_from3, Acct_to3, Tra_amt3, Expl_code3, Remark3, DocAlp, null);
        }

        /// <remarks/>
        public void PostToBASISDocAsync(
                    string Acct_from1,
                    string Acct_to1,
                    double Tra_amt1,
                    int Expl_code1,
                    string Remark1,
                    string Reqcode,
                    string Acct_from2,
                    string Acct_to2,
                    double Tra_amt2,
                    int Expl_code2,
                    string Remark2,
                    string Acct_from3,
                    string Acct_to3,
                    double Tra_amt3,
                    int Expl_code3,
                    string Remark3,
                    string DocAlp,
                    object userState)
        {
            if ((this.PostToBASISDocOperationCompleted == null))
            {
                this.PostToBASISDocOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostToBASISDocOperationCompleted);
            }
            this.InvokeAsync("PostToBASISDoc", new object[] {
                    Acct_from1,
                    Acct_to1,
                    Tra_amt1,
                    Expl_code1,
                    Remark1,
                    Reqcode,
                    Acct_from2,
                    Acct_to2,
                    Tra_amt2,
                    Expl_code2,
                    Remark2,
                    Acct_from3,
                    Acct_to3,
                    Tra_amt3,
                    Expl_code3,
                    Remark3,
                    DocAlp}, this.PostToBASISDocOperationCompleted, userState);
        }

        private void OnPostToBASISDocOperationCompleted(object arg)
        {
            if ((this.PostToBASISDocCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostToBASISDocCompleted(this, new PostToBASISDocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFTRAccountListCIS", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFTRAccountListCIS(string bracode, string cusnum)
        {
            object[] results = this.Invoke("GetFTRAccountListCIS", new object[] {
                    bracode,
                    cusnum});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetFTRAccountListCIS(string bracode, string cusnum, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetFTRAccountListCIS", new object[] {
                    bracode,
                    cusnum}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetFTRAccountListCIS(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetFTRAccountListCISAsync(string bracode, string cusnum)
        {
            this.GetFTRAccountListCISAsync(bracode, cusnum, null);
        }

        /// <remarks/>
        public void GetFTRAccountListCISAsync(string bracode, string cusnum, object userState)
        {
            if ((this.GetFTRAccountListCISOperationCompleted == null))
            {
                this.GetFTRAccountListCISOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFTRAccountListCISOperationCompleted);
            }
            this.InvokeAsync("GetFTRAccountListCIS", new object[] {
                    bracode,
                    cusnum}, this.GetFTRAccountListCISOperationCompleted, userState);
        }

        private void OnGetFTRAccountListCISOperationCompleted(object arg)
        {
            if ((this.GetFTRAccountListCISCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFTRAccountListCISCompleted(this, new GetFTRAccountListCISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFTRAccountList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFTRAccountList(string bracode, string cusnum)
        {
            object[] results = this.Invoke("GetFTRAccountList", new object[] {
                    bracode,
                    cusnum});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetFTRAccountList(string bracode, string cusnum, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetFTRAccountList", new object[] {
                    bracode,
                    cusnum}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetFTRAccountList(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetFTRAccountListAsync(string bracode, string cusnum)
        {
            this.GetFTRAccountListAsync(bracode, cusnum, null);
        }

        /// <remarks/>
        public void GetFTRAccountListAsync(string bracode, string cusnum, object userState)
        {
            if ((this.GetFTRAccountListOperationCompleted == null))
            {
                this.GetFTRAccountListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFTRAccountListOperationCompleted);
            }
            this.InvokeAsync("GetFTRAccountList", new object[] {
                    bracode,
                    cusnum}, this.GetFTRAccountListOperationCompleted, userState);
        }

        private void OnGetFTRAccountListOperationCompleted(object arg)
        {
            if ((this.GetFTRAccountListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFTRAccountListCompleted(this, new GetFTRAccountListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllBasisAccFTR", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllBasisAccFTR(string bracode, string cusnum)
        {
            object[] results = this.Invoke("GetAllBasisAccFTR", new object[] {
                    bracode,
                    cusnum});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAllBasisAccFTR(string bracode, string cusnum, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAllBasisAccFTR", new object[] {
                    bracode,
                    cusnum}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAllBasisAccFTR(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAllBasisAccFTRAsync(string bracode, string cusnum)
        {
            this.GetAllBasisAccFTRAsync(bracode, cusnum, null);
        }

        /// <remarks/>
        public void GetAllBasisAccFTRAsync(string bracode, string cusnum, object userState)
        {
            if ((this.GetAllBasisAccFTROperationCompleted == null))
            {
                this.GetAllBasisAccFTROperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllBasisAccFTROperationCompleted);
            }
            this.InvokeAsync("GetAllBasisAccFTR", new object[] {
                    bracode,
                    cusnum}, this.GetAllBasisAccFTROperationCompleted, userState);
        }

        private void OnGetAllBasisAccFTROperationCompleted(object arg)
        {
            if ((this.GetAllBasisAccFTRCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllBasisAccFTRCompleted(this, new GetAllBasisAccFTRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFTRAccountListCIS_Card", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFTRAccountListCIS_Card(string bracode, string cusnum)
        {
            object[] results = this.Invoke("GetFTRAccountListCIS_Card", new object[] {
                    bracode,
                    cusnum});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetFTRAccountListCIS_Card(string bracode, string cusnum, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetFTRAccountListCIS_Card", new object[] {
                    bracode,
                    cusnum}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetFTRAccountListCIS_Card(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetFTRAccountListCIS_CardAsync(string bracode, string cusnum)
        {
            this.GetFTRAccountListCIS_CardAsync(bracode, cusnum, null);
        }

        /// <remarks/>
        public void GetFTRAccountListCIS_CardAsync(string bracode, string cusnum, object userState)
        {
            if ((this.GetFTRAccountListCIS_CardOperationCompleted == null))
            {
                this.GetFTRAccountListCIS_CardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFTRAccountListCIS_CardOperationCompleted);
            }
            this.InvokeAsync("GetFTRAccountListCIS_Card", new object[] {
                    bracode,
                    cusnum}, this.GetFTRAccountListCIS_CardOperationCompleted, userState);
        }

        private void OnGetFTRAccountListCIS_CardOperationCompleted(object arg)
        {
            if ((this.GetFTRAccountListCIS_CardCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFTRAccountListCIS_CardCompleted(this, new GetFTRAccountListCIS_CardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFTRAccountListNaira", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFTRAccountListNaira(string bracode, string cusnum)
        {
            object[] results = this.Invoke("GetFTRAccountListNaira", new object[] {
                    bracode,
                    cusnum});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetFTRAccountListNaira(string bracode, string cusnum, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetFTRAccountListNaira", new object[] {
                    bracode,
                    cusnum}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetFTRAccountListNaira(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetFTRAccountListNairaAsync(string bracode, string cusnum)
        {
            this.GetFTRAccountListNairaAsync(bracode, cusnum, null);
        }

        /// <remarks/>
        public void GetFTRAccountListNairaAsync(string bracode, string cusnum, object userState)
        {
            if ((this.GetFTRAccountListNairaOperationCompleted == null))
            {
                this.GetFTRAccountListNairaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFTRAccountListNairaOperationCompleted);
            }
            this.InvokeAsync("GetFTRAccountListNaira", new object[] {
                    bracode,
                    cusnum}, this.GetFTRAccountListNairaOperationCompleted, userState);
        }

        private void OnGetFTRAccountListNairaOperationCompleted(object arg)
        {
            if ((this.GetFTRAccountListNairaCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFTRAccountListNairaCompleted(this, new GetFTRAccountListNairaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomAccList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDomAccList(string bracode, string cusnum)
        {
            object[] results = this.Invoke("GetDomAccList", new object[] {
                    bracode,
                    cusnum});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetDomAccList(string bracode, string cusnum, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetDomAccList", new object[] {
                    bracode,
                    cusnum}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetDomAccList(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetDomAccListAsync(string bracode, string cusnum)
        {
            this.GetDomAccListAsync(bracode, cusnum, null);
        }

        /// <remarks/>
        public void GetDomAccListAsync(string bracode, string cusnum, object userState)
        {
            if ((this.GetDomAccListOperationCompleted == null))
            {
                this.GetDomAccListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomAccListOperationCompleted);
            }
            this.InvokeAsync("GetDomAccList", new object[] {
                    bracode,
                    cusnum}, this.GetDomAccListOperationCompleted, userState);
        }

        private void OnGetDomAccListOperationCompleted(object arg)
        {
            if ((this.GetDomAccListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomAccListCompleted(this, new GetDomAccListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FXConcession", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FXConcession(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            object[] results = this.Invoke("FXConcession", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginFXConcession(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("FXConcession", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndFXConcession(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void FXConcessionAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            this.FXConcessionAsync(bracode, cusnum, curcode, ledcode, subacctcode, null);
        }

        /// <remarks/>
        public void FXConcessionAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, object userState)
        {
            if ((this.FXConcessionOperationCompleted == null))
            {
                this.FXConcessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFXConcessionOperationCompleted);
            }
            this.InvokeAsync("FXConcession", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, this.FXConcessionOperationCompleted, userState);
        }

        private void OnFXConcessionOperationCompleted(object arg)
        {
            if ((this.FXConcessionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FXConcessionCompleted(this, new FXConcessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkrestriction", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string checkrestriction(string accountno)
        {
            object[] results = this.Invoke("checkrestriction", new object[] {
                    accountno});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult Begincheckrestriction(string accountno, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("checkrestriction", new object[] {
                    accountno}, callback, asyncState);
        }

        /// <remarks/>
        public string Endcheckrestriction(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void checkrestrictionAsync(string accountno)
        {
            this.checkrestrictionAsync(accountno, null);
        }

        /// <remarks/>
        public void checkrestrictionAsync(string accountno, object userState)
        {
            if ((this.checkrestrictionOperationCompleted == null))
            {
                this.checkrestrictionOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckrestrictionOperationCompleted);
            }
            this.InvokeAsync("checkrestriction", new object[] {
                    accountno}, this.checkrestrictionOperationCompleted, userState);
        }

        private void OncheckrestrictionOperationCompleted(object arg)
        {
            if ((this.checkrestrictionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkrestrictionCompleted(this, new checkrestrictionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateAdminUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateAdminUser(string userid, string password, int appid)
        {
            object[] results = this.Invoke("ValidateAdminUser", new object[] {
                    userid,
                    password,
                    appid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginValidateAdminUser(string userid, string password, int appid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ValidateAdminUser", new object[] {
                    userid,
                    password,
                    appid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndValidateAdminUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ValidateAdminUserAsync(string userid, string password, int appid)
        {
            this.ValidateAdminUserAsync(userid, password, appid, null);
        }

        /// <remarks/>
        public void ValidateAdminUserAsync(string userid, string password, int appid, object userState)
        {
            if ((this.ValidateAdminUserOperationCompleted == null))
            {
                this.ValidateAdminUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateAdminUserOperationCompleted);
            }
            this.InvokeAsync("ValidateAdminUser", new object[] {
                    userid,
                    password,
                    appid}, this.ValidateAdminUserOperationCompleted, userState);
        }

        private void OnValidateAdminUserOperationCompleted(object arg)
        {
            if ((this.ValidateAdminUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateAdminUserCompleted(this, new ValidateAdminUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateEncryptedAdminUserWithIP", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateEncryptedAdminUserWithIP(string userid, string password, string code, int appid, string ipAddress)
        {
            object[] results = this.Invoke("ValidateEncryptedAdminUserWithIP", new object[] {
                    userid,
                    password,
                    code,
                    appid,
                    ipAddress});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginValidateEncryptedAdminUserWithIP(string userid, string password, string code, int appid, string ipAddress, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ValidateEncryptedAdminUserWithIP", new object[] {
                    userid,
                    password,
                    code,
                    appid,
                    ipAddress}, callback, asyncState);
        }

        /// <remarks/>
        public string EndValidateEncryptedAdminUserWithIP(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ValidateEncryptedAdminUserWithIPAsync(string userid, string password, string code, int appid, string ipAddress)
        {
            this.ValidateEncryptedAdminUserWithIPAsync(userid, password, code, appid, ipAddress, null);
        }

        /// <remarks/>
        public void ValidateEncryptedAdminUserWithIPAsync(string userid, string password, string code, int appid, string ipAddress, object userState)
        {
            if ((this.ValidateEncryptedAdminUserWithIPOperationCompleted == null))
            {
                this.ValidateEncryptedAdminUserWithIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateEncryptedAdminUserWithIPOperationCompleted);
            }
            this.InvokeAsync("ValidateEncryptedAdminUserWithIP", new object[] {
                    userid,
                    password,
                    code,
                    appid,
                    ipAddress}, this.ValidateEncryptedAdminUserWithIPOperationCompleted, userState);
        }

        private void OnValidateEncryptedAdminUserWithIPOperationCompleted(object arg)
        {
            if ((this.ValidateEncryptedAdminUserWithIPCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateEncryptedAdminUserWithIPCompleted(this, new ValidateEncryptedAdminUserWithIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateEncryptedAdminUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateEncryptedAdminUser(string userid, string password, string code, int appid)
        {
            object[] results = this.Invoke("ValidateEncryptedAdminUser", new object[] {
                    userid,
                    password,
                    code,
                    appid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginValidateEncryptedAdminUser(string userid, string password, string code, int appid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ValidateEncryptedAdminUser", new object[] {
                    userid,
                    password,
                    code,
                    appid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndValidateEncryptedAdminUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ValidateEncryptedAdminUserAsync(string userid, string password, string code, int appid)
        {
            this.ValidateEncryptedAdminUserAsync(userid, password, code, appid, null);
        }

        /// <remarks/>
        public void ValidateEncryptedAdminUserAsync(string userid, string password, string code, int appid, object userState)
        {
            if ((this.ValidateEncryptedAdminUserOperationCompleted == null))
            {
                this.ValidateEncryptedAdminUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateEncryptedAdminUserOperationCompleted);
            }
            this.InvokeAsync("ValidateEncryptedAdminUser", new object[] {
                    userid,
                    password,
                    code,
                    appid}, this.ValidateEncryptedAdminUserOperationCompleted, userState);
        }

        private void OnValidateEncryptedAdminUserOperationCompleted(object arg)
        {
            if ((this.ValidateEncryptedAdminUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateEncryptedAdminUserCompleted(this, new ValidateEncryptedAdminUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateAdminUserOffSite", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateAdminUserOffSite(string userid, string password, int appid)
        {
            object[] results = this.Invoke("ValidateAdminUserOffSite", new object[] {
                    userid,
                    password,
                    appid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginValidateAdminUserOffSite(string userid, string password, int appid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ValidateAdminUserOffSite", new object[] {
                    userid,
                    password,
                    appid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndValidateAdminUserOffSite(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ValidateAdminUserOffSiteAsync(string userid, string password, int appid)
        {
            this.ValidateAdminUserOffSiteAsync(userid, password, appid, null);
        }

        /// <remarks/>
        public void ValidateAdminUserOffSiteAsync(string userid, string password, int appid, object userState)
        {
            if ((this.ValidateAdminUserOffSiteOperationCompleted == null))
            {
                this.ValidateAdminUserOffSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateAdminUserOffSiteOperationCompleted);
            }
            this.InvokeAsync("ValidateAdminUserOffSite", new object[] {
                    userid,
                    password,
                    appid}, this.ValidateAdminUserOffSiteOperationCompleted, userState);
        }

        private void OnValidateAdminUserOffSiteOperationCompleted(object arg)
        {
            if ((this.ValidateAdminUserOffSiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateAdminUserOffSiteCompleted(this, new ValidateAdminUserOffSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateUser(string userid, string password)
        {
            object[] results = this.Invoke("ValidateUser", new object[] {
                    userid,
                    password});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginValidateUser(string userid, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ValidateUser", new object[] {
                    userid,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public string EndValidateUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ValidateUserAsync(string userid, string password)
        {
            this.ValidateUserAsync(userid, password, null);
        }

        /// <remarks/>
        public void ValidateUserAsync(string userid, string password, object userState)
        {
            if ((this.ValidateUserOperationCompleted == null))
            {
                this.ValidateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserOperationCompleted);
            }
            this.InvokeAsync("ValidateUser", new object[] {
                    userid,
                    password}, this.ValidateUserOperationCompleted, userState);
        }

        private void OnValidateUserOperationCompleted(object arg)
        {
            if ((this.ValidateUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateUserCompleted(this, new ValidateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountBalance", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAccountBalance(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            object[] results = this.Invoke("GetAccountBalance", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAccountBalance(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAccountBalance", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAccountBalance(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAccountBalanceAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            this.GetAccountBalanceAsync(bracode, cusnum, curcode, ledcode, subacctcode, null);
        }

        /// <remarks/>
        public void GetAccountBalanceAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, object userState)
        {
            if ((this.GetAccountBalanceOperationCompleted == null))
            {
                this.GetAccountBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountBalanceOperationCompleted);
            }
            this.InvokeAsync("GetAccountBalance", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, this.GetAccountBalanceOperationCompleted, userState);
        }

        private void OnGetAccountBalanceOperationCompleted(object arg)
        {
            if ((this.GetAccountBalanceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountBalanceCompleted(this, new GetAccountBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountBalanceSum", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAccountBalanceSum(string bracode, string cusnum, string curcode, string ledcode)
        {
            object[] results = this.Invoke("GetAccountBalanceSum", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAccountBalanceSum(string bracode, string cusnum, string curcode, string ledcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAccountBalanceSum", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAccountBalanceSum(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAccountBalanceSumAsync(string bracode, string cusnum, string curcode, string ledcode)
        {
            this.GetAccountBalanceSumAsync(bracode, cusnum, curcode, ledcode, null);
        }

        /// <remarks/>
        public void GetAccountBalanceSumAsync(string bracode, string cusnum, string curcode, string ledcode, object userState)
        {
            if ((this.GetAccountBalanceSumOperationCompleted == null))
            {
                this.GetAccountBalanceSumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountBalanceSumOperationCompleted);
            }
            this.InvokeAsync("GetAccountBalanceSum", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode}, this.GetAccountBalanceSumOperationCompleted, userState);
        }

        private void OnGetAccountBalanceSumOperationCompleted(object arg)
        {
            if ((this.GetAccountBalanceSumCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountBalanceSumCompleted(this, new GetAccountBalanceSumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountBalanceTrandate", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAccountBalanceTrandate(string bracode, string cusnum)
        {
            object[] results = this.Invoke("GetAccountBalanceTrandate", new object[] {
                    bracode,
                    cusnum});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAccountBalanceTrandate(string bracode, string cusnum, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAccountBalanceTrandate", new object[] {
                    bracode,
                    cusnum}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAccountBalanceTrandate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAccountBalanceTrandateAsync(string bracode, string cusnum)
        {
            this.GetAccountBalanceTrandateAsync(bracode, cusnum, null);
        }

        /// <remarks/>
        public void GetAccountBalanceTrandateAsync(string bracode, string cusnum, object userState)
        {
            if ((this.GetAccountBalanceTrandateOperationCompleted == null))
            {
                this.GetAccountBalanceTrandateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountBalanceTrandateOperationCompleted);
            }
            this.InvokeAsync("GetAccountBalanceTrandate", new object[] {
                    bracode,
                    cusnum}, this.GetAccountBalanceTrandateOperationCompleted, userState);
        }

        private void OnGetAccountBalanceTrandateOperationCompleted(object arg)
        {
            if ((this.GetAccountBalanceTrandateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountBalanceTrandateCompleted(this, new GetAccountBalanceTrandateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerName", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerName(string bracode, string cusnum)
        {
            object[] results = this.Invoke("GetCustomerName", new object[] {
                    bracode,
                    cusnum});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCustomerName(string bracode, string cusnum, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCustomerName", new object[] {
                    bracode,
                    cusnum}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetCustomerName(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetCustomerNameAsync(string bracode, string cusnum)
        {
            this.GetCustomerNameAsync(bracode, cusnum, null);
        }

        /// <remarks/>
        public void GetCustomerNameAsync(string bracode, string cusnum, object userState)
        {
            if ((this.GetCustomerNameOperationCompleted == null))
            {
                this.GetCustomerNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerName", new object[] {
                    bracode,
                    cusnum}, this.GetCustomerNameOperationCompleted, userState);
        }

        private void OnGetCustomerNameOperationCompleted(object arg)
        {
            if ((this.GetCustomerNameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerNameCompleted(this, new GetCustomerNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLedgerName", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLedgerName(string ledcode)
        {
            object[] results = this.Invoke("GetLedgerName", new object[] {
                    ledcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetLedgerName(string ledcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetLedgerName", new object[] {
                    ledcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetLedgerName(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetLedgerNameAsync(string ledcode)
        {
            this.GetLedgerNameAsync(ledcode, null);
        }

        /// <remarks/>
        public void GetLedgerNameAsync(string ledcode, object userState)
        {
            if ((this.GetLedgerNameOperationCompleted == null))
            {
                this.GetLedgerNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLedgerNameOperationCompleted);
            }
            this.InvokeAsync("GetLedgerName", new object[] {
                    ledcode}, this.GetLedgerNameOperationCompleted, userState);
        }

        private void OnGetLedgerNameOperationCompleted(object arg)
        {
            if ((this.GetLedgerNameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLedgerNameCompleted(this, new GetLedgerNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getRelationshipForSI", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getRelationshipForSI(string bracode, string cusnum, string relType1, string relType2, string relType3, string relbracode1, string relcusnum1, string relbracode2, string relcusnum2, string relbracode3, string relcusnum3, string opeType)
        {
            object[] results = this.Invoke("getRelationshipForSI", new object[] {
                    bracode,
                    cusnum,
                    relType1,
                    relType2,
                    relType3,
                    relbracode1,
                    relcusnum1,
                    relbracode2,
                    relcusnum2,
                    relbracode3,
                    relcusnum3,
                    opeType});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetRelationshipForSI(string bracode, string cusnum, string relType1, string relType2, string relType3, string relbracode1, string relcusnum1, string relbracode2, string relcusnum2, string relbracode3, string relcusnum3, string opeType, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getRelationshipForSI", new object[] {
                    bracode,
                    cusnum,
                    relType1,
                    relType2,
                    relType3,
                    relbracode1,
                    relcusnum1,
                    relbracode2,
                    relcusnum2,
                    relbracode3,
                    relcusnum3,
                    opeType}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetRelationshipForSI(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getRelationshipForSIAsync(string bracode, string cusnum, string relType1, string relType2, string relType3, string relbracode1, string relcusnum1, string relbracode2, string relcusnum2, string relbracode3, string relcusnum3, string opeType)
        {
            this.getRelationshipForSIAsync(bracode, cusnum, relType1, relType2, relType3, relbracode1, relcusnum1, relbracode2, relcusnum2, relbracode3, relcusnum3, opeType, null);
        }

        /// <remarks/>
        public void getRelationshipForSIAsync(string bracode, string cusnum, string relType1, string relType2, string relType3, string relbracode1, string relcusnum1, string relbracode2, string relcusnum2, string relbracode3, string relcusnum3, string opeType, object userState)
        {
            if ((this.getRelationshipForSIOperationCompleted == null))
            {
                this.getRelationshipForSIOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRelationshipForSIOperationCompleted);
            }
            this.InvokeAsync("getRelationshipForSI", new object[] {
                    bracode,
                    cusnum,
                    relType1,
                    relType2,
                    relType3,
                    relbracode1,
                    relcusnum1,
                    relbracode2,
                    relcusnum2,
                    relbracode3,
                    relcusnum3,
                    opeType}, this.getRelationshipForSIOperationCompleted, userState);
        }

        private void OngetRelationshipForSIOperationCompleted(object arg)
        {
            if ((this.getRelationshipForSICompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRelationshipForSICompleted(this, new getRelationshipForSICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTemporaryCardCode", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateTemporaryCardCode(int bra, int cus, string code)
        {
            object[] results = this.Invoke("UpdateTemporaryCardCode", new object[] {
                    bra,
                    cus,
                    code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateTemporaryCardCode(int bra, int cus, string code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateTemporaryCardCode", new object[] {
                    bra,
                    cus,
                    code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateTemporaryCardCode(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateTemporaryCardCodeAsync(int bra, int cus, string code)
        {
            this.UpdateTemporaryCardCodeAsync(bra, cus, code, null);
        }

        /// <remarks/>
        public void UpdateTemporaryCardCodeAsync(int bra, int cus, string code, object userState)
        {
            if ((this.UpdateTemporaryCardCodeOperationCompleted == null))
            {
                this.UpdateTemporaryCardCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTemporaryCardCodeOperationCompleted);
            }
            this.InvokeAsync("UpdateTemporaryCardCode", new object[] {
                    bra,
                    cus,
                    code}, this.UpdateTemporaryCardCodeOperationCompleted, userState);
        }

        private void OnUpdateTemporaryCardCodeOperationCompleted(object arg)
        {
            if ((this.UpdateTemporaryCardCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTemporaryCardCodeCompleted(this, new UpdateTemporaryCardCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLastTransactionDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLastTransactionDetails(int bracode, int cusnum, int curcode, int ledcode, int subacctcode)
        {
            object[] results = this.Invoke("GetLastTransactionDetails", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetLastTransactionDetails(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetLastTransactionDetails", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetLastTransactionDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetLastTransactionDetailsAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode)
        {
            this.GetLastTransactionDetailsAsync(bracode, cusnum, curcode, ledcode, subacctcode, null);
        }

        /// <remarks/>
        public void GetLastTransactionDetailsAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, object userState)
        {
            if ((this.GetLastTransactionDetailsOperationCompleted == null))
            {
                this.GetLastTransactionDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastTransactionDetailsOperationCompleted);
            }
            this.InvokeAsync("GetLastTransactionDetails", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, this.GetLastTransactionDetailsOperationCompleted, userState);
        }

        private void OnGetLastTransactionDetailsOperationCompleted(object arg)
        {
            if ((this.GetLastTransactionDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastTransactionDetailsCompleted(this, new GetLastTransactionDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLastAccountStatement", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLastAccountStatement(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, string custemail)
        {
            object[] results = this.Invoke("GetLastAccountStatement", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    custemail});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetLastAccountStatement(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, string custemail, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetLastAccountStatement", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    custemail}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetLastAccountStatement(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetLastAccountStatementAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, string custemail)
        {
            this.GetLastAccountStatementAsync(bracode, cusnum, curcode, ledcode, subacctcode, custemail, null);
        }

        /// <remarks/>
        public void GetLastAccountStatementAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, string custemail, object userState)
        {
            if ((this.GetLastAccountStatementOperationCompleted == null))
            {
                this.GetLastAccountStatementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastAccountStatementOperationCompleted);
            }
            this.InvokeAsync("GetLastAccountStatement", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    custemail}, this.GetLastAccountStatementOperationCompleted, userState);
        }

        private void OnGetLastAccountStatementOperationCompleted(object arg)
        {
            if ((this.GetLastAccountStatementCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastAccountStatementCompleted(this, new GetLastAccountStatementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountRestriction", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAccountRestriction(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            object[] results = this.Invoke("GetAccountRestriction", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAccountRestriction(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAccountRestriction", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAccountRestriction(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAccountRestrictionAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            this.GetAccountRestrictionAsync(bracode, cusnum, curcode, ledcode, subacctcode, null);
        }

        /// <remarks/>
        public void GetAccountRestrictionAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, object userState)
        {
            if ((this.GetAccountRestrictionOperationCompleted == null))
            {
                this.GetAccountRestrictionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountRestrictionOperationCompleted);
            }
            this.InvokeAsync("GetAccountRestriction", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, this.GetAccountRestrictionOperationCompleted, userState);
        }

        private void OnGetAccountRestrictionOperationCompleted(object arg)
        {
            if ((this.GetAccountRestrictionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountRestrictionCompleted(this, new GetAccountRestrictionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferFundPM", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TransferFundPM(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, int origtbra, int tell_id)
        {
            object[] results = this.Invoke("TransferFundPM", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    origtbra,
                    tell_id});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTransferFundPM(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, int origtbra, int tell_id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("TransferFundPM", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    origtbra,
                    tell_id}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTransferFundPM(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TransferFundPMAsync(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, int origtbra, int tell_id)
        {
            this.TransferFundPMAsync(Acct_fro, Acct_to, Amount, type, channel, Remarks, origtbra, tell_id, null);
        }

        /// <remarks/>
        public void TransferFundPMAsync(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, int origtbra, int tell_id, object userState)
        {
            if ((this.TransferFundPMOperationCompleted == null))
            {
                this.TransferFundPMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferFundPMOperationCompleted);
            }
            this.InvokeAsync("TransferFundPM", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    origtbra,
                    tell_id}, this.TransferFundPMOperationCompleted, userState);
        }

        private void OnTransferFundPMOperationCompleted(object arg)
        {
            if ((this.TransferFundPMCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferFundPMCompleted(this, new TransferFundPMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferFundPM57", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TransferFundPM57(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, int origtbra, int tell_id, string doc_alp, int man_app)
        {
            object[] results = this.Invoke("TransferFundPM57", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    origtbra,
                    tell_id,
                    doc_alp,
                    man_app});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTransferFundPM57(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, int origtbra, int tell_id, string doc_alp, int man_app, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("TransferFundPM57", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    origtbra,
                    tell_id,
                    doc_alp,
                    man_app}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTransferFundPM57(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TransferFundPM57Async(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, int origtbra, int tell_id, string doc_alp, int man_app)
        {
            this.TransferFundPM57Async(Acct_fro, Acct_to, Amount, type, channel, Remarks, origtbra, tell_id, doc_alp, man_app, null);
        }

        /// <remarks/>
        public void TransferFundPM57Async(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, int origtbra, int tell_id, string doc_alp, int man_app, object userState)
        {
            if ((this.TransferFundPM57OperationCompleted == null))
            {
                this.TransferFundPM57OperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferFundPM57OperationCompleted);
            }
            this.InvokeAsync("TransferFundPM57", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    origtbra,
                    tell_id,
                    doc_alp,
                    man_app}, this.TransferFundPM57OperationCompleted, userState);
        }

        private void OnTransferFundPM57OperationCompleted(object arg)
        {
            if ((this.TransferFundPM57Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferFundPM57Completed(this, new TransferFundPM57CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MaxAdvanceEligibityDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MaxAdvanceEligibityDetails(double intrate, string tenor, double monthSalAmount, double debitServiceRatio, string channel)
        {
            object[] results = this.Invoke("MaxAdvanceEligibityDetails", new object[] {
                    intrate,
                    tenor,
                    monthSalAmount,
                    debitServiceRatio,
                    channel});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginMaxAdvanceEligibityDetails(double intrate, string tenor, double monthSalAmount, double debitServiceRatio, string channel, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("MaxAdvanceEligibityDetails", new object[] {
                    intrate,
                    tenor,
                    monthSalAmount,
                    debitServiceRatio,
                    channel}, callback, asyncState);
        }

        /// <remarks/>
        public string EndMaxAdvanceEligibityDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void MaxAdvanceEligibityDetailsAsync(double intrate, string tenor, double monthSalAmount, double debitServiceRatio, string channel)
        {
            this.MaxAdvanceEligibityDetailsAsync(intrate, tenor, monthSalAmount, debitServiceRatio, channel, null);
        }

        /// <remarks/>
        public void MaxAdvanceEligibityDetailsAsync(double intrate, string tenor, double monthSalAmount, double debitServiceRatio, string channel, object userState)
        {
            if ((this.MaxAdvanceEligibityDetailsOperationCompleted == null))
            {
                this.MaxAdvanceEligibityDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMaxAdvanceEligibityDetailsOperationCompleted);
            }
            this.InvokeAsync("MaxAdvanceEligibityDetails", new object[] {
                    intrate,
                    tenor,
                    monthSalAmount,
                    debitServiceRatio,
                    channel}, this.MaxAdvanceEligibityDetailsOperationCompleted, userState);
        }

        private void OnMaxAdvanceEligibityDetailsOperationCompleted(object arg)
        {
            if ((this.MaxAdvanceEligibityDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MaxAdvanceEligibityDetailsCompleted(this, new MaxAdvanceEligibityDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/APRandRepaymentAmountForMaxAdvance", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string APRandRepaymentAmountForMaxAdvance(double intrate, string tenor, double managementfee, double commitmentfee, double insurancerate, double loanAmt, string channel)
        {
            object[] results = this.Invoke("APRandRepaymentAmountForMaxAdvance", new object[] {
                    intrate,
                    tenor,
                    managementfee,
                    commitmentfee,
                    insurancerate,
                    loanAmt,
                    channel});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAPRandRepaymentAmountForMaxAdvance(double intrate, string tenor, double managementfee, double commitmentfee, double insurancerate, double loanAmt, string channel, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("APRandRepaymentAmountForMaxAdvance", new object[] {
                    intrate,
                    tenor,
                    managementfee,
                    commitmentfee,
                    insurancerate,
                    loanAmt,
                    channel}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAPRandRepaymentAmountForMaxAdvance(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void APRandRepaymentAmountForMaxAdvanceAsync(double intrate, string tenor, double managementfee, double commitmentfee, double insurancerate, double loanAmt, string channel)
        {
            this.APRandRepaymentAmountForMaxAdvanceAsync(intrate, tenor, managementfee, commitmentfee, insurancerate, loanAmt, channel, null);
        }

        /// <remarks/>
        public void APRandRepaymentAmountForMaxAdvanceAsync(double intrate, string tenor, double managementfee, double commitmentfee, double insurancerate, double loanAmt, string channel, object userState)
        {
            if ((this.APRandRepaymentAmountForMaxAdvanceOperationCompleted == null))
            {
                this.APRandRepaymentAmountForMaxAdvanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAPRandRepaymentAmountForMaxAdvanceOperationCompleted);
            }
            this.InvokeAsync("APRandRepaymentAmountForMaxAdvance", new object[] {
                    intrate,
                    tenor,
                    managementfee,
                    commitmentfee,
                    insurancerate,
                    loanAmt,
                    channel}, this.APRandRepaymentAmountForMaxAdvanceOperationCompleted, userState);
        }

        private void OnAPRandRepaymentAmountForMaxAdvanceOperationCompleted(object arg)
        {
            if ((this.APRandRepaymentAmountForMaxAdvanceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.APRandRepaymentAmountForMaxAdvanceCompleted(this, new APRandRepaymentAmountForMaxAdvanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAdd", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateAdd(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, string mobnum, string emails, string telnum, string telnum2, string addline1, string addline2, string post_code, int tell_id)
        {
            object[] results = this.Invoke("UpdateAdd", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    mobnum,
                    emails,
                    telnum,
                    telnum2,
                    addline1,
                    addline2,
                    post_code,
                    tell_id});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateAdd(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, string mobnum, string emails, string telnum, string telnum2, string addline1, string addline2, string post_code, int tell_id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateAdd", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    mobnum,
                    emails,
                    telnum,
                    telnum2,
                    addline1,
                    addline2,
                    post_code,
                    tell_id}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateAdd(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateAddAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, string mobnum, string emails, string telnum, string telnum2, string addline1, string addline2, string post_code, int tell_id)
        {
            this.UpdateAddAsync(bracode, cusnum, curcode, ledcode, subacctcode, mobnum, emails, telnum, telnum2, addline1, addline2, post_code, tell_id, null);
        }

        /// <remarks/>
        public void UpdateAddAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, string mobnum, string emails, string telnum, string telnum2, string addline1, string addline2, string post_code, int tell_id, object userState)
        {
            if ((this.UpdateAddOperationCompleted == null))
            {
                this.UpdateAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAddOperationCompleted);
            }
            this.InvokeAsync("UpdateAdd", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    mobnum,
                    emails,
                    telnum,
                    telnum2,
                    addline1,
                    addline2,
                    post_code,
                    tell_id}, this.UpdateAddOperationCompleted, userState);
        }

        private void OnUpdateAddOperationCompleted(object arg)
        {
            if ((this.UpdateAddCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAddCompleted(this, new UpdateAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateNewTfsFeature", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateNewTfsFeature(string pipId, string title, string description, string projectName, string channel, string xmlrequest)
        {
            object[] results = this.Invoke("CreateNewTfsFeature", new object[] {
                    pipId,
                    title,
                    description,
                    projectName,
                    channel,
                    xmlrequest});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateNewTfsFeature(string pipId, string title, string description, string projectName, string channel, string xmlrequest, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateNewTfsFeature", new object[] {
                    pipId,
                    title,
                    description,
                    projectName,
                    channel,
                    xmlrequest}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateNewTfsFeature(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CreateNewTfsFeatureAsync(string pipId, string title, string description, string projectName, string channel, string xmlrequest)
        {
            this.CreateNewTfsFeatureAsync(pipId, title, description, projectName, channel, xmlrequest, null);
        }

        /// <remarks/>
        public void CreateNewTfsFeatureAsync(string pipId, string title, string description, string projectName, string channel, string xmlrequest, object userState)
        {
            if ((this.CreateNewTfsFeatureOperationCompleted == null))
            {
                this.CreateNewTfsFeatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewTfsFeatureOperationCompleted);
            }
            this.InvokeAsync("CreateNewTfsFeature", new object[] {
                    pipId,
                    title,
                    description,
                    projectName,
                    channel,
                    xmlrequest}, this.CreateNewTfsFeatureOperationCompleted, userState);
        }

        private void OnCreateNewTfsFeatureOperationCompleted(object arg)
        {
            if ((this.CreateNewTfsFeatureCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewTfsFeatureCompleted(this, new CreateNewTfsFeatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBasisAccount2", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateBasisAccount2(
                    int bra,
                    int cus,
                    int cur,
                    int led,
                    int sub,
                    string addr1,
                    string addr2,
                    string birdate,
                    string empaddr,
                    int citycode,
                    int countres,
                    int cusclass,
                    string empdate,
                    string email,
                    string empname,
                    int gender,
                    string iddate,
                    int idtype,
                    string mobnum,
                    string mothname,
                    int marital,
                    string name1,
                    string name2,
                    string cusname,
                    string natnum,
                    string postcode,
                    int statecode,
                    string taxid,
                    string telnum1,
                    int titlecode,
                    int deptype,
                    int code,
                    int tell_id,
                    int province,
                    int custype,
                    int regid,
                    int acctmgr,
                    int cur_inf,
                    int led_inf,
                    int sub_inf,
                    int newecosec,
                    int cust_seg,
                    int resi_code,
                    int oldecosec,
                    int risk_level,
                    string graddate,
                    string expdate,
                    int profcode)
        {
            object[] results = this.Invoke("UpdateBasisAccount2", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    sub,
                    addr1,
                    addr2,
                    birdate,
                    empaddr,
                    citycode,
                    countres,
                    cusclass,
                    empdate,
                    email,
                    empname,
                    gender,
                    iddate,
                    idtype,
                    mobnum,
                    mothname,
                    marital,
                    name1,
                    name2,
                    cusname,
                    natnum,
                    postcode,
                    statecode,
                    taxid,
                    telnum1,
                    titlecode,
                    deptype,
                    code,
                    tell_id,
                    province,
                    custype,
                    regid,
                    acctmgr,
                    cur_inf,
                    led_inf,
                    sub_inf,
                    newecosec,
                    cust_seg,
                    resi_code,
                    oldecosec,
                    risk_level,
                    graddate,
                    expdate,
                    profcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateBasisAccount2(
                    int bra,
                    int cus,
                    int cur,
                    int led,
                    int sub,
                    string addr1,
                    string addr2,
                    string birdate,
                    string empaddr,
                    int citycode,
                    int countres,
                    int cusclass,
                    string empdate,
                    string email,
                    string empname,
                    int gender,
                    string iddate,
                    int idtype,
                    string mobnum,
                    string mothname,
                    int marital,
                    string name1,
                    string name2,
                    string cusname,
                    string natnum,
                    string postcode,
                    int statecode,
                    string taxid,
                    string telnum1,
                    int titlecode,
                    int deptype,
                    int code,
                    int tell_id,
                    int province,
                    int custype,
                    int regid,
                    int acctmgr,
                    int cur_inf,
                    int led_inf,
                    int sub_inf,
                    int newecosec,
                    int cust_seg,
                    int resi_code,
                    int oldecosec,
                    int risk_level,
                    string graddate,
                    string expdate,
                    int profcode,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("UpdateBasisAccount2", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    sub,
                    addr1,
                    addr2,
                    birdate,
                    empaddr,
                    citycode,
                    countres,
                    cusclass,
                    empdate,
                    email,
                    empname,
                    gender,
                    iddate,
                    idtype,
                    mobnum,
                    mothname,
                    marital,
                    name1,
                    name2,
                    cusname,
                    natnum,
                    postcode,
                    statecode,
                    taxid,
                    telnum1,
                    titlecode,
                    deptype,
                    code,
                    tell_id,
                    province,
                    custype,
                    regid,
                    acctmgr,
                    cur_inf,
                    led_inf,
                    sub_inf,
                    newecosec,
                    cust_seg,
                    resi_code,
                    oldecosec,
                    risk_level,
                    graddate,
                    expdate,
                    profcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateBasisAccount2(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateBasisAccount2Async(
                    int bra,
                    int cus,
                    int cur,
                    int led,
                    int sub,
                    string addr1,
                    string addr2,
                    string birdate,
                    string empaddr,
                    int citycode,
                    int countres,
                    int cusclass,
                    string empdate,
                    string email,
                    string empname,
                    int gender,
                    string iddate,
                    int idtype,
                    string mobnum,
                    string mothname,
                    int marital,
                    string name1,
                    string name2,
                    string cusname,
                    string natnum,
                    string postcode,
                    int statecode,
                    string taxid,
                    string telnum1,
                    int titlecode,
                    int deptype,
                    int code,
                    int tell_id,
                    int province,
                    int custype,
                    int regid,
                    int acctmgr,
                    int cur_inf,
                    int led_inf,
                    int sub_inf,
                    int newecosec,
                    int cust_seg,
                    int resi_code,
                    int oldecosec,
                    int risk_level,
                    string graddate,
                    string expdate,
                    int profcode)
        {
            this.UpdateBasisAccount2Async(bra, cus, cur, led, sub, addr1, addr2, birdate, empaddr, citycode, countres, cusclass, empdate, email, empname, gender, iddate, idtype, mobnum, mothname, marital, name1, name2, cusname, natnum, postcode, statecode, taxid, telnum1, titlecode, deptype, code, tell_id, province, custype, regid, acctmgr, cur_inf, led_inf, sub_inf, newecosec, cust_seg, resi_code, oldecosec, risk_level, graddate, expdate, profcode, null);
        }

        /// <remarks/>
        public void UpdateBasisAccount2Async(
                    int bra,
                    int cus,
                    int cur,
                    int led,
                    int sub,
                    string addr1,
                    string addr2,
                    string birdate,
                    string empaddr,
                    int citycode,
                    int countres,
                    int cusclass,
                    string empdate,
                    string email,
                    string empname,
                    int gender,
                    string iddate,
                    int idtype,
                    string mobnum,
                    string mothname,
                    int marital,
                    string name1,
                    string name2,
                    string cusname,
                    string natnum,
                    string postcode,
                    int statecode,
                    string taxid,
                    string telnum1,
                    int titlecode,
                    int deptype,
                    int code,
                    int tell_id,
                    int province,
                    int custype,
                    int regid,
                    int acctmgr,
                    int cur_inf,
                    int led_inf,
                    int sub_inf,
                    int newecosec,
                    int cust_seg,
                    int resi_code,
                    int oldecosec,
                    int risk_level,
                    string graddate,
                    string expdate,
                    int profcode,
                    object userState)
        {
            if ((this.UpdateBasisAccount2OperationCompleted == null))
            {
                this.UpdateBasisAccount2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBasisAccount2OperationCompleted);
            }
            this.InvokeAsync("UpdateBasisAccount2", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    sub,
                    addr1,
                    addr2,
                    birdate,
                    empaddr,
                    citycode,
                    countres,
                    cusclass,
                    empdate,
                    email,
                    empname,
                    gender,
                    iddate,
                    idtype,
                    mobnum,
                    mothname,
                    marital,
                    name1,
                    name2,
                    cusname,
                    natnum,
                    postcode,
                    statecode,
                    taxid,
                    telnum1,
                    titlecode,
                    deptype,
                    code,
                    tell_id,
                    province,
                    custype,
                    regid,
                    acctmgr,
                    cur_inf,
                    led_inf,
                    sub_inf,
                    newecosec,
                    cust_seg,
                    resi_code,
                    oldecosec,
                    risk_level,
                    graddate,
                    expdate,
                    profcode}, this.UpdateBasisAccount2OperationCompleted, userState);
        }

        private void OnUpdateBasisAccount2OperationCompleted(object arg)
        {
            if ((this.UpdateBasisAccount2Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBasisAccount2Completed(this, new UpdateBasisAccount2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBasisAccount1", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateBasisAccount1(
                    int bra,
                    int cus,
                    int cur,
                    int led,
                    int sub,
                    string addr1,
                    string addr2,
                    string birdate,
                    string empaddr,
                    int citycode,
                    int countres,
                    int cusclass,
                    string empdate,
                    string email,
                    string empname,
                    int gender,
                    string iddate,
                    int idtype,
                    string mobnum,
                    string mothname,
                    int marital,
                    string name1,
                    string name2,
                    string cusname,
                    string natnum,
                    string postcode,
                    int statecode,
                    string taxid,
                    string telnum1,
                    int titlecode,
                    int deptype,
                    int code,
                    int tell_id,
                    int province,
                    int custype,
                    int regid,
                    int acctmgr,
                    int cur_inf,
                    int led_inf,
                    int sub_inf,
                    int newecosec,
                    int cust_seg,
                    int resi_code,
                    int oldecosec,
                    int risk_level,
                    string graddate,
                    string expdate,
                    int profcode)
        {
            object[] results = this.Invoke("UpdateBasisAccount1", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    sub,
                    addr1,
                    addr2,
                    birdate,
                    empaddr,
                    citycode,
                    countres,
                    cusclass,
                    empdate,
                    email,
                    empname,
                    gender,
                    iddate,
                    idtype,
                    mobnum,
                    mothname,
                    marital,
                    name1,
                    name2,
                    cusname,
                    natnum,
                    postcode,
                    statecode,
                    taxid,
                    telnum1,
                    titlecode,
                    deptype,
                    code,
                    tell_id,
                    province,
                    custype,
                    regid,
                    acctmgr,
                    cur_inf,
                    led_inf,
                    sub_inf,
                    newecosec,
                    cust_seg,
                    resi_code,
                    oldecosec,
                    risk_level,
                    graddate,
                    expdate,
                    profcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateBasisAccount1(
                    int bra,
                    int cus,
                    int cur,
                    int led,
                    int sub,
                    string addr1,
                    string addr2,
                    string birdate,
                    string empaddr,
                    int citycode,
                    int countres,
                    int cusclass,
                    string empdate,
                    string email,
                    string empname,
                    int gender,
                    string iddate,
                    int idtype,
                    string mobnum,
                    string mothname,
                    int marital,
                    string name1,
                    string name2,
                    string cusname,
                    string natnum,
                    string postcode,
                    int statecode,
                    string taxid,
                    string telnum1,
                    int titlecode,
                    int deptype,
                    int code,
                    int tell_id,
                    int province,
                    int custype,
                    int regid,
                    int acctmgr,
                    int cur_inf,
                    int led_inf,
                    int sub_inf,
                    int newecosec,
                    int cust_seg,
                    int resi_code,
                    int oldecosec,
                    int risk_level,
                    string graddate,
                    string expdate,
                    int profcode,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("UpdateBasisAccount1", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    sub,
                    addr1,
                    addr2,
                    birdate,
                    empaddr,
                    citycode,
                    countres,
                    cusclass,
                    empdate,
                    email,
                    empname,
                    gender,
                    iddate,
                    idtype,
                    mobnum,
                    mothname,
                    marital,
                    name1,
                    name2,
                    cusname,
                    natnum,
                    postcode,
                    statecode,
                    taxid,
                    telnum1,
                    titlecode,
                    deptype,
                    code,
                    tell_id,
                    province,
                    custype,
                    regid,
                    acctmgr,
                    cur_inf,
                    led_inf,
                    sub_inf,
                    newecosec,
                    cust_seg,
                    resi_code,
                    oldecosec,
                    risk_level,
                    graddate,
                    expdate,
                    profcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateBasisAccount1(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateBasisAccount1Async(
                    int bra,
                    int cus,
                    int cur,
                    int led,
                    int sub,
                    string addr1,
                    string addr2,
                    string birdate,
                    string empaddr,
                    int citycode,
                    int countres,
                    int cusclass,
                    string empdate,
                    string email,
                    string empname,
                    int gender,
                    string iddate,
                    int idtype,
                    string mobnum,
                    string mothname,
                    int marital,
                    string name1,
                    string name2,
                    string cusname,
                    string natnum,
                    string postcode,
                    int statecode,
                    string taxid,
                    string telnum1,
                    int titlecode,
                    int deptype,
                    int code,
                    int tell_id,
                    int province,
                    int custype,
                    int regid,
                    int acctmgr,
                    int cur_inf,
                    int led_inf,
                    int sub_inf,
                    int newecosec,
                    int cust_seg,
                    int resi_code,
                    int oldecosec,
                    int risk_level,
                    string graddate,
                    string expdate,
                    int profcode)
        {
            this.UpdateBasisAccount1Async(bra, cus, cur, led, sub, addr1, addr2, birdate, empaddr, citycode, countres, cusclass, empdate, email, empname, gender, iddate, idtype, mobnum, mothname, marital, name1, name2, cusname, natnum, postcode, statecode, taxid, telnum1, titlecode, deptype, code, tell_id, province, custype, regid, acctmgr, cur_inf, led_inf, sub_inf, newecosec, cust_seg, resi_code, oldecosec, risk_level, graddate, expdate, profcode, null);
        }

        /// <remarks/>
        public void UpdateBasisAccount1Async(
                    int bra,
                    int cus,
                    int cur,
                    int led,
                    int sub,
                    string addr1,
                    string addr2,
                    string birdate,
                    string empaddr,
                    int citycode,
                    int countres,
                    int cusclass,
                    string empdate,
                    string email,
                    string empname,
                    int gender,
                    string iddate,
                    int idtype,
                    string mobnum,
                    string mothname,
                    int marital,
                    string name1,
                    string name2,
                    string cusname,
                    string natnum,
                    string postcode,
                    int statecode,
                    string taxid,
                    string telnum1,
                    int titlecode,
                    int deptype,
                    int code,
                    int tell_id,
                    int province,
                    int custype,
                    int regid,
                    int acctmgr,
                    int cur_inf,
                    int led_inf,
                    int sub_inf,
                    int newecosec,
                    int cust_seg,
                    int resi_code,
                    int oldecosec,
                    int risk_level,
                    string graddate,
                    string expdate,
                    int profcode,
                    object userState)
        {
            if ((this.UpdateBasisAccount1OperationCompleted == null))
            {
                this.UpdateBasisAccount1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBasisAccount1OperationCompleted);
            }
            this.InvokeAsync("UpdateBasisAccount1", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    sub,
                    addr1,
                    addr2,
                    birdate,
                    empaddr,
                    citycode,
                    countres,
                    cusclass,
                    empdate,
                    email,
                    empname,
                    gender,
                    iddate,
                    idtype,
                    mobnum,
                    mothname,
                    marital,
                    name1,
                    name2,
                    cusname,
                    natnum,
                    postcode,
                    statecode,
                    taxid,
                    telnum1,
                    titlecode,
                    deptype,
                    code,
                    tell_id,
                    province,
                    custype,
                    regid,
                    acctmgr,
                    cur_inf,
                    led_inf,
                    sub_inf,
                    newecosec,
                    cust_seg,
                    resi_code,
                    oldecosec,
                    risk_level,
                    graddate,
                    expdate,
                    profcode}, this.UpdateBasisAccount1OperationCompleted, userState);
        }

        private void OnUpdateBasisAccount1OperationCompleted(object arg)
        {
            if ((this.UpdateBasisAccount1Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBasisAccount1Completed(this, new UpdateBasisAccount1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBasisAccount", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateBasisAccount(
                    int bra,
                    int cus,
                    int cur,
                    int led,
                    int sub,
                    string addr1,
                    string addr2,
                    string birdate,
                    string empaddr,
                    int citycode,
                    int countres,
                    int cusclass,
                    string empdate,
                    string email,
                    string empname,
                    int gender,
                    string iddate,
                    int idtype,
                    string mobnum,
                    string mothname,
                    int marital,
                    string name1,
                    string name2,
                    string cusname,
                    string natnum,
                    string postcode,
                    int statecode,
                    string taxid,
                    string telnum1,
                    int titlecode,
                    int deptype,
                    int code,
                    int tell_id,
                    int province,
                    int custype,
                    int regid,
                    int acctmgr,
                    int cur_inf,
                    int led_inf,
                    int sub_inf)
        {
            object[] results = this.Invoke("UpdateBasisAccount", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    sub,
                    addr1,
                    addr2,
                    birdate,
                    empaddr,
                    citycode,
                    countres,
                    cusclass,
                    empdate,
                    email,
                    empname,
                    gender,
                    iddate,
                    idtype,
                    mobnum,
                    mothname,
                    marital,
                    name1,
                    name2,
                    cusname,
                    natnum,
                    postcode,
                    statecode,
                    taxid,
                    telnum1,
                    titlecode,
                    deptype,
                    code,
                    tell_id,
                    province,
                    custype,
                    regid,
                    acctmgr,
                    cur_inf,
                    led_inf,
                    sub_inf});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateBasisAccount(
                    int bra,
                    int cus,
                    int cur,
                    int led,
                    int sub,
                    string addr1,
                    string addr2,
                    string birdate,
                    string empaddr,
                    int citycode,
                    int countres,
                    int cusclass,
                    string empdate,
                    string email,
                    string empname,
                    int gender,
                    string iddate,
                    int idtype,
                    string mobnum,
                    string mothname,
                    int marital,
                    string name1,
                    string name2,
                    string cusname,
                    string natnum,
                    string postcode,
                    int statecode,
                    string taxid,
                    string telnum1,
                    int titlecode,
                    int deptype,
                    int code,
                    int tell_id,
                    int province,
                    int custype,
                    int regid,
                    int acctmgr,
                    int cur_inf,
                    int led_inf,
                    int sub_inf,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("UpdateBasisAccount", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    sub,
                    addr1,
                    addr2,
                    birdate,
                    empaddr,
                    citycode,
                    countres,
                    cusclass,
                    empdate,
                    email,
                    empname,
                    gender,
                    iddate,
                    idtype,
                    mobnum,
                    mothname,
                    marital,
                    name1,
                    name2,
                    cusname,
                    natnum,
                    postcode,
                    statecode,
                    taxid,
                    telnum1,
                    titlecode,
                    deptype,
                    code,
                    tell_id,
                    province,
                    custype,
                    regid,
                    acctmgr,
                    cur_inf,
                    led_inf,
                    sub_inf}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateBasisAccount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateBasisAccountAsync(
                    int bra,
                    int cus,
                    int cur,
                    int led,
                    int sub,
                    string addr1,
                    string addr2,
                    string birdate,
                    string empaddr,
                    int citycode,
                    int countres,
                    int cusclass,
                    string empdate,
                    string email,
                    string empname,
                    int gender,
                    string iddate,
                    int idtype,
                    string mobnum,
                    string mothname,
                    int marital,
                    string name1,
                    string name2,
                    string cusname,
                    string natnum,
                    string postcode,
                    int statecode,
                    string taxid,
                    string telnum1,
                    int titlecode,
                    int deptype,
                    int code,
                    int tell_id,
                    int province,
                    int custype,
                    int regid,
                    int acctmgr,
                    int cur_inf,
                    int led_inf,
                    int sub_inf)
        {
            this.UpdateBasisAccountAsync(bra, cus, cur, led, sub, addr1, addr2, birdate, empaddr, citycode, countres, cusclass, empdate, email, empname, gender, iddate, idtype, mobnum, mothname, marital, name1, name2, cusname, natnum, postcode, statecode, taxid, telnum1, titlecode, deptype, code, tell_id, province, custype, regid, acctmgr, cur_inf, led_inf, sub_inf, null);
        }

        /// <remarks/>
        public void UpdateBasisAccountAsync(
                    int bra,
                    int cus,
                    int cur,
                    int led,
                    int sub,
                    string addr1,
                    string addr2,
                    string birdate,
                    string empaddr,
                    int citycode,
                    int countres,
                    int cusclass,
                    string empdate,
                    string email,
                    string empname,
                    int gender,
                    string iddate,
                    int idtype,
                    string mobnum,
                    string mothname,
                    int marital,
                    string name1,
                    string name2,
                    string cusname,
                    string natnum,
                    string postcode,
                    int statecode,
                    string taxid,
                    string telnum1,
                    int titlecode,
                    int deptype,
                    int code,
                    int tell_id,
                    int province,
                    int custype,
                    int regid,
                    int acctmgr,
                    int cur_inf,
                    int led_inf,
                    int sub_inf,
                    object userState)
        {
            if ((this.UpdateBasisAccountOperationCompleted == null))
            {
                this.UpdateBasisAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBasisAccountOperationCompleted);
            }
            this.InvokeAsync("UpdateBasisAccount", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    sub,
                    addr1,
                    addr2,
                    birdate,
                    empaddr,
                    citycode,
                    countres,
                    cusclass,
                    empdate,
                    email,
                    empname,
                    gender,
                    iddate,
                    idtype,
                    mobnum,
                    mothname,
                    marital,
                    name1,
                    name2,
                    cusname,
                    natnum,
                    postcode,
                    statecode,
                    taxid,
                    telnum1,
                    titlecode,
                    deptype,
                    code,
                    tell_id,
                    province,
                    custype,
                    regid,
                    acctmgr,
                    cur_inf,
                    led_inf,
                    sub_inf}, this.UpdateBasisAccountOperationCompleted, userState);
        }

        private void OnUpdateBasisAccountOperationCompleted(object arg)
        {
            if ((this.UpdateBasisAccountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBasisAccountCompleted(this, new UpdateBasisAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSpecAcc", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateSpecAcc(int bra, int cus, int cur, int led, int sub, string iddate, string natnum, int idtype)
        {
            object[] results = this.Invoke("UpdateSpecAcc", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    sub,
                    iddate,
                    natnum,
                    idtype});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateSpecAcc(int bra, int cus, int cur, int led, int sub, string iddate, string natnum, int idtype, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateSpecAcc", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    sub,
                    iddate,
                    natnum,
                    idtype}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateSpecAcc(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateSpecAccAsync(int bra, int cus, int cur, int led, int sub, string iddate, string natnum, int idtype)
        {
            this.UpdateSpecAccAsync(bra, cus, cur, led, sub, iddate, natnum, idtype, null);
        }

        /// <remarks/>
        public void UpdateSpecAccAsync(int bra, int cus, int cur, int led, int sub, string iddate, string natnum, int idtype, object userState)
        {
            if ((this.UpdateSpecAccOperationCompleted == null))
            {
                this.UpdateSpecAccOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSpecAccOperationCompleted);
            }
            this.InvokeAsync("UpdateSpecAcc", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    sub,
                    iddate,
                    natnum,
                    idtype}, this.UpdateSpecAccOperationCompleted, userState);
        }

        private void OnUpdateSpecAccOperationCompleted(object arg)
        {
            if ((this.UpdateSpecAccCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSpecAccCompleted(this, new UpdateSpecAccCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateStandingIns", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateStandingIns(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int standInsType, string paymentFreq, int paytype, string fstPayDate, float fstPayAmt, string lstPayDate, string credAcct, string remarks, int tell_id)
        {
            object[] results = this.Invoke("CreateStandingIns", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    standInsType,
                    paymentFreq,
                    paytype,
                    fstPayDate,
                    fstPayAmt,
                    lstPayDate,
                    credAcct,
                    remarks,
                    tell_id});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateStandingIns(
                    int bracode,
                    int cusnum,
                    int curcode,
                    int ledcode,
                    int subacctcode,
                    int standInsType,
                    string paymentFreq,
                    int paytype,
                    string fstPayDate,
                    float fstPayAmt,
                    string lstPayDate,
                    string credAcct,
                    string remarks,
                    int tell_id,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("CreateStandingIns", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    standInsType,
                    paymentFreq,
                    paytype,
                    fstPayDate,
                    fstPayAmt,
                    lstPayDate,
                    credAcct,
                    remarks,
                    tell_id}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateStandingIns(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CreateStandingInsAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int standInsType, string paymentFreq, int paytype, string fstPayDate, float fstPayAmt, string lstPayDate, string credAcct, string remarks, int tell_id)
        {
            this.CreateStandingInsAsync(bracode, cusnum, curcode, ledcode, subacctcode, standInsType, paymentFreq, paytype, fstPayDate, fstPayAmt, lstPayDate, credAcct, remarks, tell_id, null);
        }

        /// <remarks/>
        public void CreateStandingInsAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int standInsType, string paymentFreq, int paytype, string fstPayDate, float fstPayAmt, string lstPayDate, string credAcct, string remarks, int tell_id, object userState)
        {
            if ((this.CreateStandingInsOperationCompleted == null))
            {
                this.CreateStandingInsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateStandingInsOperationCompleted);
            }
            this.InvokeAsync("CreateStandingIns", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    standInsType,
                    paymentFreq,
                    paytype,
                    fstPayDate,
                    fstPayAmt,
                    lstPayDate,
                    credAcct,
                    remarks,
                    tell_id}, this.CreateStandingInsOperationCompleted, userState);
        }

        private void OnCreateStandingInsOperationCompleted(object arg)
        {
            if ((this.CreateStandingInsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateStandingInsCompleted(this, new CreateStandingInsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateStandingInsType", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateStandingInsType(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, string paymentFreq, int standInsType, string fstPayDate, float fstPayAmt, string lstPayDate, string credAcct, string remarks)
        {
            object[] results = this.Invoke("CreateStandingInsType", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    paymentFreq,
                    standInsType,
                    fstPayDate,
                    fstPayAmt,
                    lstPayDate,
                    credAcct,
                    remarks});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateStandingInsType(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, string paymentFreq, int standInsType, string fstPayDate, float fstPayAmt, string lstPayDate, string credAcct, string remarks, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateStandingInsType", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    paymentFreq,
                    standInsType,
                    fstPayDate,
                    fstPayAmt,
                    lstPayDate,
                    credAcct,
                    remarks}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateStandingInsType(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CreateStandingInsTypeAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, string paymentFreq, int standInsType, string fstPayDate, float fstPayAmt, string lstPayDate, string credAcct, string remarks)
        {
            this.CreateStandingInsTypeAsync(bracode, cusnum, curcode, ledcode, subacctcode, paymentFreq, standInsType, fstPayDate, fstPayAmt, lstPayDate, credAcct, remarks, null);
        }

        /// <remarks/>
        public void CreateStandingInsTypeAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, string paymentFreq, int standInsType, string fstPayDate, float fstPayAmt, string lstPayDate, string credAcct, string remarks, object userState)
        {
            if ((this.CreateStandingInsTypeOperationCompleted == null))
            {
                this.CreateStandingInsTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateStandingInsTypeOperationCompleted);
            }
            this.InvokeAsync("CreateStandingInsType", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    paymentFreq,
                    standInsType,
                    fstPayDate,
                    fstPayAmt,
                    lstPayDate,
                    credAcct,
                    remarks}, this.CreateStandingInsTypeOperationCompleted, userState);
        }

        private void OnCreateStandingInsTypeOperationCompleted(object arg)
        {
            if ((this.CreateStandingInsTypeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateStandingInsTypeCompleted(this, new CreateStandingInsTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelStandinIns", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelStandinIns(int pBranchCode, int pCustomerNo, int pCurrency, int pLedger, int pSubAcctCode, int pSeq)
        {
            object[] results = this.Invoke("CancelStandinIns", new object[] {
                    pBranchCode,
                    pCustomerNo,
                    pCurrency,
                    pLedger,
                    pSubAcctCode,
                    pSeq});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCancelStandinIns(int pBranchCode, int pCustomerNo, int pCurrency, int pLedger, int pSubAcctCode, int pSeq, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CancelStandinIns", new object[] {
                    pBranchCode,
                    pCustomerNo,
                    pCurrency,
                    pLedger,
                    pSubAcctCode,
                    pSeq}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCancelStandinIns(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CancelStandinInsAsync(int pBranchCode, int pCustomerNo, int pCurrency, int pLedger, int pSubAcctCode, int pSeq)
        {
            this.CancelStandinInsAsync(pBranchCode, pCustomerNo, pCurrency, pLedger, pSubAcctCode, pSeq, null);
        }

        /// <remarks/>
        public void CancelStandinInsAsync(int pBranchCode, int pCustomerNo, int pCurrency, int pLedger, int pSubAcctCode, int pSeq, object userState)
        {
            if ((this.CancelStandinInsOperationCompleted == null))
            {
                this.CancelStandinInsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelStandinInsOperationCompleted);
            }
            this.InvokeAsync("CancelStandinIns", new object[] {
                    pBranchCode,
                    pCustomerNo,
                    pCurrency,
                    pLedger,
                    pSubAcctCode,
                    pSeq}, this.CancelStandinInsOperationCompleted, userState);
        }

        private void OnCancelStandinInsOperationCompleted(object arg)
        {
            if ((this.CancelStandinInsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelStandinInsCompleted(this, new CancelStandinInsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStandingInstructionPM", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStandingInstructionPM(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code)
        {
            object[] results = this.Invoke("GetStandingInstructionPM", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetStandingInstructionPM(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetStandingInstructionPM", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetStandingInstructionPM(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetStandingInstructionPMAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code)
        {
            this.GetStandingInstructionPMAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, null);
        }

        /// <remarks/>
        public void GetStandingInstructionPMAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, object userState)
        {
            if ((this.GetStandingInstructionPMOperationCompleted == null))
            {
                this.GetStandingInstructionPMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStandingInstructionPMOperationCompleted);
            }
            this.InvokeAsync("GetStandingInstructionPM", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, this.GetStandingInstructionPMOperationCompleted, userState);
        }

        private void OnGetStandingInstructionPMOperationCompleted(object arg)
        {
            if ((this.GetStandingInstructionPMCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStandingInstructionPMCompleted(this, new GetStandingInstructionPMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStandingInstruction", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStandingInstruction(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            object[] results = this.Invoke("GetStandingInstruction", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetStandingInstruction(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetStandingInstruction", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetStandingInstruction(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetStandingInstructionAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode)
        {
            this.GetStandingInstructionAsync(bracode, cusnum, curcode, ledcode, subacctcode, null);
        }

        /// <remarks/>
        public void GetStandingInstructionAsync(string bracode, string cusnum, string curcode, string ledcode, string subacctcode, object userState)
        {
            if ((this.GetStandingInstructionOperationCompleted == null))
            {
                this.GetStandingInstructionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStandingInstructionOperationCompleted);
            }
            this.InvokeAsync("GetStandingInstruction", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode}, this.GetStandingInstructionOperationCompleted, userState);
        }

        private void OnGetStandingInstructionOperationCompleted(object arg)
        {
            if ((this.GetStandingInstructionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStandingInstructionCompleted(this, new GetStandingInstructionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateAdditionalACcount", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateAdditionalACcount(int bra, int cus, int cur, int led, int tell_id, string acctmgr, string acctnat)
        {
            object[] results = this.Invoke("CreateAdditionalACcount", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    tell_id,
                    acctmgr,
                    acctnat});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateAdditionalACcount(int bra, int cus, int cur, int led, int tell_id, string acctmgr, string acctnat, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateAdditionalACcount", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    tell_id,
                    acctmgr,
                    acctnat}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateAdditionalACcount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CreateAdditionalACcountAsync(int bra, int cus, int cur, int led, int tell_id, string acctmgr, string acctnat)
        {
            this.CreateAdditionalACcountAsync(bra, cus, cur, led, tell_id, acctmgr, acctnat, null);
        }

        /// <remarks/>
        public void CreateAdditionalACcountAsync(int bra, int cus, int cur, int led, int tell_id, string acctmgr, string acctnat, object userState)
        {
            if ((this.CreateAdditionalACcountOperationCompleted == null))
            {
                this.CreateAdditionalACcountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateAdditionalACcountOperationCompleted);
            }
            this.InvokeAsync("CreateAdditionalACcount", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    tell_id,
                    acctmgr,
                    acctnat}, this.CreateAdditionalACcountOperationCompleted, userState);
        }

        private void OnCreateAdditionalACcountOperationCompleted(object arg)
        {
            if ((this.CreateAdditionalACcountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateAdditionalACcountCompleted(this, new CreateAdditionalACcountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateAdditionalACcount1", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateAdditionalACcount1(int bra, int cus, int cur, int led, int tell_id)
        {
            object[] results = this.Invoke("CreateAdditionalACcount1", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    tell_id});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateAdditionalACcount1(int bra, int cus, int cur, int led, int tell_id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateAdditionalACcount1", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    tell_id}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateAdditionalACcount1(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CreateAdditionalACcount1Async(int bra, int cus, int cur, int led, int tell_id)
        {
            this.CreateAdditionalACcount1Async(bra, cus, cur, led, tell_id, null);
        }

        /// <remarks/>
        public void CreateAdditionalACcount1Async(int bra, int cus, int cur, int led, int tell_id, object userState)
        {
            if ((this.CreateAdditionalACcount1OperationCompleted == null))
            {
                this.CreateAdditionalACcount1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateAdditionalACcount1OperationCompleted);
            }
            this.InvokeAsync("CreateAdditionalACcount1", new object[] {
                    bra,
                    cus,
                    cur,
                    led,
                    tell_id}, this.CreateAdditionalACcount1OperationCompleted, userState);
        }

        private void OnCreateAdditionalACcount1OperationCompleted(object arg)
        {
            if ((this.CreateAdditionalACcount1Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateAdditionalACcount1Completed(this, new CreateAdditionalACcount1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCardProfiler", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateCardProfiler(string StartNumber, string EndNumber, string CreatedBy, string IsCurrent, string CardType, string DateApproved, string ApprovedBy, string ReferenceId, string Status, string RequestingBranch)
        {
            object[] results = this.Invoke("UpdateCardProfiler", new object[] {
                    StartNumber,
                    EndNumber,
                    CreatedBy,
                    IsCurrent,
                    CardType,
                    DateApproved,
                    ApprovedBy,
                    ReferenceId,
                    Status,
                    RequestingBranch});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateCardProfiler(string StartNumber, string EndNumber, string CreatedBy, string IsCurrent, string CardType, string DateApproved, string ApprovedBy, string ReferenceId, string Status, string RequestingBranch, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateCardProfiler", new object[] {
                    StartNumber,
                    EndNumber,
                    CreatedBy,
                    IsCurrent,
                    CardType,
                    DateApproved,
                    ApprovedBy,
                    ReferenceId,
                    Status,
                    RequestingBranch}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateCardProfiler(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateCardProfilerAsync(string StartNumber, string EndNumber, string CreatedBy, string IsCurrent, string CardType, string DateApproved, string ApprovedBy, string ReferenceId, string Status, string RequestingBranch)
        {
            this.UpdateCardProfilerAsync(StartNumber, EndNumber, CreatedBy, IsCurrent, CardType, DateApproved, ApprovedBy, ReferenceId, Status, RequestingBranch, null);
        }

        /// <remarks/>
        public void UpdateCardProfilerAsync(string StartNumber, string EndNumber, string CreatedBy, string IsCurrent, string CardType, string DateApproved, string ApprovedBy, string ReferenceId, string Status, string RequestingBranch, object userState)
        {
            if ((this.UpdateCardProfilerOperationCompleted == null))
            {
                this.UpdateCardProfilerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCardProfilerOperationCompleted);
            }
            this.InvokeAsync("UpdateCardProfiler", new object[] {
                    StartNumber,
                    EndNumber,
                    CreatedBy,
                    IsCurrent,
                    CardType,
                    DateApproved,
                    ApprovedBy,
                    ReferenceId,
                    Status,
                    RequestingBranch}, this.UpdateCardProfilerOperationCompleted, userState);
        }

        private void OnUpdateCardProfilerOperationCompleted(object arg)
        {
            if ((this.UpdateCardProfilerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCardProfilerCompleted(this, new UpdateCardProfilerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StopCheque", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StopCheque(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int start, int stop, string amount)
        {
            object[] results = this.Invoke("StopCheque", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    start,
                    stop,
                    amount});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginStopCheque(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int start, int stop, string amount, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("StopCheque", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    start,
                    stop,
                    amount}, callback, asyncState);
        }

        /// <remarks/>
        public string EndStopCheque(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void StopChequeAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int start, int stop, string amount)
        {
            this.StopChequeAsync(bracode, cusnum, curcode, ledcode, subacctcode, start, stop, amount, null);
        }

        /// <remarks/>
        public void StopChequeAsync(int bracode, int cusnum, int curcode, int ledcode, int subacctcode, int start, int stop, string amount, object userState)
        {
            if ((this.StopChequeOperationCompleted == null))
            {
                this.StopChequeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopChequeOperationCompleted);
            }
            this.InvokeAsync("StopCheque", new object[] {
                    bracode,
                    cusnum,
                    curcode,
                    ledcode,
                    subacctcode,
                    start,
                    stop,
                    amount}, this.StopChequeOperationCompleted, userState);
        }

        private void OnStopChequeOperationCompleted(object arg)
        {
            if ((this.StopChequeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopChequeCompleted(this, new StopChequeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferFund", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TransferFund(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks)
        {
            object[] results = this.Invoke("TransferFund", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTransferFund(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("TransferFund", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTransferFund(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TransferFundAsync(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks)
        {
            this.TransferFundAsync(Acct_fro, Acct_to, Amount, type, channel, Remarks, null);
        }

        /// <remarks/>
        public void TransferFundAsync(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, object userState)
        {
            if ((this.TransferFundOperationCompleted == null))
            {
                this.TransferFundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferFundOperationCompleted);
            }
            this.InvokeAsync("TransferFund", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks}, this.TransferFundOperationCompleted, userState);
        }

        private void OnTransferFundOperationCompleted(object arg)
        {
            if ((this.TransferFundCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferFundCompleted(this, new TransferFundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferFundProcessMaker", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TransferFundProcessMaker(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, string tellerid, int expl_code, string doc_num)
        {
            object[] results = this.Invoke("TransferFundProcessMaker", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    tellerid,
                    expl_code,
                    doc_num});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTransferFundProcessMaker(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, string tellerid, int expl_code, string doc_num, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("TransferFundProcessMaker", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    tellerid,
                    expl_code,
                    doc_num}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTransferFundProcessMaker(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TransferFundProcessMakerAsync(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, string tellerid, int expl_code, string doc_num)
        {
            this.TransferFundProcessMakerAsync(Acct_fro, Acct_to, Amount, type, channel, Remarks, tellerid, expl_code, doc_num, null);
        }

        /// <remarks/>
        public void TransferFundProcessMakerAsync(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, string tellerid, int expl_code, string doc_num, object userState)
        {
            if ((this.TransferFundProcessMakerOperationCompleted == null))
            {
                this.TransferFundProcessMakerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferFundProcessMakerOperationCompleted);
            }
            this.InvokeAsync("TransferFundProcessMaker", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    tellerid,
                    expl_code,
                    doc_num}, this.TransferFundProcessMakerOperationCompleted, userState);
        }

        private void OnTransferFundProcessMakerOperationCompleted(object arg)
        {
            if ((this.TransferFundProcessMakerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferFundProcessMakerCompleted(this, new TransferFundProcessMakerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferFundProcessMakerNew", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TransferFundProcessMakerNew(
                    string Acct_fro,
                    string Acct_to,
                    double Amount,
                    string type,
                    string channel,
                    string Remarks,
                    int tellerid,
                    int expl_code,
                    string doc_num,
                    string bra_code,
                    string doc_alp,
                    int vat_led_code,
                    int vat_sub_code,
                    int comm_led_code,
                    int comm_sub_code,
                    double comm_amt,
                    double vat_amt,
                    int exp_wht,
                    int exp_vat,
                    string whtremarks,
                    int man_tellerid)
        {
            object[] results = this.Invoke("TransferFundProcessMakerNew", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    tellerid,
                    expl_code,
                    doc_num,
                    bra_code,
                    doc_alp,
                    vat_led_code,
                    vat_sub_code,
                    comm_led_code,
                    comm_sub_code,
                    comm_amt,
                    vat_amt,
                    exp_wht,
                    exp_vat,
                    whtremarks,
                    man_tellerid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTransferFundProcessMakerNew(
                    string Acct_fro,
                    string Acct_to,
                    double Amount,
                    string type,
                    string channel,
                    string Remarks,
                    int tellerid,
                    int expl_code,
                    string doc_num,
                    string bra_code,
                    string doc_alp,
                    int vat_led_code,
                    int vat_sub_code,
                    int comm_led_code,
                    int comm_sub_code,
                    double comm_amt,
                    double vat_amt,
                    int exp_wht,
                    int exp_vat,
                    string whtremarks,
                    int man_tellerid,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("TransferFundProcessMakerNew", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    tellerid,
                    expl_code,
                    doc_num,
                    bra_code,
                    doc_alp,
                    vat_led_code,
                    vat_sub_code,
                    comm_led_code,
                    comm_sub_code,
                    comm_amt,
                    vat_amt,
                    exp_wht,
                    exp_vat,
                    whtremarks,
                    man_tellerid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTransferFundProcessMakerNew(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TransferFundProcessMakerNewAsync(
                    string Acct_fro,
                    string Acct_to,
                    double Amount,
                    string type,
                    string channel,
                    string Remarks,
                    int tellerid,
                    int expl_code,
                    string doc_num,
                    string bra_code,
                    string doc_alp,
                    int vat_led_code,
                    int vat_sub_code,
                    int comm_led_code,
                    int comm_sub_code,
                    double comm_amt,
                    double vat_amt,
                    int exp_wht,
                    int exp_vat,
                    string whtremarks,
                    int man_tellerid)
        {
            this.TransferFundProcessMakerNewAsync(Acct_fro, Acct_to, Amount, type, channel, Remarks, tellerid, expl_code, doc_num, bra_code, doc_alp, vat_led_code, vat_sub_code, comm_led_code, comm_sub_code, comm_amt, vat_amt, exp_wht, exp_vat, whtremarks, man_tellerid, null);
        }

        /// <remarks/>
        public void TransferFundProcessMakerNewAsync(
                    string Acct_fro,
                    string Acct_to,
                    double Amount,
                    string type,
                    string channel,
                    string Remarks,
                    int tellerid,
                    int expl_code,
                    string doc_num,
                    string bra_code,
                    string doc_alp,
                    int vat_led_code,
                    int vat_sub_code,
                    int comm_led_code,
                    int comm_sub_code,
                    double comm_amt,
                    double vat_amt,
                    int exp_wht,
                    int exp_vat,
                    string whtremarks,
                    int man_tellerid,
                    object userState)
        {
            if ((this.TransferFundProcessMakerNewOperationCompleted == null))
            {
                this.TransferFundProcessMakerNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferFundProcessMakerNewOperationCompleted);
            }
            this.InvokeAsync("TransferFundProcessMakerNew", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    tellerid,
                    expl_code,
                    doc_num,
                    bra_code,
                    doc_alp,
                    vat_led_code,
                    vat_sub_code,
                    comm_led_code,
                    comm_sub_code,
                    comm_amt,
                    vat_amt,
                    exp_wht,
                    exp_vat,
                    whtremarks,
                    man_tellerid}, this.TransferFundProcessMakerNewOperationCompleted, userState);
        }

        private void OnTransferFundProcessMakerNewOperationCompleted(object arg)
        {
            if ((this.TransferFundProcessMakerNewCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferFundProcessMakerNewCompleted(this, new TransferFundProcessMakerNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSalaryAdvanceStatus", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateSalaryAdvanceStatus(string uuid, string caseid, string status, int delindex)
        {
            object[] results = this.Invoke("UpdateSalaryAdvanceStatus", new object[] {
                    uuid,
                    caseid,
                    status,
                    delindex});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateSalaryAdvanceStatus(string uuid, string caseid, string status, int delindex, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateSalaryAdvanceStatus", new object[] {
                    uuid,
                    caseid,
                    status,
                    delindex}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateSalaryAdvanceStatus(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateSalaryAdvanceStatusAsync(string uuid, string caseid, string status, int delindex)
        {
            this.UpdateSalaryAdvanceStatusAsync(uuid, caseid, status, delindex, null);
        }

        /// <remarks/>
        public void UpdateSalaryAdvanceStatusAsync(string uuid, string caseid, string status, int delindex, object userState)
        {
            if ((this.UpdateSalaryAdvanceStatusOperationCompleted == null))
            {
                this.UpdateSalaryAdvanceStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSalaryAdvanceStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateSalaryAdvanceStatus", new object[] {
                    uuid,
                    caseid,
                    status,
                    delindex}, this.UpdateSalaryAdvanceStatusOperationCompleted, userState);
        }

        private void OnUpdateSalaryAdvanceStatusOperationCompleted(object arg)
        {
            if ((this.UpdateSalaryAdvanceStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSalaryAdvanceStatusCompleted(this, new UpdateSalaryAdvanceStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountManager", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAccountManager(string Acct_Number)
        {
            object[] results = this.Invoke("GetAccountManager", new object[] {
                    Acct_Number});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAccountManager(string Acct_Number, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAccountManager", new object[] {
                    Acct_Number}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAccountManager(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAccountManagerAsync(string Acct_Number)
        {
            this.GetAccountManagerAsync(Acct_Number, null);
        }

        /// <remarks/>
        public void GetAccountManagerAsync(string Acct_Number, object userState)
        {
            if ((this.GetAccountManagerOperationCompleted == null))
            {
                this.GetAccountManagerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountManagerOperationCompleted);
            }
            this.InvokeAsync("GetAccountManager", new object[] {
                    Acct_Number}, this.GetAccountManagerOperationCompleted, userState);
        }

        private void OnGetAccountManagerOperationCompleted(object arg)
        {
            if ((this.GetAccountManagerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountManagerCompleted(this, new GetAccountManagerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FXBlotterPosition", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FXBlotterPosition(string currency, string channel)
        {
            object[] results = this.Invoke("FXBlotterPosition", new object[] {
                    currency,
                    channel});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginFXBlotterPosition(string currency, string channel, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("FXBlotterPosition", new object[] {
                    currency,
                    channel}, callback, asyncState);
        }

        /// <remarks/>
        public string EndFXBlotterPosition(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void FXBlotterPositionAsync(string currency, string channel)
        {
            this.FXBlotterPositionAsync(currency, channel, null);
        }

        /// <remarks/>
        public void FXBlotterPositionAsync(string currency, string channel, object userState)
        {
            if ((this.FXBlotterPositionOperationCompleted == null))
            {
                this.FXBlotterPositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFXBlotterPositionOperationCompleted);
            }
            this.InvokeAsync("FXBlotterPosition", new object[] {
                    currency,
                    channel}, this.FXBlotterPositionOperationCompleted, userState);
        }

        private void OnFXBlotterPositionOperationCompleted(object arg)
        {
            if ((this.FXBlotterPositionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FXBlotterPositionCompleted(this, new FXBlotterPositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkGtaowe", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string checkGtaowe(string nuban)
        {
            object[] results = this.Invoke("checkGtaowe", new object[] {
                    nuban});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegincheckGtaowe(string nuban, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("checkGtaowe", new object[] {
                    nuban}, callback, asyncState);
        }

        /// <remarks/>
        public string EndcheckGtaowe(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void checkGtaoweAsync(string nuban)
        {
            this.checkGtaoweAsync(nuban, null);
        }

        /// <remarks/>
        public void checkGtaoweAsync(string nuban, object userState)
        {
            if ((this.checkGtaoweOperationCompleted == null))
            {
                this.checkGtaoweOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckGtaoweOperationCompleted);
            }
            this.InvokeAsync("checkGtaowe", new object[] {
                    nuban}, this.checkGtaoweOperationCompleted, userState);
        }

        private void OncheckGtaoweOperationCompleted(object arg)
        {
            if ((this.checkGtaoweCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkGtaoweCompleted(this, new checkGtaoweCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrievePmakerTraSeq", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetrievePmakerTraSeq(string Acct_fro, double Amount, string caseid, string expl_code)
        {
            object[] results = this.Invoke("RetrievePmakerTraSeq", new object[] {
                    Acct_fro,
                    Amount,
                    caseid,
                    expl_code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrievePmakerTraSeq(string Acct_fro, double Amount, string caseid, string expl_code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrievePmakerTraSeq", new object[] {
                    Acct_fro,
                    Amount,
                    caseid,
                    expl_code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRetrievePmakerTraSeq(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RetrievePmakerTraSeqAsync(string Acct_fro, double Amount, string caseid, string expl_code)
        {
            this.RetrievePmakerTraSeqAsync(Acct_fro, Amount, caseid, expl_code, null);
        }

        /// <remarks/>
        public void RetrievePmakerTraSeqAsync(string Acct_fro, double Amount, string caseid, string expl_code, object userState)
        {
            if ((this.RetrievePmakerTraSeqOperationCompleted == null))
            {
                this.RetrievePmakerTraSeqOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrievePmakerTraSeqOperationCompleted);
            }
            this.InvokeAsync("RetrievePmakerTraSeq", new object[] {
                    Acct_fro,
                    Amount,
                    caseid,
                    expl_code}, this.RetrievePmakerTraSeqOperationCompleted, userState);
        }

        private void OnRetrievePmakerTraSeqOperationCompleted(object arg)
        {
            if ((this.RetrievePmakerTraSeqCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrievePmakerTraSeqCompleted(this, new RetrievePmakerTraSeqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrievePmakerTraSeq2", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetrievePmakerTraSeq2(string Acct_fro, double Amount, string caseid, string expl_code)
        {
            object[] results = this.Invoke("RetrievePmakerTraSeq2", new object[] {
                    Acct_fro,
                    Amount,
                    caseid,
                    expl_code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrievePmakerTraSeq2(string Acct_fro, double Amount, string caseid, string expl_code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrievePmakerTraSeq2", new object[] {
                    Acct_fro,
                    Amount,
                    caseid,
                    expl_code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRetrievePmakerTraSeq2(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RetrievePmakerTraSeq2Async(string Acct_fro, double Amount, string caseid, string expl_code)
        {
            this.RetrievePmakerTraSeq2Async(Acct_fro, Amount, caseid, expl_code, null);
        }

        /// <remarks/>
        public void RetrievePmakerTraSeq2Async(string Acct_fro, double Amount, string caseid, string expl_code, object userState)
        {
            if ((this.RetrievePmakerTraSeq2OperationCompleted == null))
            {
                this.RetrievePmakerTraSeq2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrievePmakerTraSeq2OperationCompleted);
            }
            this.InvokeAsync("RetrievePmakerTraSeq2", new object[] {
                    Acct_fro,
                    Amount,
                    caseid,
                    expl_code}, this.RetrievePmakerTraSeq2OperationCompleted, userState);
        }

        private void OnRetrievePmakerTraSeq2OperationCompleted(object arg)
        {
            if ((this.RetrievePmakerTraSeq2Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrievePmakerTraSeq2Completed(this, new RetrievePmakerTraSeq2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBasisLoanDetailsWithReferenceKey", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBasisLoanDetailsWithReferenceKey(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code)
        {
            object[] results = this.Invoke("GetBasisLoanDetailsWithReferenceKey", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBasisLoanDetailsWithReferenceKey(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBasisLoanDetailsWithReferenceKey", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetBasisLoanDetailsWithReferenceKey(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetBasisLoanDetailsWithReferenceKeyAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code)
        {
            this.GetBasisLoanDetailsWithReferenceKeyAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, null);
        }

        /// <remarks/>
        public void GetBasisLoanDetailsWithReferenceKeyAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, object userState)
        {
            if ((this.GetBasisLoanDetailsWithReferenceKeyOperationCompleted == null))
            {
                this.GetBasisLoanDetailsWithReferenceKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasisLoanDetailsWithReferenceKeyOperationCompleted);
            }
            this.InvokeAsync("GetBasisLoanDetailsWithReferenceKey", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code}, this.GetBasisLoanDetailsWithReferenceKeyOperationCompleted, userState);
        }

        private void OnGetBasisLoanDetailsWithReferenceKeyOperationCompleted(object arg)
        {
            if ((this.GetBasisLoanDetailsWithReferenceKeyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasisLoanDetailsWithReferenceKeyCompleted(this, new GetBasisLoanDetailsWithReferenceKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLastSalary", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLastSalary(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, string no_of_mnth)
        {
            object[] results = this.Invoke("GetLastSalary", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    no_of_mnth});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetLastSalary(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, string no_of_mnth, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetLastSalary", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    no_of_mnth}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetLastSalary(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetLastSalaryAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, string no_of_mnth)
        {
            this.GetLastSalaryAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, no_of_mnth, null);
        }

        /// <remarks/>
        public void GetLastSalaryAsync(string bra_code, string cus_num, string cur_code, string led_code, string sub_acct_code, string no_of_mnth, object userState)
        {
            if ((this.GetLastSalaryOperationCompleted == null))
            {
                this.GetLastSalaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastSalaryOperationCompleted);
            }
            this.InvokeAsync("GetLastSalary", new object[] {
                    bra_code,
                    cus_num,
                    cur_code,
                    led_code,
                    sub_acct_code,
                    no_of_mnth}, this.GetLastSalaryOperationCompleted, userState);
        }

        private void OnGetLastSalaryOperationCompleted(object arg)
        {
            if ((this.GetLastSalaryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastSalaryCompleted(this, new GetLastSalaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBasisLoanDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBasisLoanDetails(string bra_code, string cus_num)
        {
            object[] results = this.Invoke("GetBasisLoanDetails", new object[] {
                    bra_code,
                    cus_num});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBasisLoanDetails(string bra_code, string cus_num, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBasisLoanDetails", new object[] {
                    bra_code,
                    cus_num}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetBasisLoanDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetBasisLoanDetailsAsync(string bra_code, string cus_num)
        {
            this.GetBasisLoanDetailsAsync(bra_code, cus_num, null);
        }

        /// <remarks/>
        public void GetBasisLoanDetailsAsync(string bra_code, string cus_num, object userState)
        {
            if ((this.GetBasisLoanDetailsOperationCompleted == null))
            {
                this.GetBasisLoanDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBasisLoanDetailsOperationCompleted);
            }
            this.InvokeAsync("GetBasisLoanDetails", new object[] {
                    bra_code,
                    cus_num}, this.GetBasisLoanDetailsOperationCompleted, userState);
        }

        private void OnGetBasisLoanDetailsOperationCompleted(object arg)
        {
            if ((this.GetBasisLoanDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBasisLoanDetailsCompleted(this, new GetBasisLoanDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferTraSeq", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TransferTraSeq(string Acct_fro, string Acct_to, double Amount, int expl_code, string Remarks)
        {
            object[] results = this.Invoke("TransferTraSeq", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    expl_code,
                    Remarks});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTransferTraSeq(string Acct_fro, string Acct_to, double Amount, int expl_code, string Remarks, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("TransferTraSeq", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    expl_code,
                    Remarks}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTransferTraSeq(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TransferTraSeqAsync(string Acct_fro, string Acct_to, double Amount, int expl_code, string Remarks)
        {
            this.TransferTraSeqAsync(Acct_fro, Acct_to, Amount, expl_code, Remarks, null);
        }

        /// <remarks/>
        public void TransferTraSeqAsync(string Acct_fro, string Acct_to, double Amount, int expl_code, string Remarks, object userState)
        {
            if ((this.TransferTraSeqOperationCompleted == null))
            {
                this.TransferTraSeqOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferTraSeqOperationCompleted);
            }
            this.InvokeAsync("TransferTraSeq", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    expl_code,
                    Remarks}, this.TransferTraSeqOperationCompleted, userState);
        }

        private void OnTransferTraSeqOperationCompleted(object arg)
        {
            if ((this.TransferTraSeqCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferTraSeqCompleted(this, new TransferTraSeqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferCharges", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TransferCharges(string Acct_fro, string Acct_to, string VATAcct_to, double Amount, int expl_code, string Remarks)
        {
            object[] results = this.Invoke("TransferCharges", new object[] {
                    Acct_fro,
                    Acct_to,
                    VATAcct_to,
                    Amount,
                    expl_code,
                    Remarks});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTransferCharges(string Acct_fro, string Acct_to, string VATAcct_to, double Amount, int expl_code, string Remarks, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("TransferCharges", new object[] {
                    Acct_fro,
                    Acct_to,
                    VATAcct_to,
                    Amount,
                    expl_code,
                    Remarks}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTransferCharges(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TransferChargesAsync(string Acct_fro, string Acct_to, string VATAcct_to, double Amount, int expl_code, string Remarks)
        {
            this.TransferChargesAsync(Acct_fro, Acct_to, VATAcct_to, Amount, expl_code, Remarks, null);
        }

        /// <remarks/>
        public void TransferChargesAsync(string Acct_fro, string Acct_to, string VATAcct_to, double Amount, int expl_code, string Remarks, object userState)
        {
            if ((this.TransferChargesOperationCompleted == null))
            {
                this.TransferChargesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferChargesOperationCompleted);
            }
            this.InvokeAsync("TransferCharges", new object[] {
                    Acct_fro,
                    Acct_to,
                    VATAcct_to,
                    Amount,
                    expl_code,
                    Remarks}, this.TransferChargesOperationCompleted, userState);
        }

        private void OnTransferChargesOperationCompleted(object arg)
        {
            if ((this.TransferChargesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferChargesCompleted(this, new TransferChargesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferFund_Cross", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TransferFund_Cross(string Acct_fro, string Acct_to, double Amount, double rate, double crossrate, string type, string channel, string Remarks)
        {
            object[] results = this.Invoke("TransferFund_Cross", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    rate,
                    crossrate,
                    type,
                    channel,
                    Remarks});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTransferFund_Cross(string Acct_fro, string Acct_to, double Amount, double rate, double crossrate, string type, string channel, string Remarks, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("TransferFund_Cross", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    rate,
                    crossrate,
                    type,
                    channel,
                    Remarks}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTransferFund_Cross(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TransferFund_CrossAsync(string Acct_fro, string Acct_to, double Amount, double rate, double crossrate, string type, string channel, string Remarks)
        {
            this.TransferFund_CrossAsync(Acct_fro, Acct_to, Amount, rate, crossrate, type, channel, Remarks, null);
        }

        /// <remarks/>
        public void TransferFund_CrossAsync(string Acct_fro, string Acct_to, double Amount, double rate, double crossrate, string type, string channel, string Remarks, object userState)
        {
            if ((this.TransferFund_CrossOperationCompleted == null))
            {
                this.TransferFund_CrossOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferFund_CrossOperationCompleted);
            }
            this.InvokeAsync("TransferFund_Cross", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    rate,
                    crossrate,
                    type,
                    channel,
                    Remarks}, this.TransferFund_CrossOperationCompleted, userState);
        }

        private void OnTransferFund_CrossOperationCompleted(object arg)
        {
            if ((this.TransferFund_CrossCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferFund_CrossCompleted(this, new TransferFund_CrossCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferCheques", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TransferCheques(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, string docnum, short identifier, short bankcode, short days)
        {
            object[] results = this.Invoke("TransferCheques", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    docnum,
                    identifier,
                    bankcode,
                    days});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTransferCheques(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, string docnum, short identifier, short bankcode, short days, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("TransferCheques", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    docnum,
                    identifier,
                    bankcode,
                    days}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTransferCheques(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TransferChequesAsync(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, string docnum, short identifier, short bankcode, short days)
        {
            this.TransferChequesAsync(Acct_fro, Acct_to, Amount, type, channel, Remarks, docnum, identifier, bankcode, days, null);
        }

        /// <remarks/>
        public void TransferChequesAsync(string Acct_fro, string Acct_to, double Amount, string type, string channel, string Remarks, string docnum, short identifier, short bankcode, short days, object userState)
        {
            if ((this.TransferChequesOperationCompleted == null))
            {
                this.TransferChequesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferChequesOperationCompleted);
            }
            this.InvokeAsync("TransferCheques", new object[] {
                    Acct_fro,
                    Acct_to,
                    Amount,
                    type,
                    channel,
                    Remarks,
                    docnum,
                    identifier,
                    bankcode,
                    days}, this.TransferChequesOperationCompleted, userState);
        }

        private void OnTransferChequesOperationCompleted(object arg)
        {
            if ((this.TransferChequesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferChequesCompleted(this, new TransferChequesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ResetUserPasscode", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ResetUserPasscode(string userid)
        {
            object[] results = this.Invoke("ResetUserPasscode", new object[] {
                    userid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginResetUserPasscode(string userid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ResetUserPasscode", new object[] {
                    userid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndResetUserPasscode(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ResetUserPasscodeAsync(string userid)
        {
            this.ResetUserPasscodeAsync(userid, null);
        }

        /// <remarks/>
        public void ResetUserPasscodeAsync(string userid, object userState)
        {
            if ((this.ResetUserPasscodeOperationCompleted == null))
            {
                this.ResetUserPasscodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetUserPasscodeOperationCompleted);
            }
            this.InvokeAsync("ResetUserPasscode", new object[] {
                    userid}, this.ResetUserPasscodeOperationCompleted, userState);
        }

        private void OnResetUserPasscodeOperationCompleted(object arg)
        {
            if ((this.ResetUserPasscodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetUserPasscodeCompleted(this, new ResetUserPasscodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeUserPasscode", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangeUserPasscode(string userid, string pass)
        {
            object[] results = this.Invoke("ChangeUserPasscode", new object[] {
                    userid,
                    pass});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginChangeUserPasscode(string userid, string pass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ChangeUserPasscode", new object[] {
                    userid,
                    pass}, callback, asyncState);
        }

        /// <remarks/>
        public string EndChangeUserPasscode(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ChangeUserPasscodeAsync(string userid, string pass)
        {
            this.ChangeUserPasscodeAsync(userid, pass, null);
        }

        /// <remarks/>
        public void ChangeUserPasscodeAsync(string userid, string pass, object userState)
        {
            if ((this.ChangeUserPasscodeOperationCompleted == null))
            {
                this.ChangeUserPasscodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeUserPasscodeOperationCompleted);
            }
            this.InvokeAsync("ChangeUserPasscode", new object[] {
                    userid,
                    pass}, this.ChangeUserPasscodeOperationCompleted, userState);
        }

        private void OnChangeUserPasscodeOperationCompleted(object arg)
        {
            if ((this.ChangeUserPasscodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeUserPasscodeCompleted(this, new ChangeUserPasscodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeAdminUserPasscode", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangeAdminUserPasscode(string userid, string pswd)
        {
            object[] results = this.Invoke("ChangeAdminUserPasscode", new object[] {
                    userid,
                    pswd});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginChangeAdminUserPasscode(string userid, string pswd, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ChangeAdminUserPasscode", new object[] {
                    userid,
                    pswd}, callback, asyncState);
        }

        /// <remarks/>
        public string EndChangeAdminUserPasscode(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ChangeAdminUserPasscodeAsync(string userid, string pswd)
        {
            this.ChangeAdminUserPasscodeAsync(userid, pswd, null);
        }

        /// <remarks/>
        public void ChangeAdminUserPasscodeAsync(string userid, string pswd, object userState)
        {
            if ((this.ChangeAdminUserPasscodeOperationCompleted == null))
            {
                this.ChangeAdminUserPasscodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeAdminUserPasscodeOperationCompleted);
            }
            this.InvokeAsync("ChangeAdminUserPasscode", new object[] {
                    userid,
                    pswd}, this.ChangeAdminUserPasscodeOperationCompleted, userState);
        }

        private void OnChangeAdminUserPasscodeOperationCompleted(object arg)
        {
            if ((this.ChangeAdminUserPasscodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeAdminUserPasscodeCompleted(this, new ChangeAdminUserPasscodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetApplicationRoleUsers", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetApplicationRoleUsers(int roleid, int appid)
        {
            object[] results = this.Invoke("GetApplicationRoleUsers", new object[] {
                    roleid,
                    appid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetApplicationRoleUsers(int roleid, int appid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetApplicationRoleUsers", new object[] {
                    roleid,
                    appid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetApplicationRoleUsers(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetApplicationRoleUsersAsync(int roleid, int appid)
        {
            this.GetApplicationRoleUsersAsync(roleid, appid, null);
        }

        /// <remarks/>
        public void GetApplicationRoleUsersAsync(int roleid, int appid, object userState)
        {
            if ((this.GetApplicationRoleUsersOperationCompleted == null))
            {
                this.GetApplicationRoleUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApplicationRoleUsersOperationCompleted);
            }
            this.InvokeAsync("GetApplicationRoleUsers", new object[] {
                    roleid,
                    appid}, this.GetApplicationRoleUsersOperationCompleted, userState);
        }

        private void OnGetApplicationRoleUsersOperationCompleted(object arg)
        {
            if ((this.GetApplicationRoleUsersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApplicationRoleUsersCompleted(this, new GetApplicationRoleUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAdminUserName", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAdminUserName(string uid)
        {
            object[] results = this.Invoke("GetAdminUserName", new object[] {
                    uid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAdminUserName(string uid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAdminUserName", new object[] {
                    uid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAdminUserName(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAdminUserNameAsync(string uid)
        {
            this.GetAdminUserNameAsync(uid, null);
        }

        /// <remarks/>
        public void GetAdminUserNameAsync(string uid, object userState)
        {
            if ((this.GetAdminUserNameOperationCompleted == null))
            {
                this.GetAdminUserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdminUserNameOperationCompleted);
            }
            this.InvokeAsync("GetAdminUserName", new object[] {
                    uid}, this.GetAdminUserNameOperationCompleted, userState);
        }

        private void OnGetAdminUserNameOperationCompleted(object arg)
        {
            if ((this.GetAdminUserNameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdminUserNameCompleted(this, new GetAdminUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerDetails(string userid)
        {
            object[] results = this.Invoke("GetCustomerDetails", new object[] {
                    userid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCustomerDetails(string userid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCustomerDetails", new object[] {
                    userid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetCustomerDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetCustomerDetailsAsync(string userid)
        {
            this.GetCustomerDetailsAsync(userid, null);
        }

        /// <remarks/>
        public void GetCustomerDetailsAsync(string userid, object userState)
        {
            if ((this.GetCustomerDetailsOperationCompleted == null))
            {
                this.GetCustomerDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerDetailsOperationCompleted);
            }
            this.InvokeAsync("GetCustomerDetails", new object[] {
                    userid}, this.GetCustomerDetailsOperationCompleted, userState);
        }

        private void OnGetCustomerDetailsOperationCompleted(object arg)
        {
            if ((this.GetCustomerDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerDetailsCompleted(this, new GetCustomerDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateAccount", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateAccount(string userid, string acctno)
        {
            object[] results = this.Invoke("ValidateAccount", new object[] {
                    userid,
                    acctno});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginValidateAccount(string userid, string acctno, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ValidateAccount", new object[] {
                    userid,
                    acctno}, callback, asyncState);
        }

        /// <remarks/>
        public string EndValidateAccount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ValidateAccountAsync(string userid, string acctno)
        {
            this.ValidateAccountAsync(userid, acctno, null);
        }

        /// <remarks/>
        public void ValidateAccountAsync(string userid, string acctno, object userState)
        {
            if ((this.ValidateAccountOperationCompleted == null))
            {
                this.ValidateAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateAccountOperationCompleted);
            }
            this.InvokeAsync("ValidateAccount", new object[] {
                    userid,
                    acctno}, this.ValidateAccountOperationCompleted, userState);
        }

        private void OnValidateAccountOperationCompleted(object arg)
        {
            if ((this.ValidateAccountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateAccountCompleted(this, new ValidateAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckUserFlag", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckUserFlag(string uid)
        {
            object[] results = this.Invoke("CheckUserFlag", new object[] {
                    uid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckUserFlag(string uid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckUserFlag", new object[] {
                    uid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCheckUserFlag(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckUserFlagAsync(string uid)
        {
            this.CheckUserFlagAsync(uid, null);
        }

        /// <remarks/>
        public void CheckUserFlagAsync(string uid, object userState)
        {
            if ((this.CheckUserFlagOperationCompleted == null))
            {
                this.CheckUserFlagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUserFlagOperationCompleted);
            }
            this.InvokeAsync("CheckUserFlag", new object[] {
                    uid}, this.CheckUserFlagOperationCompleted, userState);
        }

        private void OnCheckUserFlagOperationCompleted(object arg)
        {
            if ((this.CheckUserFlagCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUserFlagCompleted(this, new CheckUserFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ResetUserFlag", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ResetUserFlag(string uid)
        {
            object[] results = this.Invoke("ResetUserFlag", new object[] {
                    uid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginResetUserFlag(string uid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ResetUserFlag", new object[] {
                    uid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndResetUserFlag(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ResetUserFlagAsync(string uid)
        {
            this.ResetUserFlagAsync(uid, null);
        }

        /// <remarks/>
        public void ResetUserFlagAsync(string uid, object userState)
        {
            if ((this.ResetUserFlagOperationCompleted == null))
            {
                this.ResetUserFlagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetUserFlagOperationCompleted);
            }
            this.InvokeAsync("ResetUserFlag", new object[] {
                    uid}, this.ResetUserFlagOperationCompleted, userState);
        }

        private void OnResetUserFlagOperationCompleted(object arg)
        {
            if ((this.ResetUserFlagCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetUserFlagCompleted(this, new ResetUserFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EncryptData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EncryptData(string datavalue, string key)
        {
            object[] results = this.Invoke("EncryptData", new object[] {
                    datavalue,
                    key});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginEncryptData(string datavalue, string key, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("EncryptData", new object[] {
                    datavalue,
                    key}, callback, asyncState);
        }

        /// <remarks/>
        public string EndEncryptData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void EncryptDataAsync(string datavalue, string key)
        {
            this.EncryptDataAsync(datavalue, key, null);
        }

        /// <remarks/>
        public void EncryptDataAsync(string datavalue, string key, object userState)
        {
            if ((this.EncryptDataOperationCompleted == null))
            {
                this.EncryptDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncryptDataOperationCompleted);
            }
            this.InvokeAsync("EncryptData", new object[] {
                    datavalue,
                    key}, this.EncryptDataOperationCompleted, userState);
        }

        private void OnEncryptDataOperationCompleted(object arg)
        {
            if ((this.EncryptDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EncryptDataCompleted(this, new EncryptDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProfileNewCardUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProfileNewCardUser(string Branch_Code, string Customer_No, string PickUp_BranchCode, string RequestReason_ID, string CardType, string Status, string Request_Type, string Request_By, string CardholderName, decimal AmountCharged, string accountToLink)
        {
            object[] results = this.Invoke("ProfileNewCardUser", new object[] {
                    Branch_Code,
                    Customer_No,
                    PickUp_BranchCode,
                    RequestReason_ID,
                    CardType,
                    Status,
                    Request_Type,
                    Request_By,
                    CardholderName,
                    AmountCharged,
                    accountToLink});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginProfileNewCardUser(string Branch_Code, string Customer_No, string PickUp_BranchCode, string RequestReason_ID, string CardType, string Status, string Request_Type, string Request_By, string CardholderName, decimal AmountCharged, string accountToLink, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ProfileNewCardUser", new object[] {
                    Branch_Code,
                    Customer_No,
                    PickUp_BranchCode,
                    RequestReason_ID,
                    CardType,
                    Status,
                    Request_Type,
                    Request_By,
                    CardholderName,
                    AmountCharged,
                    accountToLink}, callback, asyncState);
        }

        /// <remarks/>
        public string EndProfileNewCardUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ProfileNewCardUserAsync(string Branch_Code, string Customer_No, string PickUp_BranchCode, string RequestReason_ID, string CardType, string Status, string Request_Type, string Request_By, string CardholderName, decimal AmountCharged, string accountToLink)
        {
            this.ProfileNewCardUserAsync(Branch_Code, Customer_No, PickUp_BranchCode, RequestReason_ID, CardType, Status, Request_Type, Request_By, CardholderName, AmountCharged, accountToLink, null);
        }

        /// <remarks/>
        public void ProfileNewCardUserAsync(string Branch_Code, string Customer_No, string PickUp_BranchCode, string RequestReason_ID, string CardType, string Status, string Request_Type, string Request_By, string CardholderName, decimal AmountCharged, string accountToLink, object userState)
        {
            if ((this.ProfileNewCardUserOperationCompleted == null))
            {
                this.ProfileNewCardUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProfileNewCardUserOperationCompleted);
            }
            this.InvokeAsync("ProfileNewCardUser", new object[] {
                    Branch_Code,
                    Customer_No,
                    PickUp_BranchCode,
                    RequestReason_ID,
                    CardType,
                    Status,
                    Request_Type,
                    Request_By,
                    CardholderName,
                    AmountCharged,
                    accountToLink}, this.ProfileNewCardUserOperationCompleted, userState);
        }

        private void OnProfileNewCardUserOperationCompleted(object arg)
        {
            if ((this.ProfileNewCardUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProfileNewCardUserCompleted(this, new ProfileNewCardUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DecryptData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DecryptData(string datavalue, string key)
        {
            object[] results = this.Invoke("DecryptData", new object[] {
                    datavalue,
                    key});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDecryptData(string datavalue, string key, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DecryptData", new object[] {
                    datavalue,
                    key}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDecryptData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DecryptDataAsync(string datavalue, string key)
        {
            this.DecryptDataAsync(datavalue, key, null);
        }

        /// <remarks/>
        public void DecryptDataAsync(string datavalue, string key, object userState)
        {
            if ((this.DecryptDataOperationCompleted == null))
            {
                this.DecryptDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDecryptDataOperationCompleted);
            }
            this.InvokeAsync("DecryptData", new object[] {
                    datavalue,
                    key}, this.DecryptDataOperationCompleted, userState);
        }

        private void OnDecryptDataOperationCompleted(object arg)
        {
            if ((this.DecryptDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DecryptDataCompleted(this, new DecryptDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferCTI", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TransferCTI(string IVRINFO, string CHANID)
        {
            object[] results = this.Invoke("TransferCTI", new object[] {
                    IVRINFO,
                    CHANID});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTransferCTI(string IVRINFO, string CHANID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("TransferCTI", new object[] {
                    IVRINFO,
                    CHANID}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTransferCTI(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TransferCTIAsync(string IVRINFO, string CHANID)
        {
            this.TransferCTIAsync(IVRINFO, CHANID, null);
        }

        /// <remarks/>
        public void TransferCTIAsync(string IVRINFO, string CHANID, object userState)
        {
            if ((this.TransferCTIOperationCompleted == null))
            {
                this.TransferCTIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferCTIOperationCompleted);
            }
            this.InvokeAsync("TransferCTI", new object[] {
                    IVRINFO,
                    CHANID}, this.TransferCTIOperationCompleted, userState);
        }

        private void OnTransferCTIOperationCompleted(object arg)
        {
            if ((this.TransferCTICompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferCTICompleted(this, new TransferCTICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StartCTI", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartCTI(string CHANID)
        {
            object[] results = this.Invoke("StartCTI", new object[] {
                    CHANID});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginStartCTI(string CHANID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("StartCTI", new object[] {
                    CHANID}, callback, asyncState);
        }

        /// <remarks/>
        public string EndStartCTI(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void StartCTIAsync(string CHANID)
        {
            this.StartCTIAsync(CHANID, null);
        }

        /// <remarks/>
        public void StartCTIAsync(string CHANID, object userState)
        {
            if ((this.StartCTIOperationCompleted == null))
            {
                this.StartCTIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartCTIOperationCompleted);
            }
            this.InvokeAsync("StartCTI", new object[] {
                    CHANID}, this.StartCTIOperationCompleted, userState);
        }

        private void OnStartCTIOperationCompleted(object arg)
        {
            if ((this.StartCTICompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartCTICompleted(this, new StartCTICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogAdminUserAction", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LogAdminUserAction(int AppID, string userid, long staffid, string Action)
        {
            object[] results = this.Invoke("LogAdminUserAction", new object[] {
                    AppID,
                    userid,
                    staffid,
                    Action});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginLogAdminUserAction(int AppID, string userid, long staffid, string Action, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("LogAdminUserAction", new object[] {
                    AppID,
                    userid,
                    staffid,
                    Action}, callback, asyncState);
        }

        /// <remarks/>
        public string EndLogAdminUserAction(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void LogAdminUserActionAsync(int AppID, string userid, long staffid, string Action)
        {
            this.LogAdminUserActionAsync(AppID, userid, staffid, Action, null);
        }

        /// <remarks/>
        public void LogAdminUserActionAsync(int AppID, string userid, long staffid, string Action, object userState)
        {
            if ((this.LogAdminUserActionOperationCompleted == null))
            {
                this.LogAdminUserActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogAdminUserActionOperationCompleted);
            }
            this.InvokeAsync("LogAdminUserAction", new object[] {
                    AppID,
                    userid,
                    staffid,
                    Action}, this.LogAdminUserActionOperationCompleted, userState);
        }

        private void OnLogAdminUserActionOperationCompleted(object arg)
        {
            if ((this.LogAdminUserActionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogAdminUserActionCompleted(this, new LogAdminUserActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
    public partial class CustSigVal2
    {

        private string custdetField;

        private object[] pictureField;

        private string[] sigSeqField;

        private string[] commentsField;

        private string[] cus_sho_nameField;

        private string[] diary_dataField;

        /// <remarks/>
        public string custdet
        {
            get
            {
                return this.custdetField;
            }
            set
            {
                this.custdetField = value;
            }
        }

        /// <remarks/>
        public object[] picture
        {
            get
            {
                return this.pictureField;
            }
            set
            {
                this.pictureField = value;
            }
        }

        /// <remarks/>
        public string[] SigSeq
        {
            get
            {
                return this.sigSeqField;
            }
            set
            {
                this.sigSeqField = value;
            }
        }

        /// <remarks/>
        public string[] Comments
        {
            get
            {
                return this.commentsField;
            }
            set
            {
                this.commentsField = value;
            }
        }

        /// <remarks/>
        public string[] cus_sho_name
        {
            get
            {
                return this.cus_sho_nameField;
            }
            set
            {
                this.cus_sho_nameField = value;
            }
        }

        /// <remarks/>
        public string[] diary_data
        {
            get
            {
                return this.diary_dataField;
            }
            set
            {
                this.diary_dataField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
    public partial class CustSigVal
    {

        private string custdetField;

        private object[] pictureField;

        private string[] sigSeqField;

        /// <remarks/>
        public string custdet
        {
            get
            {
                return this.custdetField;
            }
            set
            {
                this.custdetField = value;
            }
        }

        /// <remarks/>
        public object[] picture
        {
            get
            {
                return this.pictureField;
            }
            set
            {
                this.pictureField = value;
            }
        }

        /// <remarks/>
        public string[] SigSeq
        {
            get
            {
                return this.sigSeqField;
            }
            set
            {
                this.sigSeqField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
    public partial class CustDetRetVal
    {

        private string custdetField;

        private object[] pictureField;

        private string[] accountsField;

        private string[] mandatesField;

        /// <remarks/>
        public string custdet
        {
            get
            {
                return this.custdetField;
            }
            set
            {
                this.custdetField = value;
            }
        }

        /// <remarks/>
        public object[] picture
        {
            get
            {
                return this.pictureField;
            }
            set
            {
                this.pictureField = value;
            }
        }

        /// <remarks/>
        public string[] Accounts
        {
            get
            {
                return this.accountsField;
            }
            set
            {
                this.accountsField = value;
            }
        }

        /// <remarks/>
        public string[] Mandates
        {
            get
            {
                return this.mandatesField;
            }
            set
            {
                this.mandatesField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getApprovedSignatoryCompletedEventHandler(object sender, getApprovedSignatoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getApprovedSignatoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getApprovedSignatoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void InsertGTCollectionformCompletedEventHandler(object sender, InsertGTCollectionformCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertGTCollectionformCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertGTCollectionformCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void InsertGTformfieldCompletedEventHandler(object sender, InsertGTformfieldCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertGTformfieldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertGTformfieldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void InsertGTChargeCompletedEventHandler(object sender, InsertGTChargeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertGTChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertGTChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateformCompletedEventHandler(object sender, UpdateformCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateformCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateformCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateMAXIBANKCompletedEventHandler(object sender, UpdateMAXIBANKCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateMAXIBANKCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateMAXIBANKCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateFXPMProcessCompletedEventHandler(object sender, UpdateFXPMProcessCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFXPMProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateFXPMProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetfacilitybalCompletedEventHandler(object sender, GetfacilitybalCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetfacilitybalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetfacilitybalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateUsrnameCompletedEventHandler(object sender, UpdateUsrnameCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateUsrnameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateUsrnameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetTeamEmailCompletedEventHandler(object sender, GetTeamEmailCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetTeamEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetTransactionAlertStatusCompletedEventHandler(object sender, GetTransactionAlertStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionAlertStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetTransactionAlertStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void TransferFunds_TranSeqCommitCompletedEventHandler(object sender, TransferFunds_TranSeqCommitCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferFunds_TranSeqCommitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferFunds_TranSeqCommitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void TransferFunds_TranSeqCommitCapexOpexCompletedEventHandler(object sender, TransferFunds_TranSeqCommitCapexOpexCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferFunds_TranSeqCommitCapexOpexCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferFunds_TranSeqCommitCapexOpexCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void TransferFunds_TranSeqFXFutureDateCompletedEventHandler(object sender, TransferFunds_TranSeqFXFutureDateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferFunds_TranSeqFXFutureDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferFunds_TranSeqFXFutureDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ExistCustSearchCompletedEventHandler(object sender, ExistCustSearchCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExistCustSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ExistCustSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetGTWEBAPItokenCompletedEventHandler(object sender, GetGTWEBAPItokenCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGTWEBAPItokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetGTWEBAPItokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void InsertAccountDeferralDoc_DetailsCompletedEventHandler(object sender, InsertAccountDeferralDoc_DetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertAccountDeferralDoc_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertAccountDeferralDoc_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void BookLoan_BASISCompletedEventHandler(object sender, BookLoan_BASISCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BookLoan_BASISCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal BookLoan_BASISCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void RescheduleLoan_BASISCompletedEventHandler(object sender, RescheduleLoan_BASISCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RescheduleLoan_BASISCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RescheduleLoan_BASISCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void LiquidateLoan_BASISCompletedEventHandler(object sender, LiquidateLoan_BASISCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LiquidateLoan_BASISCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LiquidateLoan_BASISCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CreateLedgerCompletedEventHandler(object sender, CreateLedgerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateLedgerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateLedgerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateTransferLimitCompletedEventHandler(object sender, UpdateTransferLimitCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTransferLimitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateTransferLimitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetLedgerDetailsCompletedEventHandler(object sender, GetLedgerDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLedgerDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetLedgerDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetUserIDCompletedEventHandler(object sender, GetUserIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateFXTransferLog_PMCompletedEventHandler(object sender, UpdateFXTransferLog_PMCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFXTransferLog_PMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateFXTransferLog_PMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void InsertChequeBookRequestsCompletedEventHandler(object sender, InsertChequeBookRequestsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertChequeBookRequestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertChequeBookRequestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetCustomerDOBHistoryCompletedEventHandler(object sender, GetCustomerDOBHistoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerDOBHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCustomerDOBHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetDeferredDocCompletedEventHandler(object sender, GetDeferredDocCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeferredDocCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetDeferredDocCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAccountLinkedEmailCompletedEventHandler(object sender, GetAccountLinkedEmailCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountLinkedEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAccountLinkedEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAccountNatureCompletedEventHandler(object sender, GetAccountNatureCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountNatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAccountNatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void SearchOFACListCompletedEventHandler(object sender, SearchOFACListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchOFACListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SearchOFACListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetCustBVNCompletedEventHandler(object sender, GetCustBVNCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustBVNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCustBVNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetLinkedAcct2BVNCompletedEventHandler(object sender, GetLinkedAcct2BVNCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLinkedAcct2BVNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetLinkedAcct2BVNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void AddInReferenceCompletedEventHandler(object sender, AddInReferenceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddInReferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddInReferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void AddoutReferenceCompletedEventHandler(object sender, AddoutReferenceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddoutReferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddoutReferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void AddUnsuitableReferenceCompletedEventHandler(object sender, AddUnsuitableReferenceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddUnsuitableReferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddUnsuitableReferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void InsertBallimCompletedEventHandler(object sender, InsertBallimCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertBallimCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertBallimCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void InsertCardAccountCompletedEventHandler(object sender, InsertCardAccountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertCardAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertCardAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAccountDetailsCompletedEventHandler(object sender, GetAccountDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAccountDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ProcessSalaryAdvanceCompletedEventHandler(object sender, ProcessSalaryAdvanceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessSalaryAdvanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ProcessSalaryAdvanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateGOHAttestationInfoCompletedEventHandler(object sender, UpdateGOHAttestationInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateGOHAttestationInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateGOHAttestationInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getOutstandingBranchesCompletedEventHandler(object sender, getOutstandingBranchesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOutstandingBranchesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getOutstandingBranchesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateRelStatusCompletedEventHandler(object sender, UpdateRelStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateRelStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateRelStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void PostToBASIS_With_ChargesCompletedEventHandler(object sender, PostToBASIS_With_ChargesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostToBASIS_With_ChargesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal PostToBASIS_With_ChargesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void Temporary_requestCompletedEventHandler(object sender, Temporary_requestCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Temporary_requestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal Temporary_requestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetReliefExistCompletedEventHandler(object sender, GetReliefExistCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReliefExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetReliefExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateReliefDutyCompletedEventHandler(object sender, UpdateReliefDutyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateReliefDutyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateReliefDutyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void KillMyIDCompletedEventHandler(object sender, KillMyIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KillMyIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal KillMyIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CreateNewMgrCompletedEventHandler(object sender, CreateNewMgrCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewMgrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateNewMgrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void RemoveledrestCompletedEventHandler(object sender, RemoveledrestCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveledrestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RemoveledrestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void OpenextertransCompletedEventHandler(object sender, OpenextertransCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenextertransCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal OpenextertransCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void InsertLedgAmendRecordCompletedEventHandler(object sender, InsertLedgAmendRecordCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertLedgAmendRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertLedgAmendRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void InsertInto_EBillspayMerchantCompletedEventHandler(object sender, InsertInto_EBillspayMerchantCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertInto_EBillspayMerchantCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertInto_EBillspayMerchantCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void InsertAppVersionCompletedEventHandler(object sender, InsertAppVersionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertAppVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertAppVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CreateNewTeamCompletedEventHandler(object sender, CreateNewTeamCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateNewTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CustomerUpdateCompletedEventHandler(object sender, CustomerUpdateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CustomerUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ChangeAcctChaCompletedEventHandler(object sender, ChangeAcctChaCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeAcctChaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ChangeAcctChaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void AddEoneRoleCompletedEventHandler(object sender, AddEoneRoleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEoneRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddEoneRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void AddBasisRoleCompletedEventHandler(object sender, AddBasisRoleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddBasisRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddBasisRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void AddNewTellerCompletedEventHandler(object sender, AddNewTellerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddNewTellerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddNewTellerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CustBlacklistSearchCompletedEventHandler(object sender, CustBlacklistSearchCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustBlacklistSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CustBlacklistSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetCOTDetailsCompletedEventHandler(object sender, GetCOTDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCOTDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCOTDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void SearchBASISUserCompletedEventHandler(object sender, SearchBASISUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchBASISUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SearchBASISUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void AnalyzeFxCompletedEventHandler(object sender, AnalyzeFxCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AnalyzeFxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AnalyzeFxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void submitFXRequestToBASISCompletedEventHandler(object sender, submitFXRequestToBASISCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class submitFXRequestToBASISCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal submitFXRequestToBASISCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void deleteFXRequestCompletedEventHandler(object sender, deleteFXRequestCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteFXRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal deleteFXRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getFXRequestStatusCompletedEventHandler(object sender, getFXRequestStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFXRequestStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getFXRequestStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ValidatePEPCompletedEventHandler(object sender, ValidatePEPCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidatePEPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidatePEPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ValidateTokenSerialCompletedEventHandler(object sender, ValidateTokenSerialCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateTokenSerialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateTokenSerialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ValidateTokenSerialForStaffCompletedEventHandler(object sender, ValidateTokenSerialForStaffCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateTokenSerialForStaffCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateTokenSerialForStaffCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAccountStatusnewCompletedEventHandler(object sender, GetAccountStatusnewCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountStatusnewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAccountStatusnewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ImageToByteArrayCompletedEventHandler(object sender, ImageToByteArrayCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImageToByteArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ImageToByteArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAccountStatusCompletedEventHandler(object sender, GetAccountStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAccountStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void DisplayAdd_CPCCompletedEventHandler(object sender, DisplayAdd_CPCCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisplayAdd_CPCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DisplayAdd_CPCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetStaffIDLevelCompletedEventHandler(object sender, GetStaffIDLevelCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStaffIDLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetStaffIDLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetStaffEmpDateCompletedEventHandler(object sender, GetStaffEmpDateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStaffEmpDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetStaffEmpDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetStaffRecordsCompletedEventHandler(object sender, GetStaffRecordsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStaffRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetStaffRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CheckTransactionExistCompletedEventHandler(object sender, CheckTransactionExistCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckTransactionExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckTransactionExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetStaffConfDateCompletedEventHandler(object sender, GetStaffConfDateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStaffConfDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetStaffConfDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBasisSignatureAndSequence2CompletedEventHandler(object sender, GetBasisSignatureAndSequence2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasisSignatureAndSequence2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBasisSignatureAndSequence2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CustSigVal2 Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((CustSigVal2)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ValidateLoanMasCustomerCompletedEventHandler(object sender, ValidateLoanMasCustomerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateLoanMasCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateLoanMasCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CheckLoanExistCompletedEventHandler(object sender, CheckLoanExistCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckLoanExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckLoanExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBasisDetailsForFTRCompletedEventHandler(object sender, GetBasisDetailsForFTRCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasisDetailsForFTRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBasisDetailsForFTRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBasisDetailsForFastBVNCompletedEventHandler(object sender, GetBasisDetailsForFastBVNCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasisDetailsForFastBVNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBasisDetailsForFastBVNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBasisDetailsForBVNCompletedEventHandler(object sender, GetBasisDetailsForBVNCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasisDetailsForBVNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBasisDetailsForBVNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetSeqAccountListCompletedEventHandler(object sender, GetSeqAccountListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSeqAccountListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSeqAccountListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ValidateTemporaryCodeCompletedEventHandler(object sender, ValidateTemporaryCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateTemporaryCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateTemporaryCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ValidateGTInstantCodeCompletedEventHandler(object sender, ValidateGTInstantCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateGTInstantCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateGTInstantCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void validatemobileCPCCompletedEventHandler(object sender, validatemobileCPCCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class validatemobileCPCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal validatemobileCPCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void InsertBankCardUniqueCodeCompletedEventHandler(object sender, InsertBankCardUniqueCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertBankCardUniqueCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertBankCardUniqueCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CreateGapsCustomerCompletedEventHandler(object sender, CreateGapsCustomerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateGapsCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateGapsCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CreateGapsCustomer2CompletedEventHandler(object sender, CreateGapsCustomer2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateGapsCustomer2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateGapsCustomer2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CreateGapsAccountCompletedEventHandler(object sender, CreateGapsAccountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateGapsAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateGapsAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void InsertBiometricPMCompletedEventHandler(object sender, InsertBiometricPMCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertBiometricPMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertBiometricPMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void InsertMailTempCompletedEventHandler(object sender, InsertMailTempCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMailTempCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertMailTempCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CreateGapsUserCompletedEventHandler(object sender, CreateGapsUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateGapsUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateGapsUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ProfileNewUserEoneCompletedEventHandler(object sender, ProfileNewUserEoneCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProfileNewUserEoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ProfileNewUserEoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ApproveGapsUserCompletedEventHandler(object sender, ApproveGapsUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApproveGapsUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ApproveGapsUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void SelectGapsTokenDetailsCompletedEventHandler(object sender, SelectGapsTokenDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectGapsTokenDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SelectGapsTokenDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void InsertGapsTokenDetailsCompletedEventHandler(object sender, InsertGapsTokenDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertGapsTokenDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertGapsTokenDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetStaffAcctNumCompletedEventHandler(object sender, GetStaffAcctNumCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStaffAcctNumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetStaffAcctNumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void SelectGapsTokenDetailsPmCompletedEventHandler(object sender, SelectGapsTokenDetailsPmCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectGapsTokenDetailsPmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SelectGapsTokenDetailsPmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetStaffSubordinatesCompletedEventHandler(object sender, GetStaffSubordinatesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStaffSubordinatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetStaffSubordinatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetTeamMembersCompletedEventHandler(object sender, GetTeamMembersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetTeamMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetStaffAppraisalsCompletedEventHandler(object sender, GetStaffAppraisalsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStaffAppraisalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetStaffAppraisalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void PMRedeployUserCompletedEventHandler(object sender, PMRedeployUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PMRedeployUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal PMRedeployUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdatePMUserActiveCompletedEventHandler(object sender, UpdatePMUserActiveCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePMUserActiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdatePMUserActiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetUserDetailsCompletedEventHandler(object sender, GetUserDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetUserDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdatePMUserInactiveCompletedEventHandler(object sender, UpdatePMUserInactiveCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePMUserInactiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdatePMUserInactiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdatePMUserVacationCompletedEventHandler(object sender, UpdatePMUserVacationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePMUserVacationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdatePMUserVacationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetInactiveUserCompletedEventHandler(object sender, GetInactiveUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInactiveUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetInactiveUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataSet Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetTeamNameCompletedEventHandler(object sender, GetTeamNameCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetTeamNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetTeamDetailsCompletedEventHandler(object sender, GetTeamDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetTeamDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetEquvalentAmountCompletedEventHandler(object sender, GetEquvalentAmountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEquvalentAmountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetEquvalentAmountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CancelFX_PMCompletedEventHandler(object sender, CancelFX_PMCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelFX_PMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CancelFX_PMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CancelFX_PM1CompletedEventHandler(object sender, CancelFX_PM1CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelFX_PM1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CancelFX_PM1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void SearchMobileCompletedEventHandler(object sender, SearchMobileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchMobileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SearchMobileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetCheckBookCompletedEventHandler(object sender, GetCheckBookCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCheckBookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCheckBookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getDirectorsCompletedEventHandler(object sender, getDirectorsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDirectorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getDirectorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CheckGTInstantAccCompletedEventHandler(object sender, CheckGTInstantAccCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckGTInstantAccCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckGTInstantAccCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void SelectFormCompletedEventHandler(object sender, SelectFormCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectFormCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SelectFormCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void SelectChargeCompletedEventHandler(object sender, SelectChargeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SelectChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getIntAccruedLastPeriodCompletedEventHandler(object sender, getIntAccruedLastPeriodCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getIntAccruedLastPeriodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getIntAccruedLastPeriodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetPOSUsersDetailsCompletedEventHandler(object sender, GetPOSUsersDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPOSUsersDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPOSUsersDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataSet Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CheckGTCollectionCustomerCompletedEventHandler(object sender, CheckGTCollectionCustomerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckGTCollectionCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckGTCollectionCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CheckGAPSCustomerCompletedEventHandler(object sender, CheckGAPSCustomerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckGAPSCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckGAPSCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ValidateCodesCompletedEventHandler(object sender, ValidateCodesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateCodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateCodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ExtensionUserCompletedEventHandler(object sender, ExtensionUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExtensionUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ExtensionUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void InsertGTCollectionCusCompletedEventHandler(object sender, InsertGTCollectionCusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertGTCollectionCusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertGTCollectionCusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void AddNewAdminUserCompletedEventHandler(object sender, AddNewAdminUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddNewAdminUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddNewAdminUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateAdminUserCompletedEventHandler(object sender, UpdateAdminUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateAdminUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateAdminUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAdminUserDetailsCompletedEventHandler(object sender, GetAdminUserDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdminUserDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAdminUserDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void SearchAdminUserCompletedEventHandler(object sender, SearchAdminUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchAdminUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SearchAdminUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAllRolesCompletedEventHandler(object sender, GetAllRolesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAllRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAllAdminUsersCompletedEventHandler(object sender, GetAllAdminUsersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllAdminUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAllAdminUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBasisCustomerMandateCompletedEventHandler(object sender, GetBasisCustomerMandateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasisCustomerMandateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBasisCustomerMandateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CustDetRetVal Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((CustDetRetVal)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAllBranchesCompletedEventHandler(object sender, GetAllBranchesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllBranchesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAllBranchesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ActivateAdminUserCompletedEventHandler(object sender, ActivateAdminUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateAdminUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ActivateAdminUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void DeactivateAdminUserCompletedEventHandler(object sender, DeactivateAdminUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeactivateAdminUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeactivateAdminUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetTellerTillAcctCompletedEventHandler(object sender, GetTellerTillAcctCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTellerTillAcctCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetTellerTillAcctCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetZoneAcctCompletedEventHandler(object sender, GetZoneAcctCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetZoneAcctCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetZoneAcctCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBranchAcctCompletedEventHandler(object sender, GetBranchAcctCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBranchAcctCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBranchAcctCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetCustomerTurnoverCompletedEventHandler(object sender, GetCustomerTurnoverCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerTurnoverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCustomerTurnoverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAllBasisRolesCompletedEventHandler(object sender, GetAllBasisRolesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllBasisRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAllBasisRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBasisCustomerDetailsCompletedEventHandler(object sender, GetBasisCustomerDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasisCustomerDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBasisCustomerDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CustDetRetVal Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((CustDetRetVal)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBasisCustomerDetailsForAchivalCompletedEventHandler(object sender, GetBasisCustomerDetailsForAchivalCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasisCustomerDetailsForAchivalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBasisCustomerDetailsForAchivalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CustDetRetVal Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((CustDetRetVal)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetNubanAcctKeyCompletedEventHandler(object sender, GetNubanAcctKeyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNubanAcctKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetNubanAcctKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBasisSignatureAndSequenceCompletedEventHandler(object sender, GetBasisSignatureAndSequenceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasisSignatureAndSequenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBasisSignatureAndSequenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CustSigVal Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((CustSigVal)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateBVNCompletedEventHandler(object sender, UpdateBVNCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateBVNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateBVNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBasisSignatureAndSequence1CompletedEventHandler(object sender, GetBasisSignatureAndSequence1CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasisSignatureAndSequence1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBasisSignatureAndSequence1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CustSigVal Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((CustSigVal)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void InitiateIReferCompletedEventHandler(object sender, InitiateIReferCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateIReferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InitiateIReferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getAllRestrictionsCompletedEventHandler(object sender, getAllRestrictionsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllRestrictionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getAllRestrictionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getTransactFromBasisCompletedEventHandler(object sender, getTransactFromBasisCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTransactFromBasisCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getTransactFromBasisCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getbalLimitCompletedEventHandler(object sender, getbalLimitCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getbalLimitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getbalLimitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getRestrictions1314CompletedEventHandler(object sender, getRestrictions1314CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRestrictions1314CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getRestrictions1314CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getAllRestrictionsForBVNCompletedEventHandler(object sender, getAllRestrictionsForBVNCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllRestrictionsForBVNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getAllRestrictionsForBVNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void AddRestrictionbvnCompletedEventHandler(object sender, AddRestrictionbvnCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRestrictionbvnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddRestrictionbvnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void AddRestrictionCompletedEventHandler(object sender, AddRestrictionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRestrictionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddRestrictionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void AddRelationshipCompletedEventHandler(object sender, AddRelationshipCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRelationshipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddRelationshipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void TbillsDealCompletedEventHandler(object sender, TbillsDealCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TbillsDealCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TbillsDealCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void AddDirectorInfoCompletedEventHandler(object sender, AddDirectorInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDirectorInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddDirectorInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CarVehicleCompletedEventHandler(object sender, CarVehicleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CarVehicleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CarVehicleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CarReturnCompletedEventHandler(object sender, CarReturnCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CarReturnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CarReturnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void RemoveRestrictionbvnCompletedEventHandler(object sender, RemoveRestrictionbvnCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveRestrictionbvnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RemoveRestrictionbvnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void RemoveRestrictionCompletedEventHandler(object sender, RemoveRestrictionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveRestrictionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RemoveRestrictionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBasisCustomerSignatureCompletedEventHandler(object sender, GetBasisCustomerSignatureCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasisCustomerSignatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBasisCustomerSignatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBasisSignaturesCompletedEventHandler(object sender, GetBasisSignaturesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasisSignaturesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBasisSignaturesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public object[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateVersionDetailsCompletedEventHandler(object sender, UpdateVersionDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateVersionDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateVersionDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void SoftTokenSerialNoCompletedEventHandler(object sender, SoftTokenSerialNoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SoftTokenSerialNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SoftTokenSerialNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBasisTellerTillAcctCompletedEventHandler(object sender, GetBasisTellerTillAcctCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasisTellerTillAcctCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBasisTellerTillAcctCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getTellerLimitCompletedEventHandler(object sender, getTellerLimitCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTellerLimitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getTellerLimitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getTellerLimitPinPadCompletedEventHandler(object sender, getTellerLimitPinPadCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTellerLimitPinPadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getTellerLimitPinPadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetTellerIDCompletedEventHandler(object sender, GetTellerIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTellerIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetTellerIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetTellerdetailsCompletedEventHandler(object sender, GetTellerdetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTellerdetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetTellerdetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetGAPSPMCompletedEventHandler(object sender, GetGAPSPMCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGAPSPMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetGAPSPMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getPinPadValuesCompletedEventHandler(object sender, getPinPadValuesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPinPadValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getPinPadValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getTransactionHistoryCompletedEventHandler(object sender, getTransactionHistoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTransactionHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getTransactionHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataTable Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getTranSeqCompletedEventHandler(object sender, getTranSeqCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTranSeqCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getTranSeqCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getcusDepositDetailsCompletedEventHandler(object sender, getcusDepositDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getcusDepositDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getcusDepositDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CallOverCompletedEventHandler(object sender, CallOverCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallOverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CallOverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CallOver2CompletedEventHandler(object sender, CallOver2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallOver2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CallOver2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CallOverSummaryCompletedEventHandler(object sender, CallOverSummaryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallOverSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CallOverSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getcusDepositDetailsOldAccountCompletedEventHandler(object sender, getcusDepositDetailsOldAccountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getcusDepositDetailsOldAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getcusDepositDetailsOldAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void BlockFunds_PMCompletedEventHandler(object sender, BlockFunds_PMCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BlockFunds_PMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal BlockFunds_PMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void RemoveBlockFunds_PMCompletedEventHandler(object sender, RemoveBlockFunds_PMCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveBlockFunds_PMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RemoveBlockFunds_PMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ValidateBVNCompletedEventHandler(object sender, ValidateBVNCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateBVNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateBVNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void SelectBVNCompletedEventHandler(object sender, SelectBVNCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectBVNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SelectBVNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void SelectBVNMltCompletedEventHandler(object sender, SelectBVNMltCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectBVNMltCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SelectBVNMltCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void SelectBlkamtCompletedEventHandler(object sender, SelectBlkamtCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectBlkamtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SelectBlkamtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void SelectRepaSchCompletedEventHandler(object sender, SelectRepaSchCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectRepaSchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SelectRepaSchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ConvertToNubanCompletedEventHandler(object sender, ConvertToNubanCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertToNubanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ConvertToNubanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ConvertToOldAccountNumberCompletedEventHandler(object sender, ConvertToOldAccountNumberCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertToOldAccountNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ConvertToOldAccountNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAllBasisUsersCompletedEventHandler(object sender, GetAllBasisUsersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllBasisUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAllBasisUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ConfirmSignatureCompletedEventHandler(object sender, ConfirmSignatureCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConfirmSignatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ConfirmSignatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetTimeDepDetailsForProcessMakerCompletedEventHandler(object sender, GetTimeDepDetailsForProcessMakerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTimeDepDetailsForProcessMakerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetTimeDepDetailsForProcessMakerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetRateForProcessMakerCompletedEventHandler(object sender, GetRateForProcessMakerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRateForProcessMakerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetRateForProcessMakerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBasisDetailsForProcessMakerCompletedEventHandler(object sender, GetBasisDetailsForProcessMakerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasisDetailsForProcessMakerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBasisDetailsForProcessMakerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBasisDetailsForProcessMaker4CompletedEventHandler(object sender, GetBasisDetailsForProcessMaker4CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasisDetailsForProcessMaker4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBasisDetailsForProcessMaker4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void DeleteSignatureCompletedEventHandler(object sender, DeleteSignatureCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSignatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteSignatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBasisDetailsForProcessMaker3CompletedEventHandler(object sender, GetBasisDetailsForProcessMaker3CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasisDetailsForProcessMaker3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBasisDetailsForProcessMaker3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void SearchBlackCustCompletedEventHandler(object sender, SearchBlackCustCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchBlackCustCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SearchBlackCustCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ConvertToWordsCompletedEventHandler(object sender, ConvertToWordsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertToWordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ConvertToWordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ConvertDigitCompletedEventHandler(object sender, ConvertDigitCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertDigitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ConvertDigitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ProcessMakerSlipNoCompletedEventHandler(object sender, ProcessMakerSlipNoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessMakerSlipNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ProcessMakerSlipNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getCurrRateCompletedEventHandler(object sender, getCurrRateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCurrRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getCurrRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void BlockUnblockFundsCompletedEventHandler(object sender, BlockUnblockFundsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BlockUnblockFundsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal BlockUnblockFundsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void MoveAcctMgrCompletedEventHandler(object sender, MoveAcctMgrCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveAcctMgrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal MoveAcctMgrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void PMAccountReactivationCompletedEventHandler(object sender, PMAccountReactivationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PMAccountReactivationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal PMAccountReactivationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CreateNewBasisAccount2CompletedEventHandler(object sender, CreateNewBasisAccount2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewBasisAccount2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateNewBasisAccount2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CreateNewBasisAccount3CompletedEventHandler(object sender, CreateNewBasisAccount3CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewBasisAccount3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateNewBasisAccount3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CreateNewBasisAccount2KioskCompletedEventHandler(object sender, CreateNewBasisAccount2KioskCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewBasisAccount2KioskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateNewBasisAccount2KioskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CloseAccountCompletedEventHandler(object sender, CloseAccountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CloseAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CloseAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void AvailRevolvingCreditCompletedEventHandler(object sender, AvailRevolvingCreditCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AvailRevolvingCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AvailRevolvingCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void InsertMT103CompletedEventHandler(object sender, InsertMT103CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMT103CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertMT103CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ValidateUserTokenCompletedEventHandler(object sender, ValidateUserTokenCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateUserTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateUserTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpsertCalypsoMonitorCompletedEventHandler(object sender, UpsertCalypsoMonitorCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpsertCalypsoMonitorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpsertCalypsoMonitorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void DeleteBVNCompletedEventHandler(object sender, DeleteBVNCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteBVNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteBVNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ApproveBASISChequeBookCompletedEventHandler(object sender, ApproveBASISChequeBookCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApproveBASISChequeBookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ApproveBASISChequeBookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void RequestBASISChequeBookCompletedEventHandler(object sender, RequestBASISChequeBookCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestBASISChequeBookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RequestBASISChequeBookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void PMUpdateBankCardCompletedEventHandler(object sender, PMUpdateBankCardCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PMUpdateBankCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal PMUpdateBankCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void PM_FundingNewAccountsCompletedEventHandler(object sender, PM_FundingNewAccountsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PM_FundingNewAccountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal PM_FundingNewAccountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CheckActiveUsanceCompletedEventHandler(object sender, CheckActiveUsanceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckActiveUsanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckActiveUsanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ValidateBeneficiaryAccountCompletedEventHandler(object sender, ValidateBeneficiaryAccountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateBeneficiaryAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateBeneficiaryAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void TransferFundsPMFXCompletedEventHandler(object sender, TransferFundsPMFXCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferFundsPMFXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferFundsPMFXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void PostToBASISDocCompletedEventHandler(object sender, PostToBASISDocCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostToBASISDocCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal PostToBASISDocCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetFTRAccountListCISCompletedEventHandler(object sender, GetFTRAccountListCISCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFTRAccountListCISCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetFTRAccountListCISCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetFTRAccountListCompletedEventHandler(object sender, GetFTRAccountListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFTRAccountListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetFTRAccountListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAllBasisAccFTRCompletedEventHandler(object sender, GetAllBasisAccFTRCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllBasisAccFTRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAllBasisAccFTRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetFTRAccountListCIS_CardCompletedEventHandler(object sender, GetFTRAccountListCIS_CardCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFTRAccountListCIS_CardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetFTRAccountListCIS_CardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetFTRAccountListNairaCompletedEventHandler(object sender, GetFTRAccountListNairaCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFTRAccountListNairaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetFTRAccountListNairaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetDomAccListCompletedEventHandler(object sender, GetDomAccListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomAccListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetDomAccListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void FXConcessionCompletedEventHandler(object sender, FXConcessionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FXConcessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal FXConcessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void checkrestrictionCompletedEventHandler(object sender, checkrestrictionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkrestrictionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal checkrestrictionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ValidateAdminUserCompletedEventHandler(object sender, ValidateAdminUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateAdminUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateAdminUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ValidateEncryptedAdminUserWithIPCompletedEventHandler(object sender, ValidateEncryptedAdminUserWithIPCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateEncryptedAdminUserWithIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateEncryptedAdminUserWithIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ValidateEncryptedAdminUserCompletedEventHandler(object sender, ValidateEncryptedAdminUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateEncryptedAdminUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateEncryptedAdminUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ValidateAdminUserOffSiteCompletedEventHandler(object sender, ValidateAdminUserOffSiteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateAdminUserOffSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateAdminUserOffSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ValidateUserCompletedEventHandler(object sender, ValidateUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAccountBalanceCompletedEventHandler(object sender, GetAccountBalanceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAccountBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAccountBalanceSumCompletedEventHandler(object sender, GetAccountBalanceSumCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountBalanceSumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAccountBalanceSumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAccountBalanceTrandateCompletedEventHandler(object sender, GetAccountBalanceTrandateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountBalanceTrandateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAccountBalanceTrandateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetCustomerNameCompletedEventHandler(object sender, GetCustomerNameCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCustomerNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetLedgerNameCompletedEventHandler(object sender, GetLedgerNameCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLedgerNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetLedgerNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getRelationshipForSICompletedEventHandler(object sender, getRelationshipForSICompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRelationshipForSICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getRelationshipForSICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateTemporaryCardCodeCompletedEventHandler(object sender, UpdateTemporaryCardCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTemporaryCardCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateTemporaryCardCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetLastTransactionDetailsCompletedEventHandler(object sender, GetLastTransactionDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastTransactionDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetLastTransactionDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetLastAccountStatementCompletedEventHandler(object sender, GetLastAccountStatementCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastAccountStatementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetLastAccountStatementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAccountRestrictionCompletedEventHandler(object sender, GetAccountRestrictionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountRestrictionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAccountRestrictionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void TransferFundPMCompletedEventHandler(object sender, TransferFundPMCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferFundPMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferFundPMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void TransferFundPM57CompletedEventHandler(object sender, TransferFundPM57CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferFundPM57CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferFundPM57CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void MaxAdvanceEligibityDetailsCompletedEventHandler(object sender, MaxAdvanceEligibityDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MaxAdvanceEligibityDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal MaxAdvanceEligibityDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void APRandRepaymentAmountForMaxAdvanceCompletedEventHandler(object sender, APRandRepaymentAmountForMaxAdvanceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class APRandRepaymentAmountForMaxAdvanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal APRandRepaymentAmountForMaxAdvanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateAddCompletedEventHandler(object sender, UpdateAddCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CreateNewTfsFeatureCompletedEventHandler(object sender, CreateNewTfsFeatureCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewTfsFeatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateNewTfsFeatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateBasisAccount2CompletedEventHandler(object sender, UpdateBasisAccount2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateBasisAccount2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateBasisAccount2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateBasisAccount1CompletedEventHandler(object sender, UpdateBasisAccount1CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateBasisAccount1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateBasisAccount1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateBasisAccountCompletedEventHandler(object sender, UpdateBasisAccountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateBasisAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateBasisAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateSpecAccCompletedEventHandler(object sender, UpdateSpecAccCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSpecAccCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateSpecAccCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CreateStandingInsCompletedEventHandler(object sender, CreateStandingInsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateStandingInsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateStandingInsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CreateStandingInsTypeCompletedEventHandler(object sender, CreateStandingInsTypeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateStandingInsTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateStandingInsTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CancelStandinInsCompletedEventHandler(object sender, CancelStandinInsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelStandinInsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CancelStandinInsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetStandingInstructionPMCompletedEventHandler(object sender, GetStandingInstructionPMCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStandingInstructionPMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetStandingInstructionPMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetStandingInstructionCompletedEventHandler(object sender, GetStandingInstructionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStandingInstructionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetStandingInstructionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CreateAdditionalACcountCompletedEventHandler(object sender, CreateAdditionalACcountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateAdditionalACcountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateAdditionalACcountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CreateAdditionalACcount1CompletedEventHandler(object sender, CreateAdditionalACcount1CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateAdditionalACcount1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateAdditionalACcount1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateCardProfilerCompletedEventHandler(object sender, UpdateCardProfilerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCardProfilerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateCardProfilerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void StopChequeCompletedEventHandler(object sender, StopChequeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StopChequeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal StopChequeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void TransferFundCompletedEventHandler(object sender, TransferFundCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferFundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferFundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void TransferFundProcessMakerCompletedEventHandler(object sender, TransferFundProcessMakerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferFundProcessMakerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferFundProcessMakerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void TransferFundProcessMakerNewCompletedEventHandler(object sender, TransferFundProcessMakerNewCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferFundProcessMakerNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferFundProcessMakerNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void UpdateSalaryAdvanceStatusCompletedEventHandler(object sender, UpdateSalaryAdvanceStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSalaryAdvanceStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateSalaryAdvanceStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAccountManagerCompletedEventHandler(object sender, GetAccountManagerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountManagerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAccountManagerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void FXBlotterPositionCompletedEventHandler(object sender, FXBlotterPositionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FXBlotterPositionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal FXBlotterPositionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void checkGtaoweCompletedEventHandler(object sender, checkGtaoweCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkGtaoweCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal checkGtaoweCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void RetrievePmakerTraSeqCompletedEventHandler(object sender, RetrievePmakerTraSeqCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrievePmakerTraSeqCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrievePmakerTraSeqCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void RetrievePmakerTraSeq2CompletedEventHandler(object sender, RetrievePmakerTraSeq2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrievePmakerTraSeq2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrievePmakerTraSeq2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBasisLoanDetailsWithReferenceKeyCompletedEventHandler(object sender, GetBasisLoanDetailsWithReferenceKeyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasisLoanDetailsWithReferenceKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBasisLoanDetailsWithReferenceKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetLastSalaryCompletedEventHandler(object sender, GetLastSalaryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastSalaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetLastSalaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetBasisLoanDetailsCompletedEventHandler(object sender, GetBasisLoanDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBasisLoanDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBasisLoanDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void TransferTraSeqCompletedEventHandler(object sender, TransferTraSeqCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferTraSeqCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferTraSeqCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void TransferChargesCompletedEventHandler(object sender, TransferChargesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferChargesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferChargesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void TransferFund_CrossCompletedEventHandler(object sender, TransferFund_CrossCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferFund_CrossCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferFund_CrossCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void TransferChequesCompletedEventHandler(object sender, TransferChequesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferChequesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferChequesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ResetUserPasscodeCompletedEventHandler(object sender, ResetUserPasscodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetUserPasscodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ResetUserPasscodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ChangeUserPasscodeCompletedEventHandler(object sender, ChangeUserPasscodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeUserPasscodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ChangeUserPasscodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ChangeAdminUserPasscodeCompletedEventHandler(object sender, ChangeAdminUserPasscodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeAdminUserPasscodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ChangeAdminUserPasscodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetApplicationRoleUsersCompletedEventHandler(object sender, GetApplicationRoleUsersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetApplicationRoleUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetApplicationRoleUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetAdminUserNameCompletedEventHandler(object sender, GetAdminUserNameCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdminUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAdminUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetCustomerDetailsCompletedEventHandler(object sender, GetCustomerDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCustomerDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ValidateAccountCompletedEventHandler(object sender, ValidateAccountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void CheckUserFlagCompletedEventHandler(object sender, CheckUserFlagCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUserFlagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckUserFlagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ResetUserFlagCompletedEventHandler(object sender, ResetUserFlagCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetUserFlagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ResetUserFlagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void EncryptDataCompletedEventHandler(object sender, EncryptDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EncryptDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal EncryptDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ProfileNewCardUserCompletedEventHandler(object sender, ProfileNewCardUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProfileNewCardUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ProfileNewCardUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void DecryptDataCompletedEventHandler(object sender, DecryptDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DecryptDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DecryptDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void TransferCTICompletedEventHandler(object sender, TransferCTICompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferCTICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferCTICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void StartCTICompletedEventHandler(object sender, StartCTICompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartCTICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal StartCTICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void LogAdminUserActionCompletedEventHandler(object sender, LogAdminUserActionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogAdminUserActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LogAdminUserActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

}
